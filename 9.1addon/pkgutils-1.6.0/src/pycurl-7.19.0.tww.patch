Index: setup.py
===================================================================
--- setup.py.orig	2008-09-09 17:40:34.000000000 +0000
+++ setup.py	2009-08-04 22:43:22.000000000 +0000
@@ -16,11 +16,7 @@
 from distutils.util import split_quoted
 from distutils.version import LooseVersion
 
-include_dirs = []
 define_macros = []
-library_dirs = []
-libraries = []
-runtime_library_dirs = []
 extra_objects = []
 extra_compile_args = []
 extra_link_args = []
@@ -40,84 +36,17 @@
     ##print sys.argv
     return p
 
-
-# append contents of an environment variable to library_dirs[]
-def add_libdirs(envvar, sep, fatal=0):
-    v = os.environ.get(envvar)
-    if not v:
-        return
-    for dir in string.split(v, sep):
-        dir = string.strip(dir)
-        if not dir:
-            continue
-        dir = os.path.normpath(dir)
-        if os.path.isdir(dir):
-            if not dir in library_dirs:
-                library_dirs.append(dir)
-        elif fatal:
-            print "FATAL: bad directory %s in environment variable %s" % (dir, envvar)
-            sys.exit(1)
-
-
-if sys.platform == "win32":
-    # Windows users have to configure the CURL_DIR path parameter to match
-    # their cURL source installation.  The path set here is just an example
-    # and thus unlikely to match your installation.
-    CURL_DIR = r"c:\src\build\pycurl\curl-7.16.2.1"
-    CURL_DIR = scan_argv("--curl-dir=", CURL_DIR)
-    print "Using curl directory:", CURL_DIR
-    assert os.path.isdir(CURL_DIR), "please check CURL_DIR in setup.py"
-    include_dirs.append(os.path.join(CURL_DIR, "include"))
-    extra_objects.append(os.path.join(CURL_DIR, "lib", "libcurl.lib"))
-    extra_link_args.extend(["gdi32.lib", "wldap32.lib", "winmm.lib", "ws2_32.lib",])
-    add_libdirs("LIB", ";")
-    if string.find(sys.version, "MSC") >= 0:
-        extra_compile_args.append("-O2")
-        extra_compile_args.append("-GF")        # enable read-only string pooling
-        extra_compile_args.append("-WX")        # treat warnings as errors
-        extra_link_args.append("/opt:nowin98")  # use small section alignment
-else:
-    # Find out the rest the hard way
-    OPENSSL_DIR = scan_argv("--openssl-dir=", "")
-    if OPENSSL_DIR != "":
-        include_dirs.append(os.path.join(OPENSSL_DIR, "include"))
-    CURL_CONFIG = "curl-config"
-    CURL_CONFIG = scan_argv("--curl-config=", CURL_CONFIG)
-    d = os.popen("'%s' --version" % CURL_CONFIG).read()
-    if d:
-        d = string.strip(d)
-    if not d:
-        raise Exception, ("`%s' not found -- please install the libcurl development files" % CURL_CONFIG)
-    print "Using %s (%s)" % (CURL_CONFIG, d)
-    for e in split_quoted(os.popen("'%s' --cflags" % CURL_CONFIG).read()):
-        if e[:2] == "-I":
-            # do not add /usr/include
-            if not re.search(r"^\/+usr\/+include\/*$", e[2:]):
-                include_dirs.append(e[2:])
-        else:
-            extra_compile_args.append(e)
-    libs = split_quoted(
-        os.popen("'%s' --libs" % CURL_CONFIG).read()+\
-        os.popen("'%s' --static-libs" % CURL_CONFIG).read())
-    for e in libs:
-        if e[:2] == "-l":
-            libraries.append(e[2:])
-            if e[2:] == 'ssl':
-                define_macros.append(('HAVE_CURL_OPENSSL', 1))
-            if e[2:] == 'gnutls':
-                define_macros.append(('HAVE_CURL_GNUTLS', 1))
-        elif e[:2] == "-L":
-            library_dirs.append(e[2:])
-        else:
-            extra_link_args.append(e)
-    for e in split_quoted(os.popen("'%s' --features" % CURL_CONFIG).read()):
-        if e == 'SSL':
-            define_macros.append(('HAVE_CURL_SSL', 1))
-    if not libraries:
-        libraries.append("curl")
-    # Add extra compile flag for MacOS X
-    if sys.platform[:-1] == "darwin":
-        extra_link_args.append("-flat_namespace")
+CURL_CONFIG = "curl-config"
+CURL_CONFIG = scan_argv("--curl-config=", CURL_CONFIG)
+for e in split_quoted(os.popen("'%s' --static-libs" % CURL_CONFIG).read()):
+    if e[:2] == "-l":
+        if e[2:] == 'ssl':
+            define_macros.append(('HAVE_CURL_OPENSSL', 1))
+        if e[2:] == 'gnutls':
+            define_macros.append(('HAVE_CURL_GNUTLS', 1))
+for e in split_quoted(os.popen("'%s' --features" % CURL_CONFIG).read()):
+    if e == 'SSL':
+        define_macros.append(('HAVE_CURL_SSL', 1))
 
 
 ###############################################################################
@@ -129,11 +58,8 @@
     sources=[
         os.path.join("src", "pycurl.c"),
     ],
-    include_dirs=include_dirs,
     define_macros=define_macros,
-    library_dirs=library_dirs,
-    libraries=libraries,
-    runtime_library_dirs=runtime_library_dirs,
+    libraries=['curl'],
     extra_objects=extra_objects,
     extra_compile_args=extra_compile_args,
     extra_link_args=extra_link_args,
@@ -148,10 +74,7 @@
 def get_data_files():
     # a list of tuples with (path to install to, a list of local files)
     data_files = []
-    if sys.platform == "win32":
-        datadir = os.path.join("doc", PACKAGE)
-    else:
-        datadir = os.path.join("share", "doc", PACKAGE)
+    datadir = os.path.join("doc")
     #
     files = ["ChangeLog", "COPYING", "COPYING2", "INSTALL", "README", "TODO",]
     if files:
@@ -159,12 +82,6 @@
     files = glob.glob(os.path.join("doc", "*.html"))
     if files:
         data_files.append((os.path.join(datadir, "html"), files))
-    files = glob.glob(os.path.join("examples", "*.py"))
-    if files:
-        data_files.append((os.path.join(datadir, "examples"), files))
-    files = glob.glob(os.path.join("tests", "*.py"))
-    if files:
-        data_files.append((os.path.join(datadir, "tests"), files))
     #
     assert data_files
     for install_dir, files in data_files:
Index: src/pycurl.c
===================================================================
--- src/pycurl.c.orig	2008-09-09 17:40:34.000000000 +0000
+++ src/pycurl.c	2009-09-18 16:57:35.930744789 +0000
@@ -1163,7 +1163,7 @@
 	    ret = CURL_SOCKET_BAD;
 	    goto verbose_error;
 	}
-	// normal operation:
+	/* normal operation: */
 	if (PyInt_Check(fileno_result)) {
 	    ret = dup(PyInt_AsLong(fileno_result));
 	    goto done;
