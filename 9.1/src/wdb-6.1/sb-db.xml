<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="wdb" version="6.1" revision="1"
  systype="*-hpux11*">
    <build-name>Src</build-name>

    <install-name>${SB_PROG_NAME}61</install-name>

    <sources>
      <source checksum="97add1beb1d9a081ac01dd74858cf73e"
        checksum-type="md5" size="41199821"
        path="src/WDB-6.1-src.tar.gz"/>
      <patch checksum="b02355a5ce683a7ac51b45bfb6091a86"
        checksum-type="md5" size="8376"
        path="src/Src.tww.patch"/>
      <patch checksum="b1caaba810a7d4561ace4feeb820d1df"
        checksum-type="md5" size="33567"
        path="src/Src.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="gettext" install-name="gettext017"
        add-path="prepend" type="build">v&gt;=0.17</depend>
    </dependencies>

    <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <configure>
<![CDATA[
rm -rf ${BUILD_PREFIX}/objdir
mkdir ${SB_BUILD_PREFIX}/objdir

case "${SB_SYSTYPE}" in
ia64*-hpux*)
  ln -f gnu/gdb/liblinkmap.IA.a gnu/gdb/liblinkmap.a
  ln -f gnu/include/sys/user.h.IA gnu/include/sys/user.h
  ln -f gnu/include/machine/sys/pcb.h.IA gnu/include/machine/sys/pcb.h
  ln -f gnu/include/machine/sys/param.h.IA gnu/include/machine/sys/param.h

  (cd ${SB_BUILD_PREFIX}/objdir
   CC="cc -D_LOAD_MODULE_DESC_EXT +noobjdebug +DD64" \
   RTC_CC32="cc -D_LOAD_MODULE_DESC_EXT +noobjdebug" \
   ${SB_BUILD_PREFIX}/gnu/configure --enable-nls \
   --with-included-gettext --enable-tui --enable-gdbtk=no \
   --with-x=no --host=$(systype) --prefix=${SB_INSTALL_PREFIX}) ;;
*)
  case "${SB_SYSTYPE}" in
  *-hpux11.31)
    ln -f gnu/include/sys/user.h.PA gnu/include/sys/user.h
    _arch=hppa2.0 _osrev=11.31 ;;
  *-hpux11.23)
    _arch=hppa2.0 _osrev=11.23 ;;
  *-hpux11.11)
    _arch=hppa1.1 _osrev=11.11 ;;
  *-hpux11.00)
    _arch=hppa1.1 _osrev=11.00 ;;
  esac

  ln -f gnu/gdb/liblinkmap.PA.a gnu/gdb/liblinkmap.a
  ln -f gnu/include/machine/sys/pcb.h.PA gnu/include/machine/sys/pcb.h
  ln -f gnu/include/machine/sys/pcb.h.PA gnu/include/machine/pcb.h

  (cd ${SB_BUILD_PREFIX}/objdir
   (mkdir pa32 && cd pa32
    CC="cc -D_LOAD_MODULE_DESC_EXT +noobjdebug" \
    ${SB_BUILD_PREFIX}/gnu/configure --enable-nls \
    --with-included-gettext --enable-tui --enable-gdbtk=no \
    --with-x=no --host=${_arch}-hp-hpux${_osrev} \
    --prefix=${SB_INSTALL_PREFIX})

   (mkdir pa64 && cd pa64
    CC="cc -D_LOAD_MODULE_DESC_EXT +noobjdebug" \
    ${SB_BUILD_PREFIX}/gnu/configure --enable-nls \
    --with-included-gettext --enable-tui --enable-gdbtk=no \
    --with-x=no --host=hppa2.0w-hp-hpux${_osrev} \
    --prefix=${SB_INSTALL_PREFIX})) ;;
esac

# rebuild info files
(rm -f gnu/gdb/doc/*.info*) 2>/dev/null || :
]]>
    </configure>

    <build>
<![CDATA[
export BLDENV="" GDB_YACC=/usr/bin/yacc

case "${SB_SYSTYPE}" in
ia64*)
  gmake -C ${SB_BUILD_PREFIX}/objdir all-gdb
  gmake -C ${SB_BUILD_PREFIX}/objdir/gdb info ;;
*)
  gmake -C ${SB_BUILD_PREFIX}/objdir/pa32 all-gdb
  gmake -C ${SB_BUILD_PREFIX}/objdir/pa64 all-gdb
  gmake -C ${SB_BUILD_PREFIX}/objdir/pa32/gdb info ;;
esac
]]>
    </build>

    <install>
<![CDATA[
(cd ${SB_BUILD_PREFIX}/objdir
 ${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${SB_INSTALL_PREFIX}/bin \
 ${SB_INSTALL_PREFIX}/man/man1

 case "${SB_SYSTYPE}" in
 ia64*-hpux*)
   ${SB_PATH_INSTALL} -m 755 -o root -g 0 gdb/gdb \
   ${SB_INSTALL_PREFIX}/bin
   gmake -C gdb/doc install-info ;;
 *)
   ${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
   ${SB_INSTALL_PREFIX}/bin/pa20_64
   ${SB_PATH_INSTALL} -m 755 -o root -g 0 pa32/gdb/gdb \
   ${SB_INSTALL_PREFIX}/bin
   ${SB_PATH_INSTALL} -m 755 -o root -g 0 pa64/gdb/gdb \
   ${SB_INSTALL_PREFIX}/bin/pa20_64
   ln -s pa20_64/gdb ${SB_INSTALL_PREFIX}/bin/gdb64
   gmake -C pa32/gdb/doc install-info ;;
 esac)

${SB_PATH_INSTALL} -m 644 -o root -g 0 gnu/gdb/gdb.1 \
${SB_INSTALL_PREFIX}/man/man1

(cd ${SB_BUILD_PREFIX}/gnu
 ${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/texinfo
 ${SB_PATH_INSTALL} -m 644 -o root -g 0 gdb/doc/annotate.texi \
 gdb/doc/gdb.texinfo gdb/doc/gdbint.texinfo \
 gdb/doc/hpconfig.texinfo gdb/doc/stabs.texinfo \
 gdb/doc/tui.texinfo gdb/doc/xdb_trans.texinfo \
 gdb/mi/gdbmi.texinfo readline/doc/rluser.texinfo \
 readline/doc/inc-hist.texinfo ${_docdir}/texinfo)

(cd ${SB_BUILD_PREFIX}/objdir
 case "${SB_SYSTYPE}" in
 ia64*)
   ${SB_PATH_INSTALL} -m 644 -o root -g 0 gdb/doc/gdb-cfg.texi \
   gdb/doc/GDBvn.texi ${_docdir}/texinfo ;;
 *)
   ${SB_PATH_INSTALL} -m 644 -o root -g 0 pa32/gdb/doc/gdb-cfg.texi \
   pa32/gdb/doc/GDBvn.texi ${_docdir}/texinfo ;;
 esac)
]]>
    </install>

    <licenses>
      <license path="gpl-2.license"/>
    </licenses>

    <notes>
      <change from="6.0" to="6.1">
        <items name="What Is New in This Version">
          <item><para>2.1 Support for Memory Debugging Feature on
Applications Using libmallocng Library for Heap Allocation
Management</para>
          <para>With this feature, you can perform memory
debugging while using libmallocng library instead of libc library for
heap management. This enables you to identify potential heap usage
errors which might surface only when using libmallocng library for
heap management.</para>
          <para>Note: Arena information cannot be obtained if the
application uses libmallocng. If you are using LD_PRELOAD to load
libmallocng, then LD_PRELOAD must be modified to load librtc library
ahead of libmallocng library before memory debugging as shown
below:</para>
          <unorderedlist>
            <item><para>For 64-bit executable <command>export
LD_PRELOAD=/opt/langtools/lib/hpux64/librtc.so:/usr/lib/hpux64/libmallocng.so</command></para></item>
            <item><para>For 32-bit executable <command>export
LD_PRELOAD=/opt/langtools/lib/hpux32/librtc.so:/usr/lib/hpux32/libmallocng.so</command></para></item>
          </unorderedlist>
          <para>This feature is available only on HP Integrity
systems.</para></item>
          <item><para>2.2 Improved HP WDB Help Support</para>
          <para>This improved help command provides syntax and
relevant description for all WDB commands.</para></item>
          <item><para>2.3 Improved Disassembly Output to Print
Explicit Register Names</para>
          <para>The improved disassembly output of HP WDB now
prints explicit register names. This feature is available only on HP
Integrity systems.</para></item>
          <item><para>2.4 Improvements in Batch Mode and +check=malloc
Mode Support</para>
          <para>Batch mode and +check=malloc mode of memory
debugging have been enhanced internally to collect and report the data
without invoking gdb.</para></item>
        </items>

        <items name="Defect Fixes in HP WDB 6.1">
          <item><para>GDB fails to call proper function through
command line call when the program contains overloaded
functions.</para></item>
          <item><para>WDB print command fails to print the method and
virtual function of the class. Note: You can use ptype command to
print overloaded methods.</para></item>
          <item><para>WDB cannot resolve method of the class in
command line call when the library containing the class is
optimized.</para></item>
          <item><para>WDB cannot print stack frames past signal or
interrupted frame using backtrace command.</para></item>
          <item><para>GDB gives syntax error, or not hardware message
when setting watchpoints.</para></item>
          <item><para>The memory debugging commands, such as info
heap, info leak, and info corruption, sometimes fail to print the heap
or leaks information in GDB's interactive mode, even when heap check
or leaks detection is enabled.</para></item>
          <item><para>WDB fails to watch an address in shared
libraries.</para></item>
          <item><para>WDB does not support the Copy on Write (COW)
feature or debugging shared library without mapping private in attach
mode.</para></item>
          <item><para>WDB watchpoint on a memory location fails when
an address is given.</para></item>
          <item><para>WDB shows an unnecessary COW warning message
when the COW patches are installed.</para></item>
          <item><para>The application crashes when a function is
called through a command line call.</para></item>
          <item><para>WDB does not display the signal obtained when
stepping instructions.</para></item>
          <item><para>WDB crashes with the SIGSEGV signal when
deferred watchpoints are enabled.</para></item>
          <item><para>The set thread-check on command enables all
thread debugging features and does not provide an option to turn on
individual thread debugging features.</para></item>
          <item><para>GDB's background execution crashes while
restoring a session of the program from the WDB GUI.</para></item>
          <item><para>If there is a mismatch between libraries used by
the application in the system where the core file is produced and the
system where the core file is debugged, GDB sometimes crashes while
performing stack unwinding from core files with such mismatched
libraries.</para></item>
          <item><para>GDB sometimes hangs when the info heap command
is invoked while memory debugging multithreaded
applications.</para></item>
          <item><para>GDB sometimes hangs when the info leak command
is invoked while memory debugging multithreaded
applications.</para></item>
          <item><para>Batch mode memory debugging shows spurious
corruption data.</para></item>
          <item><para>GDB does not deliver asynchronous signals
correctly after a previous sigwait() family system call returned an
error.</para></item>
          <item><para>Applications built with +check=malloc compiler
option hangs if there is no GDB installed on the system, or if the
version of the GDB installed is different from the version of
thelibrtc library used by the +check=malloc built
application.</para></item>
          <item><para>Bounds check is not performed during memory
debugging for heap blocks being reallocated with
realloc().</para></item>
          <item><para>If the bounds check is changed across a
realloc() call while doing interactive memory debugging, the librtc
library running as part of the application crashes.</para></item>
          <item><para>An application built with +check=malloc compiler
option sometimes crashes in the function
wait_for_gdb_here().</para></item>
          <item><para>The heap or leak report from memory debugging
report does not show the hexadecimal address against the function
names for allocating stack traces.</para></item>
          <item><para>The find command to search for a pattern in the
application address space or core file sometimes reports spurious
results.</para></item>
          <item><para>GDB does not show debug information for some
object files which have hidden symbols.</para></item>
          <item><para>While running batch mode memory debugging, some
applications crash if they use atfork handlers.</para></item>
          <item><para>GDB does not handle junk arguments followed by
info thread, info mutex, info condvar, or info rwlock
commands.</para></item>
          <item><para>Batch mode memory debugging crashes with release
version of librtc.</para></item>
          <item><para>The info corruption command output from core
files is incorrect.</para></item>
          <item><para>GDB goes into an endless loop when thread apply
commands are applied on non-existent threads.</para></item>
          <item><para>Invoking info leak command during interactive
memory debugging sometimes crashes for applications built with
+check=malloc compiler option.</para></item>
          <item><para>The details section from heap or leak report is
missing for applications built with +check=malloc compiler
option.</para></item>
          <item><para>GDB does not handle reading and writing across
the Register Stack Engine (RSE) section on Itanium
systems.</para></item>
          <item><para>When the print object is set to on in GDB, the
print command incorrectly demonstrates the polymorphic property of C++
class object.</para></item>
          <item><para>The set logging overwrite command dumps core on
Itanium systems even when the binary is not loaded.</para></item>
          <item><para>While using WDB-GUI, any input typed on program
console window does not get echoed on it, even though WDB processes
this input correctly.</para></item>
          <item><para>For certain large applications, GDB may throw
virtual memory exhaustion error while setting the breakpoint at some
line number.</para></item>
          <item><para>In WDB-GUI when the program console window
opens, whatever is input by typing is echoed. Although the input is
taken by WDB and the further processing is fine.</para></item>
          <item><para>WDB does not have an option to print the hex
address for leaks.</para></item>
          <item><para>GDB is not always able to print the value of the
data member of derived class object correctly when polymorphism and
type-casting are involved.</para></item>
          <item><para>GDB is not able to print the value of the member
variable of a class or structure when inside one of the member
function if program contains a global variable with the same name as
that of member variable.</para></item>
          <item><para>When print object is set to on for C++ programs,
the ptype command on nested structures or class objects often throws
the error Attempt to take contents of a non-pointer
value.</para></item>
          <item><para>GDB hangs when trying to access the member of
optimized-out structure variable.</para></item>
          <item><para>WDB crashes if the show command is input twice
consecutively.</para></item>
          <item><para>When print object is set to on, GDB is unable to
exhibit the polymorphic behavior for C++ programs containing nested
classes.</para></item>
          <item><para>The disassembly output of HP WDB prints more
intuitive names for some registers.</para></item>
          <item><para>When the print object is set to on, WDB is
unable to print the content of structure element of another structure
and throws the following error: Error accessing memory address
0xfffffffffffffff3: Bad address</para></item>
        </items>

        <items name="4. Known Problems and Workarounds">
          <item><para>The find command does not search the entire
memory. The HP WDB 6.1 find command does not search the pattern in the
entire memory address range starting from 0x0 to 0xff..ff. It displays
the following warning message:</para>
          <screen>
(gdb) find 010,0xffffffffffffff,"hello"
warning: Unable to access target memory at 0x8, halting search.
Pattern not found.
          </screen></item>
          <item><para>Performance Degradation in Memory Debugging. For
64-bit applications on HP-UX 11i v2 and later on Integrity systems,
heap check performance degrades when the string option is set in the
set heap-check command: <command>set heap-check string
oni</command></para></item>
          <item><para>Incorrect usage of . and -&gt; while printing the
values for C++ applications. WDB allows users to interchangeably use
"." and "-&gt;" while printing values for C++ applications. WDB
incorrectly allows users to use "." with a pointer variable and "-&gt;"
with a reference variable while printing the value for C++
applications.</para></item>
          <item><para>Mismatch Between dld.so Libraries Causes Issues.
A mismatch in the dld.so libraries available in the core file and in
the system might cause issues in unwinding beyond some frames within
the libc.so library. The workaround is to use the packcore command to
obtain the core file and the involved load modules into the system on
which the debugging occurs.</para></item>
          <item><para>Debugging an attached process that is not
compiled for debugging may generate warnings. On attaching the
debugger to a program that is not compiled for debugging, the process
may stop in a system call and the following warning message about the
various registers is displayed:</para>
          <screen>
No data warning: reading 'r3' register: No data warning: reading 'r4' register: No data
warning: reading 'r5' register: No data warning: reading 'r6' register: No data warning
          </screen>
          <para>This warning occurs when executing the step command,
the backtrace command, or when attempting to view the register
information. To avoid this warning message, use the finish command to
execute the process until the system call returns. This warning
message is generated when the process stops at a system call, and the
registers cannot be read by the debugger. When the debugger calls the
routine ttrace, it returns this warning.</para></item>
          <item><para>Error attaching WDB to a process that is traced
by tools using ttrace. HP WDB cannot attach to a process that is
traced by tools that use ttrace, such as Caliper, adb, and tusc. The
debugger displays the following error message while attempting to
attach to such a process: <command>Attaching to process &lt;pid&gt;
failed.</command></para>
          <para>Hint: Check if this process is already being traced
by another gdb or other ttrace tools like caliper and tusc.</para>
          <para>Hint: Check whether program is on an NFS-mounted
file-system. If so,you will need to mount the file system with the
"nointr" option with mount(1) or make a local copy of the program to
resolve this problem.</para></item>
        </items>

        <items name="5 Known Issues">
          <item><para>5.1 Batch Mode Thread Debugging</para>
          <unorderedlist>
            <item><para>During the execution of advanced thread
checking for applications that fork, in the interactive mode, the
following message appears if the GDB follows the child:
<command>Pthread analysis file missing!</command></para>
            <para>This error message appears because the
thread-error information for the forked process is not available.
However, if the forked process exec() s another binary, the
thread-error information is available for the exec-ed
binary.</para></item>
            <item><para>In both interactive and batch modes, if the
applications exceed their thread stack utilization, the following
error message appears: <command>Error accessing memory
address!</command> This occurs when GDB attempts a command line call
on an already overflowing thread stack.</para></item>
          </unorderedlist></item>
          <item><para>5.2 Mixed Mode Debugging</para>
          <para>Following are known issues in mixed mode
debugging:</para>
          <unorderedlist>
            <item><para>Listing of registers currently in use for
PA-RISC 32-bit shared library frames causes the unswizzled 32-bit
values to be displayed.</para></item>
            <item><para>Clicking on the registers tab for a PA-RISC
frame in the WDB-GUI results in incorrect register information being
displayed. Alternatively, execute the info reg command at the gdb
prompt in the Commands tab.</para></item>
            <item><para>For a signal handler invoked while executing
in a PA-RISC routine, when the info frame command is run on the signal
handler called frame, the saved libaries32.so IP address is displayed,
rather than the PCOQH value of the PA-RISC routine.</para></item>
            <item><para>Printing the value of a floating point
register using the print command does not work. The info reg command
must be used. Note: If an application crashes in the aries signal
handler, the debug-aries option is turned on by default and only the
libaries frames are displayed.</para></item>
          </unorderedlist></item>
        </items>

        <items name="6 Known Limitations">
          <item><para>This section describes known limitations in this
release of HP WDB.</para></item>
          <item><para>6.1 Limitations for C++</para>
          <unorderedlist>
            <item><para>WDB is unable to hit breakpoints placed on
constructors in case of multiple inheritance.</para></item>
            <item><para>WDB is unable to make command-line calls to
string methods when there are no calls to these methods from the
application.</para></item>
            <item><para>In Fortran programs containing nested
procedures, WDB may not print values of local variables for outer or
parent procedure inside its internal subroutine.</para></item>
          </unorderedlist></item>
          <item><para>6.2 Limitations for Batch Mode Heap
Debugging</para>
          <para>On PA-RISC systems, the batch mode memory
debugging might fail if the application uses atfork handlers. This
issue is resolved in HP WDB 6.1 on Itanium systems.</para></item>
          <item><para>6.3 Batch Mode Thread Debugging</para>
          <unorderedlist>
            <item><para>The feature does not obtain the thread-error
information in batch mode for forked process in a multiprocessing
application. However, if the librtc.sl library is pre-loaded, the
debugger obtains the thread-error information in the batch mode for
exec-ed application.</para></item>
            <item><para>HP WDB cannot execute both batch mode thread
check and batch mode heap check together. If the rtcconfig file has
both entries, then batch heap check overrides the batch thread
check.</para></item>
          </unorderedlist></item>
          <item><para>6.4 Mixed Mode Debugging</para>
          <para>The following are not supported for mixed mode
debugging:</para>
          <unorderedlist>
            <item><para>Placing a breakpoint on a PA-RISC
library.</para></item>
            <item><para>Listing the arguments (using the info args
command) for a selected PA-RISC frame during corefile debugging.
Alternatively, the disassembly instructions or runtime conventions can
be examined to identify the locations of the arguments and the values
at these locations can be displayed using the print or x
command.</para></item>
            <item><para>Printing the local variables of the selected
frame (using the info locals command) for a selected PA-RISC frame
during corefile debugging. Alternatively, the disassembly instructions
can be examined to identify the locations of the arguments and the
values at these locations of the local variables can be displayed
using the print or x command.</para></item>
            <item><para>Executing the backtrace_other_thread command
for a frame belonging to a PA-RISC library.</para></item>
            <item><para>Executing the maint info unwind command for
PA addresses.</para></item>
            <item><para>Printing the description of the type of
expression or data type (using the ptype command) on a PA-RISC
symbol.</para></item>
          </unorderedlist></item>
          <item><para>6.5 Debugger Support for Optimized
Code</para>
          <para>On HP 9000 systems for 32-bit and 64-bit
applications, printing of local variable values may be inaccurate for
+O1 and higher optimizations.</para>
          <para>Note: HP WDB 6.1 and later versions contains limited
debugging support for optimized code of 32-bit applications on HP 9000
and even more limited support for debugging optimized code (DOC) for
64-bit applications on HP 9000 systems. Additionally, the debugging
support becomes limited as higher levels of compiler optimization are
used.</para></item>
        </items>
      </change>
    </notes>
  </program>
</programs>
