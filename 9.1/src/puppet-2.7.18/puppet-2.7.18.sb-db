<?xml version="1.0"?>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
<programs>
  <program name="puppet" version="2.7.18" revision="1"
  systype="*-aix*|*-hpux*|*-linux*|*-solaris*">
    <install-name>puppet27</install-name>

    <dependencies>
      <depend program="docutils" install-name="docutils08"
        module="2.6.7" add-path="prepend"
        type="build">v&gt;=0.8.1</depend>
      <depend program="python" install-name="python26"
        add-path="prepend" type="build">v&gt;=2.6.7</depend>
      <depend program="ruby" var="RUBY"
        install-name="ruby18">v&gt;=1.8.7</depend>
    </dependencies>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_localstatedir="/var${SB_INSTALL_PREFIX}"
_sysconfdir="/etc${SB_INSTALL_PREFIX}"
]]>
    </script-header>

    <module name="default">
      <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

      <sources>
        <source checksum="210725704692a0ca7b8ffc312471796e"
          checksum-type="md5" size="1919964"
          path="src/puppet-2.7.18.tar.gz"/>
        <patch checksum="9aee51bf1915cea636a2b55e2ecbc5d6"
          checksum-type="md5" size="3505"
          path="src/puppet-2.7.18.tww.patch"/>
      </sources>

      <dependencies replace="0">
        <depend program="puppet" module="facter">v==2.7.18</depend>
      </dependencies>

      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_localstatedir="/var${SB_INSTALL_PREFIX}"
_sysconfdir="/etc${SB_INSTALL_PREFIX}"
]]>
      </script-header>

      <build>
<![CDATA[
:
]]>
      </build>

      <install>
<![CDATA[
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${SB_INSTALL_PREFIX}/sbin

# Install the files
RUBYLIB="${SB_INSTALL_PREFIX}/lib" \
${SB_VAR_RUBY}/bin/ruby ./install.rb \
--bindir="${SB_INSTALL_PREFIX}/bin" \
--sbindir="${SB_INSTALL_PREFIX}/sbin" \
--sitelibdir="${SB_INSTALL_PREFIX}/lib" \
--mandir="${SB_INSTALL_PREFIX}/man" \
--configdir="${_sysconfdir}" \
--tests

# Ensure that the "binaries" can find the "libs"
${SB_PATH_SED} -i -e "\
2 {
i\

i\
\$:.push(\"${SB_INSTALL_PREFIX}/lib\")
i\

}" ${SB_INSTALL_PREFIX}/bin/filebucket ${SB_INSTALL_PREFIX}/bin/pi \
${SB_INSTALL_PREFIX}/bin/pup* ${SB_INSTALL_PREFIX}/sbin/pup* \
${SB_INSTALL_PREFIX}/bin/ralsh

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_localstatedir}/log ${_localstatedir}/run \
${_localstatedir}/state

# Install examples, etc.
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${SB_INSTALL_PREFIX}/doc
${SB_PATH_FIND} examples ext | cpio -pduv ${SB_INSTALL_PREFIX}/doc
${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}/doc

# Create etc and var dirs and touch conf files
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_localstatedir} \
${_sysconfdir} ${_sysconfdir}/manifests ${_sysconfdir}/options \
${_sysconfdir}/ssl ${_localstatedir}/lib ${_localstatedir}/yaml \
${_localstatedir}/state ${_localstatedir}/log ${_localstatedir}/run \
${_localstatedir}/reports ${_localstatedir}/facts \
${_localstatedir}/bucket ${_localstatedir}/rrd \
${_localstatedir}/server_data ${_localstatedir}/rrd \
${_sysconfdir}/ssl/certificate_requests \
${_sysconfdir}/ssl/certs \
${_sysconfdir}/ssl/ca \
${_sysconfdir}/ssl/ca/requests \
${_sysconfdir}/ssl/public_keys

${SB_PATH_INSTALL} -m 750 -o root -g 0 -d \
${_sysconfdir}/ssl/ca/private \
${_sysconfdir}/ssl/ca/signed \
${_sysconfdir}/ssl/private \
${_sysconfdir}/ssl/private_keys

# Change default sysconfdir, localstatedir
${SB_PATH_SED} -i -e "\
s!/etc/puppet!${_sysconfdir}!;s!/var/lib/puppet!${_localstatedir}!;\
s!/var/run/puppet!${_localstatedir}/run!;\
s|/usr/share/puppet|${_datadir}|;" \
${SB_INSTALL_PREFIX}/lib/puppet/defaults.rb \
${SB_INSTALL_PREFIX}/lib/puppet/reference/configuration.rb \
${SB_INSTALL_PREFIX}/lib/puppet/util/run_mode.rb \
${SB_INSTALL_PREFIX}/doc/examples/etc/puppet/fileserver.conf \
${SB_INSTALL_PREFIX}/doc/ext/nagios/check_puppet.rb \
${SB_INSTALL_PREFIX}/doc/ext/puppet-load.rb \
${SB_INSTALL_PREFIX}/doc/ext/regexp_nodes/regexp_nodes.rb \
${SB_INSTALL_PREFIX}/doc/ext/puppetlisten/puppetlisten.rb \
${SB_INSTALL_PREFIX}/doc/ext/puppetlisten/puppetrun.rb \
${SB_INSTALL_PREFIX}/doc/ext/rack/manifest.pp \
${SB_INSTALL_PREFIX}/doc/ext/rack/files/apache2.conf \
${SB_INSTALL_PREFIX}/lib/puppet/type/file/source.rb \
${SB_INSTALL_PREFIX}/lib/puppet/face/module/upgrade.rb \
${SB_INSTALL_PREFIX}/lib/puppet/face/module/changes.rb \
${SB_INSTALL_PREFIX}/lib/puppet/face/module/uninstall.rb \
${SB_INSTALL_PREFIX}/lib/puppet/face/module/list.rb \
${SB_INSTALL_PREFIX}/lib/puppet/face/module/install.rb \
${SB_INSTALL_PREFIX}/lib/puppet/face/parser.rb \
${SB_INSTALL_PREFIX}/lib/puppet/parser/functions/extlookup.rb \
${SB_INSTALL_PREFIX}/lib/puppet/application/apply.rb \
${SB_INSTALL_PREFIX}/lib/puppet/application/doc.rb \
${SB_INSTALL_PREFIX}/lib/puppet/application/device.rb

for _file in autosign.conf fileserver.conf manifests/site.pp \
namespaceauth.conf options/puppetd options/puppetmasterd \
puppet.conf tagmail.conf device.conf; do
  ${SB_PATH_INSTALL} -m 644 -o root -g 0 /dev/null \
  ${_sysconfdir}/${_file}
done
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${SB_INSTALL_PREFIX} ${_sysconfdir} ${_localstatedir}
]]>
      </uninstall>
    </module>

    <module name="facter">
      <build-name>facter-1.6.10</build-name>

      <sources>
        <source checksum="ed38257fb8135cd2a0ef8d4857e14621"
          checksum-type="md5" size="133281"
          path="src/facter-1.6.10.tar.gz"/>
        <patch checksum="e6b9a519a59bf2f6b4e49d6c7e88f52f"
          checksum-type="md5" size="908"
          path="src/facter-1.6.10.tww.patch"/>
      </sources>

      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_localstatedir="/var${SB_INSTALL_PREFIX}"
_sysconfdir="/etc${SB_INSTALL_PREFIX}"
]]>
      </script-header>

      <build>
<![CDATA[
:
]]>
      </build>

      <install>
<![CDATA[
${SB_PATH_INSTALL} -d -m 755 -o root -g 0 ${SB_INSTALL_PREFIX} \
${SB_INSTALL_PREFIX}/lib ${SB_INSTALL_PREFIX}/bin \
${SB_INSTALL_PREFIX}/lib/facter

RUBYLIB="${SB_INSTALL_PREFIX}/lib" \
${SB_VAR_RUBY}/bin/ruby ./install.rb \
--bindir="${SB_INSTALL_PREFIX}/bin" \
--sbindir="${SB_INSTALL_PREFIX}/sbin" \
--sitelibdir="${SB_INSTALL_PREFIX}/lib" \
--mandir="${SB_INSTALL_PREFIX}/man"

${SB_PATH_SED} -i -e "\
1 s!/usr/bin/env ruby!${SB_VAR_RUBY}/bin/ruby!
2 {
i\

i\
\$:.push(\"${SB_INSTALL_PREFIX}/lib\")
i\

}" ${SB_INSTALL_PREFIX}/bin/facter
]]>
      </install>

      <uninstall>
<![CDATA[
rm ${SB_INSTALL_PREFIX}/bin/facter ${SB_INSTALL_PREFIX}/lib/facter.rb
rm -rf ${SB_INSTALL_PREFIX}/lib/facter
]]>
      </uninstall>
    </module>

    <licenses>
      <license path="apache-2.0.license"/>
    </licenses>

    <notes>
      <change from="2.7.17" to="2.7.18">
        <item><para>Reject directory traversal in store report
processor</para></item>
        <item><para>Tighten permissions on classfile, resourcefile,
lastrunfile, and lastrunreport.</para></item>
        <item><para>Use "inspect" when listing
certificates</para></item>
        <item><para>Don't allow the creation of SSL objects with
invalid certnames</para></item>
        <item><para>Validate CSR CN and provided certname before
signing</para></item>
        <item><para>Add specs for selector terminuses of
file_{content,metadata}</para></item>
        <item><para>Fix whitespace inside parentheses</para></item>
        <item><para>Use head method to determine if file is in file
bucket</para></item>
        <item><para>Always use the local file_bucket on
master</para></item>
        <item><para>Fail more gracefully when finding module files if
no file is specified</para></item>
        <item><para>Reject file requests containing ..</para></item>
        <item><para>Add Selector terminus for
file_content/file_metadata</para></item>
        <item><para>Deprecate IP-based authentication</para></item>
      </change>

      <change from="2.7.16" to="2.7.17">
        <item><para>(maint) Add symlink stub to gentoo service
provider spec</para></item>
        <item><para>Add comment to upstart provider explaining
exclusion of 'wait-for-state'</para></item>
        <item><para>Upstart code cleanup, init provider
improvement</para></item>
        <item><para>Add spec test for
network-interface-security</para></item>
        <item><para>Add basic service resource test to upstart
acceptance</para></item>
        <item><para>Handle network-interface-security in
upstart</para></item>
        <item><para>Add exclude list to upstart provider</para></item>
        <item><para>(#15027, #15028, #15029) Fix upstart version
parsing</para></item>
        <item><para>(maint) Add --test to puppet run</para></item>
      </change>

      <change from="2.7.14" to="2.7.16">
        <item><para>Update facter dep to reflect epoch 1</para></item>
        <item><para>(#8858) Explicitly set SSL peer verification
mode.</para></item>
        <item><para>Test SSL setup code, not our stubbing of
it.</para></item>
        <item><para>(maint) Add mailmap to identify
contributors</para></item>
        <item><para>(#14723) Fix http report description</para></item>
        <item><para>Remove EL-related test changes from this
commit.</para></item>
        <item><para>Revert changes to symbolic_modes.rb -- this test
should indeed be pending (it should eventually work on
Windows).</para></item>
        <item><para>Update acceptance tests to use confine instead of
skip_test loops</para></item>
        <item><para>(#14761) Add boot, reboot to excludes list for
redhat provider</para></item>
        <item><para>(maint) Disable upstart spec test on
windows</para></item>
        <item><para>(#14615) Final stub fixes for the
tests.</para></item>
        <item><para>(#14615) Fix provider spec tests to work on non
gentoo systems</para></item>
        <item><para>maint: Make it easier to test the service
provider</para></item>
        <item><para>(Maint) Close filehandles after read in
upstart</para></item>
        <item><para>(#14615) Exclude helperscripts in gentoo service
provider</para></item>
        <item><para>Apply commit from master that varies ports during
tests</para></item>
        <item><para>(#14297) Don't remove tty1 or rsyslog during
upstart acceptance</para></item>
        <item><para>(#14297) Define agent in upstart acceptance
test</para></item>
        <item><para>(#14297) Update upstart provider acceptance
tests</para></item>
        <item><para>(#14297) Clean up upstart provider and
tests</para></item>
        <item><para>(#14343) Test cases for more forms of variable
lookup</para></item>
        <item><para>(#14297) Add acceptance test for upstart
provider</para></item>
        <item><para>(#14297) Update spec tests for upstart
provider</para></item>
        <item><para>(#14297) Handle upstart services
better</para></item>
        <item><para>(#14343) Lookup in correct inherited
scope</para></item>
        <item><para>(Maint) Added test for fully qualified
variable</para></item>
        <item><para>(#8174) Allow defines to reference
topscope</para></item>
        <item><para>Evaluate node classes either in top or node
scope</para></item>
        <item><para>Removed topscope being overridden by
node</para></item>
        <item><para>Use internal domain name for module tool
tests</para></item>
        <item><para>Use absolute_path in module install
spec</para></item>
        <item><para>(Maint) Color console output when the win32console
gem is installed</para></item>
        <item><para>(#14424) Expand path of the target
directory</para></item>
        <item><para>Fix unit test failure in fileserver due to
modules</para></item>
        <item><para>Maint: De-genericize Puppet Forge references in
module face</para></item>
        <item><para>Revert "maint: use relative paths to
fixtures."</para></item>
        <item><para>(#14440) Hack to allow help faces to be used as
API</para></item>
        <item><para>Fix broken man page rake task</para></item>
        <item><para>(#10146) `-` is not legal in variable
names.</para></item>
        <item><para>maint: use relative paths to
fixtures.</para></item>
        <item><para>Significantly improve compilation performance when
using modules</para></item>
        <item><para>Fix a stub of ansicolor that I
missed</para></item>
        <item><para>Add Puppet::Util::Platform to abstract platform
checks</para></item>
        <item><para>Don't use features to check for color in
logging</para></item>
        <item><para>Remove a bad test that can lead to random
hangs...</para></item>
        <item><para>(#14296) Improve template function error
message.</para></item>
        <item><para>(#14288) gem provider should tolerate bad
lines.</para></item>
        <item><para>Revert "Fix incorrect argument handling for expire
in NodeExpirer"</para></item>
        <item><para>Fix #14123 for Windows</para></item>
        <item><para>Fix incorrect argument handling for expire in
NodeExpirer</para></item>
        <item><para>Fix filebucket specs on Windows</para></item>
        <item><para>(#8778) Make '' == undef commutative in the
DSL</para></item>
        <item><para>Revert "(#11004) Fix regex for pkg provider line
matching"</para></item>
        <item><para>(#13651) Use magenta, not purple in
Facter::Util::Colors</para></item>
        <item><para>(#11004) Fix regex for pkg provider line
matching</para></item>
        <item><para>(#13956) Fix failing spec tests</para></item>
        <item><para>(maint) Fix destinations_spec failure on
windows</para></item>
        <item><para>Just change Puppet settings in tests, rather than
stubbing.</para></item>
        <item><para>(#11004) Support Solaris 11 output in pkg package
provider</para></item>
        <item><para>maint: Fix pkg_spec test</para></item>
        <item><para>(#14173) Enforce that filebucket paths must be
absolute</para></item>
        <item><para>(#3452) Autorequire user for cron</para></item>
        <item><para>(#14127) Add integration tests for
ssh_authorized_key</para></item>
        <item><para>maint: refactor integration specs for
ssh_authorized_key</para></item>
        <item><para>(#14127) ssh_authorized_keys grammer fails on
blank lines.</para></item>
        <item><para>(#14123) Puppet shouldn't explode if PATH contains
~nonexistent_user</para></item>
        <item><para>(#13645) Add test cases to
tagmail_spec</para></item>
        <item><para>(#13645) Do not open a smtp connection if nothing
to report</para></item>
        <item><para>(#12392): Colorize console output on
Windows</para></item>
      </change>

      <change from="2.7.13" to="2.7.14">
        <items name="Features">
          <item><para>Puppet Module Tool Face - the module tool has seen
a host of improvements including dependency resolution, environment
handling, and searching the forge. There are more details available at
<ulink url="http://docs.puppetlabs.com/puppet/2.7/reference/modules_installing.html">http://docs.puppetlabs.com/puppet/2.7/reference/modules_installing.html</ulink></para></item>
        </items>

        <items name="Bug Fixes">
          <item><para>(#13682) Rename Puppet::Module::Tool to
Puppet::ModuleTool</para>
          <para>Without this patch, Puppet will monkey patch the
existing implementation of the puppet-module Gem if it is used.  This
is bad because the two implementations are all jumbled up inside of
one another and behavior may become unpredictable.  Warnings are also
displayed directly to the end user in the form of redefined
constants.</para>
          <para>This patch fixes the problem by renaming
Puppet::Module::Tool inside of Puppet to Puppet::ModuleTool  This
fixes the problem because Puppet will no longer monkey-patch the
Puppet::Module::Tool module inside of the puppet-module Gem.</para>
          <para>This patch also has the added benefit of making the
Module's name match up with the CamelCase filepath
(puppet/module_tool/ =&gt; Puppet::ModuleTool)  As a result, no file
moves are necessary.</para></item>
          <item><para>(#13682) Fix acceptance test
failures</para>
          <para>On Lucid, /usr/share/puppet may not exist.  The module
upgrade tests all make the assumption that this parent directory
exists.  This causes false positive failures when running systest
against a Lucid system.</para>
          <para>This patch modifies the setup code for all of the
tests to ensure the parent directory exists.</para></item>
          <item><para>(maint) Ensure every file has a trailing
newline</para>
          <para>Without this patch some files exist in the tree that
don't have trailing newlines.  This is annoying because perl -pli.bak
-e will automatically add a newline to every file it modifies in
place.  The files that actually have modifications by the global
search and replace need to be separated from the files that only have
newlines added.</para>
          <para>This patch simply adds newlines to everything if they
don't exist on the last line.</para>
          <para>Yes, the PNG's are perfectly fine with a trailing
newline as well.</para></item>
          <item><para>(#14036) Handle upstart better</para>
          <para>Change the upstart provider to better handle the
mix of some services that are upstart controlled and some that are
init script controlled.</para></item>
          <item><para>(#14060) Fix quoting of commands to interpolate
inside the shell.</para>
          <para>The `shell` exec provider was supposed to emulate the
behaviour of 0.25 exec, which was to pass the content through the
default shell to get it executed.</para>
          <para>Unfortunately, it got quoting a bit wrong, and ended
up interpolating variables at the wrong point - it used double quotes
where single quotes were really what was desired.</para>
          <para>In the end we should not be in this position - we
shouldn't be using string execution where we can pass an array
instead.  That avoids any chance that there is more than one round of
shell interpolation entirely.</para>
          <para>As a bonus, this fixes the base exec type to
support specifying the command to run that very way, and making it
good.</para></item>
          <item><para>(#14101) Improve deprecation warning for dynamic
lookup</para>
          <para>The new message will tell the user how to get more
information about what is occuring. More information will be provided
at debug level so that a user can see what the change to the lookup
will be.</para></item>
          <item><para>Better warnings about scoping</para></item>
          <item><para>Make new scoping look through inherited
scopes</para>
          <para>Previous to this commit, Puppet would look through a
given scope hierarchy and give deprecation warnings when a value was
found in either an inherited class scope or included class scope, when
it should only give the warning in the case of the included class
scope. This commit makes the new-scope behavior also examine inherited
scopes, though continuing to ignore included scopes.</para></item>
          <item><para>Implement newlookupvar() to replace dynamic
scope</para>
          <para>lookupvar() is shifted to oldlookupvar() and
newlookupvar() is added. An intermediary lookupvar() function will
query both and if the answer varies then it will throw a deprecation
warning for dynamic scoping. The intermediary and old lookup functions
may be removed at a later date, thus completing the transition. A test
case has been introduced to detect dynamic scoping and the deprecation
warning. Slight modifications to the spec test scoping objects were
made to bring them more in line with the real world. All scope tests
pass. When oldlookupvar is replaced, the deprecated dynamic scoping
test case will fail and all other scope test cases will
pass.</para></item>
          <item><para>Augeas Improvements</para>
          <para>(#11988) Work around Augeas reload bug when changing
save modes</para>
          <para>After saving a file in one save mode and switching
to another, Augeas realise to reload the file when Augeas#load is
called again.  Work around this by explicitly reloading all files we
saved while using the first save mode.</para></item>
          <item><para>(#11988) Don't overwrite symlinks in augeas
provider</para>
          <para>Previously, if not running with `force` set, we would
try to write the file in SAVE_NEWFILE mode to create a
&lt;filename&gt;.augnew file with the changes. We determined whether
there were changes to be made based on that file (and used it to show
a diff). When it came time to actually make the changes, we would
simply move the .augnew file over the file being managed.
Unfortunately, if the file being managed were a symlink, this would
clobber it.</para>
          <para>There was a fallback path in the case of force (or
older versions of augeas not supporting SAVE_NEWFILE) in which we
would make the changes in SAVE_OVERWRITE mode as normal. Now, the
behavior is a combination of the two; we still use SAVE_NEWFILE to
determine whether changes need to be made and to show a diff, but then
remove the .augnew file and always run again in SAVE_OVERWRITE mode to
save the changes. This effectively delegates the behavior of
preserving the file, etc. to augeas, so we don't duplicate effort or
bugs.</para></item>
          <item><para>(#13204) Don't ignore missing PATH.augnew
files</para>
          <para>The original fix for #13204 may have masked other
potential bugs if the PATH.augnew file was missing.  It simply tested
for the file existance and not only when duplicate save events
occurred. This change de-duplicates the list of save events instead,
so if a bug appeared where PATH.augnew was genuinely missing, the
error wouldn't be squashed.</para></item>
          <item><para>(#13204) Workaround duplicate Augeas save
events</para>
          <para>Bug #264 in Augeas causes duplicate save events to
be returned when editing under /boot in newfile mode.  Because we loop
around these events, diffing and unlinking the files, this causes an
ENOENT error when we process the same event twice.</para>
          <para>This commit checks that the file we intend to
operate on exists.</para></item>
          <item><para>(#7592) Remove redundant call to
String#to_s</para>
          <para>Previously, the augeas provider made calls like
the following: @aug.get(key).to_s Since the Augeas#get method returns
a String not an array, the to_s call is redundant. (Note the #match
method does return an array.) The augeas tests were stubbing the #get
method to return an array in some places (and a string in others).
Prior to 1.9.2, ruby will automatically convert ["foo"].to_s to "foo",
so everything worked as expected. However, under 1.9.2, ["foo"].to_s
becomes "[\"foo\"]". These failures weren't noticed earlier, because
our 1.9.2@allFeatures jenkins nodes do not have ruby-augeas installed.
In other words, tests that require Puppet.features.augeas? were never
running in Jenkins. The recent change to improve augeas testing,
removed the dependency on this feature being installed, so these tests
started failing. This commit just removes the redundant call to
String#to_s, and updates the spec tests to match what the Augeas#get
method really returns.</para></item>
          <item><para>Zypper Provider Improvements</para>
          <para>(#8312) Fix zypper provider so ensure =&gt; `latest' now
works</para>
          <para>Previously the regular expression to match the
correct column from 'zypper list-updates' was wrong, it seems to have
been based on the command 'zypper packages' instead. This was caused
ensure =&gt; 'latest' to fail as the provider couldn't adequately figure
out what newer versions were actually availabe. So I've fixed the
regular expression and updated the spec test so that it uses the real
output from zypper list-updates and now references an external spec
file, as apposed to referencing the content inline.</para></item>
          <item><para>Windows Bugfixes</para>
          <para>(#12392) Created Windows eventlog message resource
dll</para>
          <para>This commit adds the ability to build a message
resource dll used to display localized eventlog messages on Windows.
Windows eventlog expects that each log event has a unique id, which
can then be localized in a resource dll, one for each locale. However,
puppet does not yet support this, see #11076. So this commit defines
three puppet event ids corresponding to the three levels of Windows
events that we support (info, warn, and error). In order to build the
dll, you need the Windows SDK installed that contains the mc, rc, and
link utilities.</para></item>
          <item><para>(Maint) Don't assume eventlog gem is installed on
Windows</para>
          <para>Previously, the test would fail when run on a
Windows box that didn't have the eventlog gem installed. Since the
Windows agent should be able to run without the gem installed, and
fall back to writing to a log file, this commit changes the test to
only run when the gem is installed. There is already a test that
verifies that we fall back if the eventlog feature is not
available.</para></item>
        </items>
      </change>

      <change from="2.7.12" to="2.7.13">
        <item><para>This is a security release in the 2.7.x
branch.</para></item>
        <items name="Security Fixes">
          <item><para>CVE-2012-1906 (High) - appdmg and pkgdmg
providers write packages to insecure location</para>
          <para><ulink url="http://puppetlabs.com/security/cve/cve-2012-1906">http://puppetlabs.com/security/cve/cve-2012-1906</ulink>(#13260)</para>
          <para>If a remote source is given for a package, the package
is downloaded to a predictable filename in /tmp. It is possible to
create a symlink at this name and use it to clobber any file on the
system, or by switching the symlink install arbitrary packages (and
package installers can execute arbitrary code).</para></item>
          <item><para>CVE-2012-1986 (High) - Filebucket arbitrary file
read</para>
          <para><ulink url="http://puppetlabs.com/security/cve/cve-2012-1986">http://puppetlabs.com/security/cve/cve-2012-1986</ulink>
(#13511)</para>
          <para>It is possible to construct a REST request to
fetch a file from a filebucket that overrides the puppet master's
defined location for the files to be stored. If a user has access to
construct directories and symlinks on the machine they can read any
file that the user the puppet master is running as has access
to.</para></item>
          <item><para>CVE-2012-1987 (Moderate) - Filebucket denial of
service</para>
          <para><ulink url="http://puppetlabs.com/security/cve/cve-2012-1987">http://puppetlabs.com/security/cve/cve-2012-1987</ulink>
(#13552,#13553)</para>
          <para>By constructing a marshaled form of a
Puppet::FileBucket::File object a user can cause it it to be written
to any place on the disk of the puppet master. This could be used for
a denial of service attack against the puppet master if an attacker
fills a filesystem that can cause systems to stop working. In order to
do this the attacker needs no access to the puppet master system, but
does need access to agent SSL keys.</para>
          <para>Using the symlink attack described in Bug #13511 the
puppet master can be caused to read from a stream (e.g. /dev/random)
when either trying to save a file or read a file. Because of the way
in which the puppet master deals with sending files on the filesystem
to a remote system via a REST request the thread handling the request
will block forever reading from that stream and continually consuming
more memory. This can lead to the puppet master system running out of
memory and cause a denial of service.</para></item>
          <item><para>CVE-2012-1988 (High) - Filebucket arbitrary code
execution</para>
          <para><ulink url="http://puppetlabs.com/security/cve/cve-2012-1988">http://puppetlabs.com/security/cve/cve-2012-1988</ulink>
(#13518)</para>
          <para>Filebucket arbitrary code execution</para>
          <para>This requires access to the cert on the agent
and an unprivileged account on the master.  By creating a path on the
master in a world-writable location that matches a command string, one
can then make a file bucket request to execute that
command.</para></item>
          <item><para>CVE-2012-1989 (High) - Telnet utility (used for
network devices) writes to insecure location</para>
          <para><ulink url="http://puppetlabs.com/security/cve/cve-2012-1989">http://puppetlabs.com/security/cve/cve-2012-1989</ulink>
(#13606)</para>
          <para>The telnet.rb file opens a NET::Telnet
connection with an output log of /tmp/out.log. That log could be
replaced by a symlink anywhere on the system and the puppet user would
happily write through the symlink, potentially clobbering data or
worse.</para></item>
        </items>
      </change>

      <change from="2.7.11" to="2.7.12">
        <items name="Features">
          <item><para>Zypper package provider supports zypper
0.6</para></item>
          <item><para>Raise default key lengths in
Puppet</para></item>
          <item><para>Plumbing For Puppet Module Tool
improvements</para>
          <unorderedlist>
            <item><para>Module requirements should include
versions</para></item>
            <item><para>Fix SemVer's range behavior to work with Ruby
1.9</para></item>
            <item><para>Face actions should be able to set exit
codes</para></item>
            <item><para>Implement a rich console logging
prototype</para></item>
            <item><para>Enhance the uninstall PMT action</para></item>
            <item><para>All forge interactions should be
centralized</para></item>
            <item><para>Add module dependency errors to module list
output</para></item>
            <item><para>Enhance PMT search action output</para></item>
          </unorderedlist></item>
        </items>

        <items name="Bug Fixes">
          <item><para>Windows Bug Fixes</para>
          <unorderedlist>
            <item><para>Fix puppet agent --listen on
Windows</para></item>
            <item><para>Don't add execute bit to newly created files
on Windows</para></item>
            <item><para>Skip default file permissions for sync'ed
files on Windows</para></item>
            <item><para>Allow POSIX paths for files served to Windows
agents</para></item>
            <item><para>Refactor Windows administrator
detection</para></item>
            <item><para>Disable puppet kick on windows</para></item>
            <item><para>Restored agent lockfile behavior to 2.7.9; in
2.7.10 and 2.7.11, `puppet agent --disable' begun to use a new lock
file named `puppetdlock.disabled'. This was determined to cause
compatibility issues with certain external tools, so the pre-2.7.10
behavior has been restored.</para></item>
            <item><para>Agent lockfile backwards compatibility to
support users upgrading from 2.7.10 or 2.7.11.</para></item>
            <item><para>Improved status / notification message when
attempting to run an agent after agents have been administratively
disabled (via `puppet agent --disable').</para></item>
            <item><para>Cron error messages on Windows less
cryptic</para></item>
            <item><para>Don't overwrite symlinks in augeas
provider</para></item>
            <item><para>Fix zypper provider so ensure =&gt; `latest'
works</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="2.7.10" to="2.7.11">
        <item><para>This is a security, and bug fix release in the
2.7.x branch.</para></item>
        <items name="Security Fixes">
          <item><para>CVE-2012-1053 (Group Privilege
Escalation)</para>
          <para><ulink url="http://puppetlabs.com/security/cve/cve-2012-1053/">http://puppetlabs.com/security/cve/cve-2012-1053/</ulink>
(#12457, #12458, #12459) A bug in Puppet gives unexpected and improper
group privileges to execs and types/providers. When executing commands
as a different user, Puppet leaves the forked process with Puppet's
own group permissions. Specifically:</para>
          <unorderedlist>
            <item><para>Puppet's primary group (usually root) is always
present in a process's supplementary groups.</para></item>
            <item><para>When an exec resource is assigned a user to run
as but not a group,</para></item>
            <item><para>Puppet will set its effective GID to Puppet's
own GID (usually root).</para></item>
            <item><para>Permanently changing a process's UID and GID
won't clear the supplementary groups, leaving the process with
Puppet's own supplementary groups (usually including
root).</para></item>
          </unorderedlist>
          <para>This causes any untrusted code executed by a
Puppet exec resource to be given unexpectedly high
permissions.</para></item>
          <item><para>CVE-2012-1054 (User Privilege
Escalation)</para>
          <para><ulink url="http://puppetlabs.com/security/cve/cve-2012-1054/">http://puppetlabs.com/security/cve/cve-2012-1054/</ulink>
(#12460)</para>
          <para>If a user's .k5login file is a symlink, Puppet will
overwrite the link's target when managing that user's login file with
the k5login resource type. This allows local privilege escalation by
linking a user's .k5login file to root's .k5login file.</para>
          <para>2.7.11 also addresses the following regressions
in the 2.7.10 release #12572, #12188, #12412, #2927, #12296, #12310,
#12464</para></item>
        </items>
      </change>

      <change from="2.7.9" to="2.7.10">
        <item><para>Pulled due to regressions from 2.7.9</para></item>
        <item><para>We are continuing to see several issues introduced
Puppet 2.7.10. We are recommending that users discontinue its usage.
This could mean using 2.7.9 or waiting patiently until we can get
2.7.11 out the door.</para></item>
        <item><para>   These are the most significant tickets around
the 2.7.10 regressions. #12310, #2927, #12269, #12588</para></item>
        <items name="Highlights">
          <item><para>We have several section of release notes this
month due to the high volume of commits. Sections are Instrumentation,
Core, Mac OS, Windows, and FreeBSD.</para>
          <unorderedlist>
            <item><para>Instrumentation Features
available</para></item>
            <item><para>Symbolic File modes supports ( e.g. u=rw,go=r)
for File type</para></item>
            <item><para>Write reports to a temporary file and move
them into place</para></item>
            <item><para>Add password get/set behavior for Mac OS X
10.7</para></item>
            <item><para>Add support for user expiriy in pw user
provider</para></item>
            <item><para>Improve pw group provider on
FreeBSD</para></item>
            <item><para>Make sure managehome is respected on
FreeBSD</para></item>
            <item><para>Add password management on
FreeBSD</para></item>
          </unorderedlist></item>
        </items>

        <items name="Bug Fixes">
          <item><para>Make the Debian service provider handle services
that don't conform to the debian policy manual.</para></item>
          <item><para>Only load facts once per run</para></item>
          <item><para>Puppetd removes pid file upon exit</para></item>
          <item><para>Fix MySQL deadlock possibility within inventory
service</para></item>
          <item><para>Test Augeas versions correctly with
versioncmp</para></item>
          <item><para>Consider package epoch version when comparing
yum package versions</para></item>
          <item><para>Link should autorequire target</para></item>
          <item><para>Use SMF's svcadm -s option to wait for
errors</para></item>
          <item><para>Fix fact and plugin sync on
Windows</para></item>
          <item><para>Set password before creating user on
Windows</para></item>
          <item><para>Always serve files in binary mode on
Windows</para></item>
          <item><para>Don't hard code ruby install paths in Windows
batch files</para></item>
          <item><para>Don't copy owner and group when sourcing files
from master on Windows</para></item>
          <item><para>Fix OS X supplementary group
handling</para></item>
          <item><para>Use launchctl load -w in launchd provider (Mac
OS)</para></item>
          <item><para>Improve error msg for missing pip
command</para></item>
          <item><para>Better validation for IPv4 and IPv6 address in
host type.</para></item>
        </items>

        <items name="Instrumentation">
          <item><para>The Puppet Instrumentation Framework is a tool
to install into a puppet executable:</para>
          <unorderedlist>
            <item><para>instrumentation listeners</para></item>
            <item><para>code probes</para></item>
          </unorderedlist>
          <para>Code probes are static commands we add to the Puppet
codebase to instrument some specific parts of the code. Currently only
the Indirector is covered (but since it is the central piece of
Puppet, it should cover a lot of possible use).</para>
          <para>Each time the program reaches a code probe (and
instrumentation is enabled), the Instrumentation Framework sends an
event to the registered instrumentation listeners. Those can be
enabled/disabled/added/removed live without restarting the executable.
Those listeners responsibility is to produce something useful to the
user. The patch shipped with 3 example listeners, one that logs
execution time of every probe, another that aggregate some performance
data about probes, and the final one decorates the executable process
name (as seen in top) with the latest probes it encounters.</para>
          <para>The Framework also includes a set of REST API and REST
Faces to allow it to enable/disable listeners or probes or to get
access to listener performance data if they produce some.</para>
          <para>How to use the Instrumentation Framework:</para>
          <para>You need a live running Puppet executable (preferably
a puppet master which by default listens to REST requests). It might
also be necessary to modify the auth.conf to allow the instrumentation
requests.</para>
          <para>Display the list of known instrumentation
listeners</para>
          <para>puppet instrumentation_listener search x --terminus
rest</para>
          <para>Enable the "performance" instrumentation
listener</para>
          <para>puppet instrumentation_listener enable performance
--terminus rest</para>
          <para>Know more about the "performance" listener (is it
enabled for instance):</para>
          <para>puppet instrumentation_listener find performance
--terminus rest</para>
          <para>Of course this will only work if probes are
enabled:</para>
          <para>List all the current executable probes:</para>
          <para>puppet instrumentation_probe search x --terminus
rest</para>
          <para>Enable the instrumentation probes:</para>
          <para>puppet instrumentation_probe enable --terminus
rest</para>
          <para>How to get access to the data coming from a listener
(here the "performance" one):</para>
          <para>puppet instrumentation_data find performance
--terminus rest</para></item>
        </items>

        <items name="Core">
          <item><para>Improve error msg for missing pip
comand</para>
          <para>Without this patch the pip package provider does not
produce a user friendly error message when the pip command is not
available. The current error message looks like this:</para>
          <screen>
err: /Stage[main]/Dummy/Package[virtualenv]/ensure: change from
     absent to present failed: Could not set 'present on ensure:
     undefined method `pip' for
     #&lt;Puppet::Type::Package::ProviderPip:0xb6cf6cd0&gt; at
     /etc/puppet/modules/dummy/manifests/init.pp:5
          </screen>
          <para>This patch improves the error message by passing a
string argument, `Could not locate the pip command.', when raising the
NoMethodError. The new error message looks like this:</para>
          <screen>
err: /Stage[main]/Dummy/Package[virtualenv]/ensure: change from
     absent to present failed: Could not set 'present on ensure: Could
     not locate the pip command. at
     /etc/puppet/modules/dummy/manifests/init.pp:5
          </screen>
          <para>This patch also includes updated spec tests
validating this change. No other behavior changes are being
introduced.</para></item>
          <item><para>Better validation for IPv4 and IPv6 address in
host type.</para>
          <para>The previous code was fairly lax in validation, and
would allow a bunch of invalid addresses through - as well as
rejecting some legal, but uncommon, IPv6 address types.</para>
          <para>This adds substantial testing, especially around IPv6
addressing, and replaces the older validation with new, fancy stuff
that works for all the cases.</para></item>
          <item><para>Support symbolic file modes.</para>
          <para>This adds a new feature, support for symbolic file
modes, to Puppet. In addition to being able to specify the octal mode,
you can now use the same symbolic mode style that chmod
supports:</para>
          <screen>
file { "/example": mode =&gt; "u=rw,go=r" }
          </screen>
          <para>This also supports relative file modes:</para>
          <screen>
file { "/relative": mode = "u+w,go-wx" }
          </screen>
          <para>Support is based on the common GNU and BSD symbolic
modes of operation; you specify a comma separated list of actions to
take in each you can sit:</para>
          <para>The user (u), group (g), other (o), or all (a) of the
permission map.</para>
          <para>You can modify the ability to read (R), write (w),
execute / search (x) on a file or directory.</para>
          <para>You can also modify the sticky bit (t), or the setuid
and setgid bits (s).</para>
          <para>Finally, you can set conditional execute permissions
(X), which will result in the file having the execute bit if the
target is a directory, or if the target had any execute bit set. (eg:
g+X will set x if the original was u=x,g=.)</para></item>
          <item><para>Only load facts once per puppet
run</para>
          <para>Make the facter terminus the only place that loads
facts (with the notable exception of pluginsync which loads any ruby
code it syncs). This should satisfy several requirements:</para>
          <unorderedlist>
            <item><para>daemonized puppet agent can get fresh facts on
each run</para></item>
            <item><para>puppet master can load facts</para></item>
            <item><para>facts are not loaded more than once by the
puppet agent fact handler</para></item>
          </unorderedlist></item>
          <item><para>Puppetd does not remove its pidfile when it
exits</para>
          <para>The Puppet::Daemon instance sets up the pid file when
it starts but it's up to the user of that object to arrange for stop
to be called</para>
          <para>There are signal handlers setup to call stop but in a
onetime run those are never called</para>
          <para>This change arrange for the stop method to be called
after a onetime run is done but do not hand the task of exiting the
application over to that so that the agent application can handle the
report status based exit codes</para></item>
          <item><para>Retry inventory ActiveRecord transaction
failure</para>
          <para>Previous to this commit, if the ActiveRecord
transaction for saving facts failed do to MySQL deadlock, for example,
the transaction would fail printing a message to the user. This
primarily occurred during a PE agent installation if multiple agent's
were being creating simultaneously.</para>
          <para>This commit adds the ability to retry if a
ActiveRecord::StatementInvalid exception is thrown. To accomplish
this, this commit ports Cloud Provisioner's
Puppet::CloudPack::Utils#retry_action method to Puppet core under
Puppet::Util::RetryAction#retry_action.</para></item>
          <item><para>Properly track blockers when generating
additional resources</para>
          <para>Previously, we would enqueue any unblocked resources
as we added them to the graph. These were our initial resources, with
no dependencies, and served as a starting place for traversal.
However, we would add_dynamically_generated_resources before
traversing, which could add additional resources and dependencies. We
never accounted for these, causing our measure of blockedness to
become incorrect (a resource could have more dependencies than we
counted).</para>
          <para>This is similar to the case of eval_generate adding
additional resources. In that case, we clear the blockers list and
allow it to be recalculated on demand. Unfortunately, that approach
doesn't work for the case where we add resources before traversing (as
in add_dynamically_generated_resources), because we wouldn't have a
reliable list of resources to begin traversal with. Now we no longer
enqueue resources when adding them, and instead wait until after we
have called add_dynamically_generated_resources (which happens only
once). This allows us to add our root resources with the assurance
they won't change before we start evaluating them.</para></item>
          <item><para>Make the Debian service provider handle services
that don't conform to the debain policy manual.</para>
          <para>This change is to support initscripts that do not
support the --query method of invoke-rc.d used by the Debian provider
to determine if service is enabled.</para>
          <para>The fix checks that the link count in /etc/rc?.d
is equal to 4, which is the number of links that should be present
when using the Debian service provider, which is done by update-rc.d
#{service} defaults.</para></item>
          <item><para>Write reports to a temporary file and move them
into place</para>
          <para>When writing reports, there is a window in between
opening and writing to the report file when the report file exists as
an empty file. This makes writing report processors a little annoying
as they have to deal with this case. This writes the report into a
temporary file then renames it to the report file.</para></item>
          <item><para>Test Augueas versions correctly with
versioncmp</para>
          <para>The release of Augeas 0.10.0 broke simplistic version
comparisons with the &gt;= operator, so now use versioncmp.</para></item>
          <item><para>Save/execute changes on versions of Augeas &lt;
0.3.6</para>
          <para>Versions of Augeas prior to 0.3.6 didn't report their
version number, so a fallback of executing changes once in
need_to_run? and again in execute_changes is performed. Otherwise a
save is done in need_to_run? and this is re-used in
execute_changes.</para>
          <para>The /augeas/events/saved node is used to tell
whether the latter optimisation happened, but the return value of
#match wasn't tested correctly (it's an empty array).</para></item>
          <item><para>Make Puppet::Type.ensurable? false when exists? is
undefined</para>
          <para>Puppet::Type.ensurable? incorrectly returned true
even when public_method_defined?(:exists?) was false because the check
never actually happened. This make sure all the necessary methods are
checked and adds tests.</para></item>
          <item><para>Consider package epoch version when comparing yum
package versions</para>
          <para>By including the epoch version in the version
returned as the "latest" available, we can now properly consider
package updates where only the epoch version has
changed.</para></item>
          <item><para>Log when we start evaluating resource at the info
level</para>
          <para>Since we log the final time at info it makes sense
to log the start at info as well.</para></item>
          <item><para>Fix array support in schedule's range
parameters</para>
          <para>Change the schedule type's range parameter to properly
evaluate all elements of a supplied array for validity instead of only
checking the first member of the array. Add documentation to clarify
that range does accept an array.</para>
          <para>Fix the associated tests to use must instead of
should (Puppet::Type#should shadows the rspec should).</para></item>
          <item><para>Make resourcefile work with composite
namevars</para>
          <para>The code for creating the resourcefile was
directly calling resource.name_var, which was causing problems with
resources that have composite namevars (since, for these,
Type#name_var will return false). This patch sanitizes the process by
first checking whether there is a single namevar, and simply calling
resource.ref if there is not one.</para></item>
          <item><para>Add README_DEVELOPER describing UTF-8 in
Puppet</para>
          <para>Without this patch, developers of Puppet don't have a
clear place to get a high level understanding of the way other Puppet
developers are working with UTF-8 and the differences in character
encodings between Ruby 1.8 and 1.9.</para>
          <para>This patch addresses this problem by adding a new
document, README_DEVELOPER.md where developers and contributors can
look to for high level information.</para></item>
          <item><para>Better SSL error message certificate doesn't match
key</para>
          <para>Previously, any error with the certificate
retrieved from the master matching the agent's private key would give
the same static error message, which wasn't particularly helpful. This
commit differentiates three different error cases: missing
certificate, missing private key, and certificate doesn't match
private key. In the last case, the error message includes the
fingerprint of the certificate in question and explicit command line
instructions on how to fix the problem.</para></item>
          <item><para>Add a defaults argument to
create_resources</para>
          <para>Make it possible to supply defaults when calling
create_resources using an optional hash argument.</para></item>
          <item><para>Link should autorequire target</para>
          <para>When we manage a local link to a directory and the
target directory is managed by puppet as well, establish an
autorequire. So if we have something like</para>
          <screen>
file { '/foo': ensure =&gt; directory }
   file { '/link_to_foo': ensure =&gt; '/foo' }
   file { '/link_to_foo/bar': ensure =&gt; file }
          </screen>
          <para>we can ensure that puppet does not create dead
links and does not try to create `/link_to_foo/bar' before /foo is
created.</para></item>
          <item><para>Use SMF's svcadm -s option to wait for
errors</para>
          <para>By default running svcadm enable example will
start the service in the background and won't return errors if it
fails. Using the -s option will cause svcadm to wait and return errors
back to the provider if the service cannot start for some
reason.</para></item>
          <item><para>Added missing RequestHeader entries to
ext/rack/files/apache2.conf</para></item>
          <item><para>Debug logging when we start evaluating
resources.</para>
          <para>The evaltrace option allowed individual resource
evaluation time to be tracked, which made it easier to post-hoc
identify which resources took long periods of time to process.</para>
          <para>It is also helpful, when doing live debugging, to
know where the hang happens; to support that we now log a debug
message about starting the evaluation of the resource before we go
into the process.</para></item>
          <item><para>Update storeconfigclean script to read
puppet.conf</para>
          <para>The existing storeconfig script is parsing and
reading puppet.conf specifically from the master section. This change
allows the script to read from the settings from puppet.conf in the
order of master, main, and loads the rails default. This should match
the puppet application behaviour.</para></item>
          <item><para>Add mysql2 gem support</para>
          <para>Besides the mysql gem there is a mysql2 gem that is a
"modern, simple and very fast Mysql library for Ruby" . It can either
be installed as a separate gem (v0.2.x) for ActiveRecord &lt; 3.1 or
can be used as part of ActiveRecord 3.1</para>
          <para>To use mysql2 the dbadapter setting must be set to
"mysql2" and this patch adds support for this setting. <ulink url="https://github.com/brianmario/mysql2#readme">https://github.com/brianmario/mysql2#readme</ulink></para></item>
        </items>

        <items name="Mac Highlights">
          <item><para>Fix OS X Ruby supplementary group
handling</para>
          <para>Catch Errno::EINVAL as some operating systems (OS X in
particular) can cause troubles when using Process#groups= to change
the user/process list of supplementary groups membership.</para>
          <para>Test coverage has been added to check for
regressions.</para></item>
          <item><para>Fix group resource in OS X</para>
          <para>The group provider on OS X uses "dseditgroup" to manage
group membership. Due to Apple bug 8481241 ("dseditgroup can't remove
unknown users from groups"), however, if the puppet group provider
needs to remove a non-existant user from a group it manages, it will
fail.</para>
          <para>To remedy this, in the meantime, the provider will
call dscl to delete the non-existant member from the group. If that
fails then the error is rescued and feedback is
provided.</para></item>
          <item><para>Build a Rake task for building Apple
Packages</para></item>
          <item><para>Use launchctl load -w in launchd
provider</para>
          <para>There was an issue where a service on OS X would be
enabled but also stopped and the launchd service provider couldn't
start it. In this case, the launchd service provider needed to execute
launchctl load -w &lt;job_path&gt; to successfully start the service,
but it wasn't programmed to do so.</para>
          <para>To remedy this, the launchd service provider's start
method now checks if the job is disabled OR if the job is currently
stopped.</para>
          <para>A spec test was added to catch for this unique
situation.</para></item>
          <item><para>Add password get/set behavior for
10.7</para>
          <para>Puppet did not have the ability to get/set passwords in
OS X version 10.7. This commit implements this behavior. Users in 10.7
have a binary plist file in /var/db/dslocal/nodes/Default/users that
contains a `ShadowHashData' key. The value for this key is actually a
binary encrypted plist which contains a `SALTED-SHA512' key containing
a base64 encoded string. This string is actually the salted-SHA512
password hash with a 4 byte salt prepending the hash. Puppet expects
this 4 byte salt + salted-SHA512 password hash in order to set the
user's password. Since this value is drastically different from
previous versions of OS X, Puppet will fail if you try and pass a SHA1
password hash that was used in previous versions of OS X.</para>
          <para>Spec tests were added to ensure that Puppet fails
with an incorrect password, and that the get/set behavior works
properly with OS X version 10.7.</para></item>
        </items>

        <items name="Windows Highlights">
          <item><para>Always serve files in binary mode</para>
          <para>Previously, Windows agents were reading files in text
mode when serving them locally, such as when serving files from a
local module, corrupting binary files in the process.</para>
          <para>This commit reads files in binary mode, which is a
noop on Unix.</para></item>
          <item><para>Use %~dp0 to resolve bat file's install
directory</para>
          <para>This commit uses the %~dp0 batch script modifier to
resolve the drive and path of the directory containing the
envpuppet.bat file. This eliminates the need for hard coded paths
within the script tselfIt also uses %VAR:\=/% to substitute each
backslash for a forward slash in the RUBYLIB environment</para>
          <para>Also added a section about running the spec tests
on Windows.</para></item>
          <item><para>Add envpuppet batch file to run Puppet from
source on Windows</para>
          <para>Running Puppet on windows from source is non-trivial
since the environment variables behave quite differently. In addition,
it's not clear windows paths expect / rather than \ path
separators.</para>
          <para>This patch provides an envpuppet batch file to
run Puppet from source on Windows platforms.</para></item>
          <item><para>Don't hard code ruby install paths in Windows
batch files</para>
          <para>Previously, the
{filebucket,pi,puppet,puppetdoc,ralsh}.bat files hard coded the path
to the ruby installation, making it impossible to move the ruby
install directory.</para>
          <para>This commit changes the script to use the %~dp0 batch
file modifier, which resolves to the drive letter and path of the
directory of the batch file being executed.</para>
          <para>Windows XP and later all support the %*
modifier, so this commit removes the Win 9x code paths that are not
supported.</para></item>
          <item><para>Set password before creating user on
Windows</para>
          <para>Previously, puppet could not create a user with
no password when a local password complexity policy was set. This
commit sets the password on the user prior to creating it, and updates
the spec tests accordingly.</para></item>
          <item><para>Fix fact and plugin sync on
Windows</para>
          <para>Previously, fact and pluginsync were broken on
Windows, because it was defaulting the owner and group to
Process.uid/gid, and then failing to translate them into Windows
SIDs.</para>
          <para>This commit changes the default file owner to
the current user name, and the default file group to Nobody, which is
the group that Windows typically applies to newly created
files.</para></item>
          <item><para>Don't copy owner and group when sourcing files
from master</para>
          <para>Previously, puppet on Windows was not able to source
files from the master, because it was attempting to translate the
uid/gid from the Unix master into a Windows account, and obviously
failing.</para>
          <para>This commit skips the owner and group properties when
copying them from non-local sources, i.e. sources whose URIs have a
`puppet' scheme.</para>
          <para>If the source comes from a local source, then puppet
behaves the same as it did previously, it copies the owner and group
if the source volume supports Windows ACLs, e.g. C:/, samba mapped
drives, or uses default values if the volume does not, e.g. VMware
shared drives.</para></item>
        </items>

        <items name="FreeBSD Highlights">
          <item><para>Add support for user expiriy in pw user
provider</para>
          <para>Add support for setting an expiry date for a user in
the pw user provider. FreeBSD uses the format DD-MM-YYYY rather than
Puppet's YYYY-MM-DD. Tests added to confirm the value is correctly
swapped around.</para>
          <para>Also added custom accessor method to take the unix
timestamp given by the operating system to a Puppet-style YYYY-MM-DD.
This stops Puppet from repeatedly trying to set the expiry date if
it's already correct.</para></item>
          <item><para>Improve pw group provider on
FreeBSD</para>
          <para>Make the pw group provider on FreeBSD support managing
group members. Also readd the allowdupe feature since in testing on
FreeBSD 7, 8 and 9 the -o flag to pw works as documented.</para>
          <para>Add tests for the provider.</para></item>
          <item><para>Make sure managehome is respected on
FreeBSD</para>
          <para>When modifying the home directory of a user and
managehome is set the -m flag should be used with pw. This ensures
that the new home directory is created if it doesn't exist.</para>
          <para>Also add test to verify this
behaviour.</para></item>
          <item><para>Add password management on FreeBSD</para>
          <para>This adds the manages_passwords feature to the pw user
provider. It is based on the patch that was integrated into FreeBSD
puppet port. It adds tests covering the create, delete and modify
processes of the provider.</para>
          <para>This integrates a fix for #7500 that was
introduced by the original patch. The existing code takes the first
character of each property and uses it as a flag. However, with pw,
the -p flag is for setting the password expiration. The result is that
the password isn't set at create time and that the password is set to
expire. The next run of puppet correctly sets the password but the
expiry is still set. The new code avoids using -p for passwords, and
also sets the password correctly when an account is
created.</para></item>
        </items>
      </change>

      <change from="2.7.8" to="2.7.9">
        <item><para>This is a bug fix release for regression
(#11306) in 2.7.8 on Ruby 1.8.5.</para></item>
        <item><para>The 1.8.5-incompatible code wasn't caught
because of a long-standing bug in our tests that went unnoticed
because of a bug in our CI setup. The former issue caused specs to
fail before they even started running on 1.8.5, and the latter caused
the run to still be reported as successful. We've fixed the former
bug, but haven't yet figured out a way to fix the latter (as it seems
to be a bug in Ruby 1.8.5 + rspec). We will, however, be taking steps
to ensure that such problems with our CI setup are more visible and
caught sooner.</para></item>
        <item><para>Fix Ruby 1.8.5-incompatible code in
Transaction#eval_generate</para>
        <para>This was previously creating a Hash from an
array of pairs. Unfortunately, Ruby 1.8.5 only supports an argument
list of pairs rather than an array, so this code didn't work with that
version.</para></item>
      </change>

      <change from="2.7.7" to="2.7.8">
        <item><para>This is a feature and bug fix release in the
2.7.x branch.</para></item>
        <items name="Known Issues">
          <item><para>This release introduced a regression that causes
errors under Ruby 1.8.5, which was not noticed until after release.
See issue #11306 for more details as we investigate, and delay
upgrading to this version if you depend on Ruby 1.8.5 in your node
population.</para></item>
        </items>

        <items name="New Features">
          <item><para>Display file diffs through the Puppet log
system.</para>
          <para>When Puppet generated a diff after changing a file on
disk, it previously printed it directly to stdout; although a user
could view it, it was lost to the rest of the system, and did not
appear in monitoring, logs, or reports.</para>
          <para>We now send file diffs through our regular logging
system, so that they can be viewed in reports and logs. Note that this
may have security implications if reports are being sent to an
untrusted destination, as Puppet now exposes partial file contents in
reports.</para></item>
          <item><para>Allow optional trailing comma in argument
lists.</para>
          <para>You can now put an optional comma at the end of
argument lists for parameterized class definitions and defined types.
This makes parameter lists more closely resemble resource
attributes.</para></item>
        </items>

        <items name="Bug Fixes">
          <item><para>Provide default subjectAltNames when
bootstrapping master</para>
          <para>When bootstrapping a new puppet master without
explicitly setting its valid alternate DNS names, we've always added
some default Subject Alternative Names to its certificate so agents
could reach it at puppet and puppet.&lt;domain&gt;. This got broken in
the process of fixing #2848 (the CVE-2011-3872 AltNames
vulnerability), which caused new puppet masters to get certificates
with no valid Subject Alternative Names. (That is, the master could
only be reached at its FQDN, not at puppet.)</para>
          <para>This fix brings back the default AltNames
behavior for initial puppet master certificates, while staying true to
the policy changes we made for #2848 and making sure the default names
never end up in agent certs. As ever, the default DNS names are only
used if the dns_alt_names setting isn't explicitly set.</para></item>
          <item><para>Don't automatically enable show_diff in noop
mode</para>
          <para>As of 845825a, file diffs are now logged, rather than
printed to console. Because log messages may be stored and are more
broadly readable, we no longer implicitly set show_diff in noop
mode.</para></item>
          <item><para>Allow providers to be used in the run they
become suitable</para>
          <para>At long last! You can now deliver a provider with
pluginsync, use a Puppet resource to install executables or files the
provider depends on, and use that provider in resources during the
same run.</para>
          <para>This works for both explicitly selected
providers and providers that would be the default for their
type.</para></item>
          <item><para>Output four-digit file modes in logging and
reporting</para>
          <para>When reporting a change to a file's mode, Puppet now
outputs the four-digit file mode instead of omitting the leading 0,
i.e. 0755 instead of 755. This reduces the likelihood of setting the
wrong mode on a file through a copy/paste accident.</para></item>
          <item><para>Fix "parenthesize method arguments" warnings
under Ruby 1.8.6</para>
          <para>In the process of Windows development, we introduced
some warnings under Ruby 1.8.6:</para>
          <screen>
warning: parenthsize arguments(s) for future versions
          </screen>
          <para>These have been fixed, along with several
testing/spec improvements around order dependent tests, and testing on
Windows.</para></item>
          <item><para>Restore Mongrel XMLRPC
functionality</para>
          <para>Some code was over-eagerly removed, which turned
out to still be necessary for backward compatibility with XMLRPC
clients. It has been re-instated in this release.</para></item>
          <item><para>Fix missing facts under Mongrel</para>
          <para>When using Puppet with Mongrel, facts were being
lost from agent nodes running 2.7.0 or higher. This was caused by
Mongrel puppet masters only retrieving request parameters from the
query parameters of the URL, which mixed badly with clients that
submit their facts in a POST request. This has been fixed, and Mongrel
puppet masters can merge the POST request body with the query
parameters.</para></item>
          <item><para>Speed up recursive file management in
2.7</para>
          <para>Recursively managing file ownership and
permissions is now at least ten times faster. This speed improvement
can also be seen in some other scenarios.</para></item>
          <item><para>Windows: Handle files on non-ACL volumes more
gracefully</para>
          <para>We now check whether a Windows volume supports ACLs
before just trying to get or set them. This eliminates a nasty error
that would arise when managing owner, group, and/or mode on a file
whose volume didn't support ACLs.</para>
          <para>We also insert default ACL values when sourcing file
content from a volume that doesn't support Windows ACLs (e.g. a VMware
shared drive) to a volume that does; this allows content to be sourced
without requiring the owner, group, and mode to be specified in the
manifest. A file's owner now defaults to Administrators, its group
defaults to Nobody, and its mode defaults to 0644.</para>
          <para>Setting and clearing of the read-only attribute is
improved.</para>
          <para>Potential segfaults when attempting to manage ACLs on
non-ACL volumes have been fixed by improving our handling of return
values from the Windows APIs.</para>
          <para>These fixes do not affect the POSIX file
provider.</para></item>
          <item><para>Ruby 1.8.1: Don't rely on
Kernel#Pathname</para>
          <para>We've removed an unnecessary incompatibility
with pre-1.8.5 Rubies in Puppet::Type::File, which was caused by using
Kernel#Pathname.</para></item>
          <item><para>Allow authenticated clients to access anything
clients without certificates can access</para>
          <para>Previously, the default auth.conf allowed
anonymous clients more access to the certificate endpoint than
authenticated clients. We now allow authenticated clients to access
any endpoint that we trust anonymous clients to use. This improves
support for distributed certificate management
workflows.</para></item>
          <item><para>Serve file content in binary mode</para>
          <para>Previously, Puppet::FileServing::Content opened
files in text mode. This has been changed to use binary
mode.</para></item>
        </items>
      </change>

      <change from="2.7.6" to="2.7.7">
        <item><para>2.7.7 was killed in the Thunderdome by 2.7.8. It
was never released.</para></item>
      </change>

      <change from="2.7.5" to="2.7.6">
        <item><para>This is a security, feature, and bug fix release
in the 2.7.x branch.</para></item>
        <items name="Security Fixes">
          <item><para>CVE-2011-3872 (AltNames
vulnerability)</para>
          <para>(Full vulnerability and mitigation details)</para>
          <para>This is a major security vulnerability which must be
manually remediated; upgrading Puppet will not fully protect a site
from this vulnerability.</para>
          <para>A bug in all previous versions causes Puppet to insert
the puppet master's DNS alt names ("certdnsnames" in puppet.conf) into
the X.509 Subject Alternative Name field of all certificates, rather
than just the puppet master's certificate.</para>
          <para>Since the puppet agent daemon can use the Subject
Alternative Name field to identify its puppet master, your site may
contain agent certificates that can be used in a Man in the Middle
(MITM) attack to impersonate the puppet master.</para>
          <para>This release fixes the underlying bug that caused
dangerous certificates to be issued, but any existing certificates
with improper DNS alternate names will remain dangerous until your
agent nodes have been reconfigured.</para>
          <para>Any site where the puppet master's certdnsnames
setting has been enabled is vulnerable to attack. See the
CVE-2011-3872 details page for more information, including:</para>
          <para>How to determine whether you are affected</para>
          <para>How to fully remediate the vulnerability</para>
          <para>How to download and use the automated remediation
toolkit released by Puppet Labs</para></item>
        </items>

        <items name="Features and Enhancements">
          <item><para>Enhancement: User/group management on
Windows</para>
          <para>(#9328) Retrieve user and group SIDs on
windows.</para>
          <para>Puppet can now manage user and group resources on
Windows, and will use Windows security identifiers (SIDs) for the uid
and gid properties. (The uid and gid properties are read-only for the
time being.)</para></item>
          <item><para>Enhancement: Better file support on
Windows</para>
          <para>The file type and providers have been significantly
refactored to properly manage the owners, groups, and permissions of
files on Windows.</para>
          <para>Some subtleties to be aware of:</para>
          <unorderedlist>
            <item><para>In general, this implementation only supports
"typical" permissions, where group permissions are a subset of user,
and other permissions are a subset of group, e.g. 754, but not
467.</para></item>
            <item><para>The owner can be either a user or group SID,
and most system files are owned by the Administrators
group.</para></item>
            <item><para>The group can be either a user or group
SID.</para></item>
            <item><para>Unexpected results can occur if the owner and
group are the same, but the user and group classes are different, e.g.
750. In this case, it is not possible to allow write access to the
owner, but not the group. As a result, the actual permissions set on
the file would be 770.</para></item>
            <item><para>In general, only privileged users can set the
owner, group, or change the mode for files they do not own. In 2003,
the user must be a member of the Administrators group. In Vista/2008,
the user must be running with elevated privileges.</para></item>
            <item><para>A file/dir can be deleted by anyone with the
DELETE access right OR by anyone that has the FILE_DELETE_CHILD access
right for the parent. See <ulink url="http://support.microsoft.com/kb/238018.">http://support.microsoft.com/kb/238018.</ulink>
But on Unix, the user must have write access to the file/dir AND
execute access to all of the parent path components.</para></item>
            <item><para>Many access control entries are inherited from
parent directories, and it is common for file/dirs to have more than 3
entries, e.g. Users, Power Users, Administrators, SYSTEM, etc, which
cannot be mapped into the 3 class POSIX model. The get_mode method
will set the S_IEXTRA bit flag indicating that an access control entry
was found whose SID is neither the owner, group, or other. This
enables Puppet to detect when file/dirs are out-of-sync, especially
those that Puppet did not create, but is attempting to
manage.</para></item>
            <item><para>On Unix, the owner and group can be modified
without changing the mode. But on Windows, an access control entry
specifies which SID it applies to. As a result, the set_owner and
set_group methods automatically rebuild the access control list based
on the new (and different) owner or group.</para></item>
          </unorderedlist></item>
          <item><para>Enhancement: Support plaintext password in
Windows</para>
          <para>The Windows `user' provider now includes
password support, although passwords must be passed as plaintext
instead of as hashes.</para></item>
          <item><para>Enhancement: Return reports on ral
save</para>
          <para>When using puppet resource from the command line,
using puppet resource to do a save will log error messages to the
console when saving using the ral indirection. However, this doesn't
help when using that indirection in Ruby like you might from
MCollective's puppetral agent.</para>
          <para>So we now return the transaction report you get from
applying the catalog.</para>
          <para>The only place we could find this indirection being
used was in the puppet resource application, although it's possible
that code external to puppet uses this indirection and will need to
change what it expects for the return value of save.</para></item>
        </items>

        <items name="Bug Fixes">
          <item><para>Fix: Recognize more duplicate
resources</para>
          <para>(#8596) Title and name must be unique within a given
resource</para>
          <para>Puppet 2.6 introduced a bug where titles were no
longer being compared to names when identifying duplicate resources.
For example:</para>
          <screen>
file { '/tmp/foo':
   ensure =&gt; file,
 }

 file { 'same_file':
   path   =&gt; '/tmp/foo',
   ensure =&gt; absent,
 }
          </screen>
          <para>This would work, but wasn't supposed to. It will
now register as a duplicate, as intended.</para></item>
          <item><para>Fix: Allow multi-line exec
resources</para>
          <para>(#9996) Restore functionality for multi-line commands
in exec resources</para></item>
          <item><para>Fix: Eliminate warning on groupadd</para>
          <para>(#9027) Get rid of spurious info messages in
groupadd</para>
          <para>Usage of the groupadd provider was leading to spurious
log messages of this form:</para>
          <screen>
info: /Group[developer]: Provider groupadd does not support features
 manages_aix_lam; not managing attribute ia_load_module
          </screen>
          <para>These messages have been eliminated. See also
issue #7137, covering similar issues with the useradd
provider.</para></item>
          <item><para>Fix: Remove unnecessary deprecation warning in
puppet resource</para>
          <para>(#9837) Call puppet apply to avoid deprecation
warning</para>
          <para>puppet resource --edit was causing unnecessary
deprecation warnings similar to the following:</para>
          <screen>
warning: Implicit invocation of 'puppet apply' by passing files (or flags) directly
 to 'puppet' is deprecated, and will be removed in the 2.8 series.  Please
 invoke 'puppet apply' directly in the future.
          </screen>
          <para>These have been resolved.</para></item>
          <item><para>Fix: Resolve issues with Windows
URIs</para>
          <para>Previously, specifying a Windows file URI of the form
`file:///C:/foo' as a file source failed to strip the leading slash
when attempting to source the file. (Also, there was ambiguity after
values were munged, since a value of the form `C:/foo' could either be
a Windows file path or a URI whose scheme is `C'.)</para>
          <para>This behavior has been fixed, and Windows file
URIs can be used safely.</para></item>
          <item><para>Fix: Expose all functions in
templates</para>
          <para>(#4549) Fix templates to be able to call all
functions</para>
          <para>Only a small subset of Puppet functions were available
on the scope in templates. This had people doing workarounds
like:</para>
          <screen>
inline_template("&lt;%= Puppet::Parser::Functions.autoloader.loadall; scope.function_extlookup(['hello world']) %&gt;")
          </screen>
          <para>These workarounds are no longer necessary, and
templates can load any available Puppet function.</para></item>
          <item><para>Fix: Update pluginsync to only load ruby
files.</para>
          <para>(#4135) Update pluginsync to only load ruby
files.</para>
          <para>Previously, puppet agent would attempt to load any
file distributed via pluginsync as though it were Ruby code. This was
causing errors by loading, for example, README files.</para>
          <para>Pluginsync will still distribute any type of
file, but puppet agent will no longer attempt to load non-Ruby
files.</para></item>
          <item><para>Fix: Fix logging on Windows</para>
          <para>(#9435) Gracefully handle when syslog feature is
unavailable</para>
          <para>Previously, Puppet would try to create a syslog log
destination when run without a log destination, which would fail on
Windows because the Syslog module was not available. Behavior when
syslog isn't available has been fixed.</para></item>
          <item><para>Fix: Disable daemonizing on
Windows</para>
          <para>(#9329) Disable agent daemonizing on Windows</para>
          <para>For this release, we will not be providing the code to
run puppet agent as a service, though we have verified that puppet
will run as a service using a third-party service wrapper,
nssm.</para>
          <para>Until support for running the agent as a service is
complete, we have changed the default daemonize setting on Windows.
Puppet will also report an error if daemonize is set to true on
Windows.</para></item>
        </items>
      </change>

      <change from="2.7.4" to="2.7.5">
        <item><para>Puppet 2.7.5 is a security and regression fix
release in the 2.7.x branch.</para></item>
        <items name="Security Fixes">
          <item><para>CVE-2011-3869 -- k5login can overwrite arbitrary
files as root</para></item>
          <item><para>CVE-2011-3870 -- SSH auth key local privilege
escalation</para></item>
          <item><para>CVE-2011-3871 -- Predictable temporary filename
in puppet resource/ralsh</para></item>
        </items>

        <items name="Bug Fixes">
          <item><para>Fix: storeconfigs regression from
2.7.4</para>
          <para>Some StoreConfigs exported and imported
resources were not being found under PostgreSQL. This fix resolves the
regression.</para></item>
        </items>
      </change>

      <change from="2.7.3" to="2.7.4">
        <item><para>Puppet 2.7.4 is security and feature release in
the 2.7.x branch. Due to the security patches included, it is
recommended anybody using the 2.7.x series update to
2.7.4.</para></item>
        <item><para>In addition to the security patch, this release
adds functional Windows providers for several types, and makes changes
to the storeconfigs indirection.</para></item>
        <items name="Security Fixes">
          <item><para>CVE-2011-3848 (directory traversal attacks
through indirections)</para>
          <para>In various versions of Puppet it was possible to cause
a directory traversal attack through the SSLFile indirection base
class. This was variously triggered through the user-supplied key, or
the Subject of the certificate, in the code.</para>
          <para>Now, we detect bad patterns down in the base class for
our indirections, and fail hard on them. This reduces the attack
surface with as little disruption to the overall codebase as possible,
making it suitable to deploy as part of older, stable versions of
Puppet.</para>
          <para>In the long term we will also address this higher up
the stack, to prevent these problems from reoccurring, but for now
this will suffice.</para></item>
        </items>

        <items name="Fixes and Enhancements">
          <item><para>Allow cron vars to have leading
whitespace</para>
          <para>Fix #9440</para>
          <para>Patch applied from Jeremy Thornhill. This allows
whitespace to appear before cron variables. Previously, whitespace
before cron variables would trigger a parse failure, and the crontab,
except for the puppet managed portion, would get removed. This
addresses that issue. It also includes a test for this issue, added
into the tests directory, which seems to be where the crontab tests
live.</para></item>
          <item><para>Write out a list of resources that are managed
by puppet agent</para>
          <para>Feature #8667</para>
          <para>Similar to how the Puppet classes are written out each
catalog apply, the list of resources is now being written out to a
text file that can be easily used by tools like MCollective. This
allows tools that do ad-hoc management of resources to know if they're
changing a resource that puppet manages, and adjust behavior
accordingly.</para></item>
          <item><para>Fix value validation on options</para>
          <para>Fix #7114</para>
          <para>Support single options that legally include a comma
like "from=host1,host2". We now basically allow either "word" or
"key=value" as options. That's also what the parsedfile provider
currently supports when parsing options.</para></item>
          <item><para>GigabitEthernet/TenGigabitEthernet are
uncorrectly parsed</para>
          <para>Fix #7984</para>
          <para>The interface name abbreviation to canonical
name doesn't return the correct name for GigabitEthernet and doesn't
support TenGigabitEthernet interfaces.</para></item>
          <item><para>Allow macauthorization provider to work on OS X
Lion 10.7</para>
          <para>Fix #9143</para>
          <para>We've flipped around the confine check so we
explicitly exclude the versions of OS X where this provider won't
work, rather than working from a whitelist.</para></item>
          <item><para>Move complex collect expression error into
terminus.</para>
          <para>Fix #9051</para>
          <para>When the StoreConfig system was extracted from core to
a set of termini, most of the rules about permitted syntax were pushed
down into the same place, to allow them to also be replaced.</para>
          <para>One set of restrictions were missed, the limitation
that complex search criteria (like and, or, or parenthetical
expressions) were not permitted, and remained in our parser.</para>
          <para>Now, they live in the terminus, and we enforce
them only there. This ensures that StoreConfigs can be replaced with a
back-end that supports complex collection criteria without other
changes to the Puppet core.</para></item>
          <item><para>Don't rely on error message to detect UAC
capable platform</para>
          <para>Fix #8662</para>
          <para>The call to Win32::Security.elevated_privileges? can
raise an exception when running on a pre-Vista computer or if the
process fails to open its process token.</para>
          <para>Previously, we were looking at the exception message
to determine which case it was. However, Windows 2003 and 2003 R2
return different error codes (and therefore messages) for the
pre-Vista case. In 2003, it returns error code 1 (Incorrect function),
but in 2003 R2 it returns 87 (The parameter is incorrect). Since
SUIDManager was only looking for Incorrect function, SUIDManager.root?
would always return false on 2003 R2.</para>
          <para>Ideally, we could just check if the
GetTokenInformation Win32 API was available, and only call it on
platforms where it makes sense. But this API is available on all
recent version of Windows. What's new in Vista and up is the
TokenElevation value of the TOKEN_INFORMATION_CLASS
enumeration.</para>
          <para>This commit changes the suidmanager to only call
GetTokenInformation when the major kernel version, as reported by
facter, is 6.0 or greater, which corresponds to Vista/2008. See:
<ulink url="http://msdn.microsoft.com/en-us/library/ms724833(v=vs.85).aspx">http://msdn.microsoft.com/en-us/library/ms724833(v=vs.85).aspx</ulink></para></item>
          <item><para>Add MSI package provider for use with
Windows</para>
          <para>Feature #8412</para>
          <para>This provider takes some of its inspiration from the
appdmg provider used with OS X. It will maintain a list of packages
that have been installed and removed from the system via the provider
in a directory under Puppet's vardir called db/package/msi. These
state files will be named the same as the resource name with `.yml'
appended. The state files will be a hash containing the resource name,
the install options used, and the source location of the MSI.</para>
          <para>Any properties that a user wishes to provide to the
MSI can be specified as key/value pairs in the install_options
parameter. For example:</para>
          <screen>
package { 'mysql':
   provider =&gt; msi,
   source =&gt; 'E:\mysql.msi',
   ensure =&gt; installed,
   install_options =&gt; { 'INSTALLDIR' =&gt; 'C:\mysql' },
 }
          </screen>
          <para>The MSI properties specified by install_options will
be appropriately quoted when invoking msiexec.exe to install the
MSI.</para>
          <para>Because the source parameter is integral to the
functionality of being able to install and uninstall MSI packages, we
also override validate_source to make sure that the source parameter
is always set, and is not an empty string when using this
provider.</para></item>
          <item><para>Add a Windows exec provider</para>
          <para>Feature #8140</para>
          <para>This provider inherits from the Puppet::Provider::Exec
class, and is very similar to the posix provider in its behavior. This
provider doesn't have the ability to run as a particular user or group
and will fail if that is attempted, but does support setting all other
parameters, as well as autorequires.</para>
          <para>Rather than the shell provider inheriting from the
posix provider, they both now inherit from a common
Puppet::Provider::Exec class. This new base class and inheritance
structure will allow the forthcoming windows provider to also inherit
from that class, rather than from the unsuitable posix
provider.</para>
          <para>Also, now that Puppet::Util.execute supports
commands as strings in addition to arrays, the command to execute is
passed to Puppet::Util::SUIDManager.run_and_capture as a string,
rather than a string wrapped in an array. This ensures we will never
improperly quote a command with arguments provided as a single
string.</para></item>
          <item><para>Default config dir to %PROGRAMDATA% on
Windows</para>
          <para>Fix #8660</para>
          <para>The puppet install.rb script now defaults the config
directory to %PROGRAMDATA%\PuppetLabs\puppet\etc on Windows. This is
more inline with Windows best-practices, as this directory is used to
store application data across all users. The PROGRAMDATA environment
variable also takes into account alternate system drives, by using the
SYSTEMDRIVE environment variable.</para>
          <para>Note that the Dir::COMMON_APPDATA constant is so named
because it corresponds to the CSIDL_COMMON_APPDATA constant, which on
2000, XP, and 2003 is %ALLUSERSPROFILE%\Application Data, and on
Vista, Win7 and 2008 is %SYSTEMDRIVE%\ProgramData.</para>
          <para>This commit also updates puppet's default
run_mode var and conf directories when running as "root" to match the
install script, and fixes the spec test, which was looking in the
Dir::WINDOWS directory.</para></item>
        </items>
      </change>

      <change from="2.7.2" to="2.7.3">
        <item><para>2.7.3 is a maintenance and enhancement release
in the 2.7.x branch.</para></item>
        <item><para>Add Node Clean action</para>
        <para>Fix #1886 - Add node cleanup capability</para>
        <para>This adds a new "clean" action to the puppet node
face, which removes all traces of a node on the puppetmaster
(including certs, cached facts and nodes, reports, and storedconfig
entries).</para>
        <para>Furthermore, it is capable of unexporting exported
resources of a host so that consumers of these resources can remove
the exported resources and we will safely remove the node from our
infrastructure.</para>
        <para>Usage:</para>
        <screen>
puppet node clean [--unexport] &lt;host&gt; [&lt;host2&gt; ...]
        </screen>
        <para>To achieve this we add different destroy methods
to the different parts of the indirector. So for example for yaml
indirections we already offer read access for the yaml, this changeset
adds the destroy handler which only removes the yaml file for a
request. This can be used to remove cached entries.</para></item>
        <item><para>Deprecate RestAuthConfig#allowed? in favor of
#check_authorization</para>
        <para>#allowed? was a poorly named method since it isn't
actually a predicate method. Instead of returning a boolean, this
methods throws an exception when the access is denied (in order to
keep the full context of what ACE triggered the deny).</para>
        <para>Given that #allowed? was overriding the behavior from
AuthConfig, we leave a version of #allowed? in place that will issue a
deprecation warning before delegating to #check_authorization. Once
support for XML-RPC agents is removed from the master, we will be able
to remove this delegation, since there should no longer be a reason
for a distinction between AuthConfig and RestAuthConfig.</para></item>
        <item><para>#6026 - security file should support inline
comments</para>
        <para>Auth.conf, namespaceauth.conf and
fileserver.conf were not supporting trailing inlined comments. Also
this commit fixes some indentation and error management.</para></item>
        <item><para>Suggest where to start troubleshooting SSL error
message</para>
        <para>Much like the infamous "hostname was not match" error
message, there is another SSL error that people run into that is not
clear how to troubleshoot.</para>
        <screen>
err: Could not send report: SSL_connect returned=1 errno=0
 state=SSLv3 read server certificate B: certificate verify failed.
        </screen>
        <para>As far as I can tell this only ever happens when the
clock is off on the master or client. People seem to think it will
happen other times, but I have not been able to reproduce it other
ways - missing private key, revoked cert, offline CA all have their
own errors. I googled around and the only thing I've seen for this
error in relation to puppet is the time sync problem.</para>
        <para>So the error message text just has some
additional info to suggest you check your clocks.</para></item>
        <item><para>#8596 Detect resource alias conflicts when
titles do not match</para>
        <para>The introduction of composite namevars caused the
resource title used in resource aliases to be set as an array, even
when the resource only had one namevar. This would fail to conflict
with non-alias entries in the resource table, which used a string for
the title, even though the single element array contained the same
string.</para>
        <para>Now, we flatten the key used in the resource
table, so that single element arrays are represented as strings, and
will properly conflict with resource titles.</para></item>
        <item><para>maint: Adding logging to include environment
when source fails</para></item>
        <item><para>maint: Add debug logging when the master
receives a report</para>
        <para>It's always bothered me that when running puppet
inspect (or any application that produces a report really) the master
gives no indication that anything happened when it processes the
report.</para></item>
        <item><para>#6789 Port SSL::CertificateAuthority::Interface
to a Face</para>
        <para>The Puppet::SSL::CertificateAuthority::Interface
class was an early prototype heading toward building out a system like
Faces. Now that we have done that, this changeset ports the early code
to a new face.</para></item>
        <item><para>#8401 Document that --detailed-exitcodes is a
bitmask</para>
        <para>The agent/apply/device man pages mentioned the 2
and 4 exit codes, but didn't mention that they can combine to make 6
if there are both changes and failures. This commit adds the missing
information to all three man pages.</para></item>
        <item><para>#4142 Fix module check not to fail when empty
metadata.json</para>
        <para>Even though the puppet module tool was fixed to generate
the required metadata attributes when it packages modules, it still
creates an empty metadata.json file that gets checked into everybody's
module repos. This causes the module to be unusable straight from a
git clone since puppet was requiring all the required metadata
attributes just with the presence of that file, and resulting in the
error: <command>No source module metadata provided for mcollective
at</command></para>
        <para>This change makes it so that if you have an empty
metadata.json (like the moduletool generates), puppet doesn't consider
it to have metadata. If you have ANY metadata attributes in that file,
it will still check to make sure all the required attributes are
present.</para>
        <para>The work around up to this point has just been to
delete the metadata.json file in git cloned modules.</para>
        <para>This also fixed the tests around this to
actually run, since previously the tests depended on the a json
feature, which we didn't have. We do, however, have a pson
feature.</para></item>
        <item><para>#8147 Change default reporturl to match newer
Dashboard versions</para>
        <para>Puppet's default reporturl setting was
http://localhost:3000/reports, which has been deprecated in Puppet
Dashboard in favor of http://localhost:3000/reports/upload. As
Dashboard is the first-class destination for the http report
processor, this commit changes Puppet's default to match what current
versions of Dashboard expect.</para></item>
        <item><para>#6857 Password disclosure when changing a user's
password</para>
        <para>Make the should_to_s and is_to_s functions to return a
form of `redacted'.</para>
        <para>Rather than send the password hash to system
logs in cases of failure or running in --noop mode, just state whether
it's the new or old hash. We're already doing this with password
changes that work, so this just brings it inline with those, albeit
via a slightly different pair of methods.</para></item>
        <items name="Additional Notes">
          <item><para>Several odd behaviors seen in 2.7.2rc2 should
now meet expectations.</para></item>
          <item><para>8ec0804 #8301 Red Hat spec file for 2.7.2rc1
won't work</para></item>
          <item><para>2263be6 #5108 Update service type docs for new
hasstatus default</para></item>
        </items>

        <item><para>This merges up all changes in the 2.6.9 release
that were unable to be merged into 2.7.{0,1} due to 2.7 being frozen
in release candidate state.</para></item>
        <items name="Highlights include:">
          <item><para>99330fa (#7224) Reword `hostname was not match'
error message</para></item>
          <item><para>1d867b0 (#7224) Add a helper to
Puppet::SSL::Certificate to retrieve alternate names</para></item>
          <item><para>db1a392 (#7506) Organize READMEs; specify
supported Ruby versions in README.md</para></item>
          <item><para>98ba407 (#7127) Stop puppet if a prerun command
fails</para></item>
          <item><para>caca469 (#4416) Ensure types are providified
after reloading</para></item>
          <item><para>413b136 (#4416) Always remove old provider
before recreating it</para></item>
          <item><para>98f58ce (#2128) Add WARNING for
node_name_{fact,value} descriptions</para></item>
          <item><para>3f0dbb5 (#650) Allow symlinks for configuration
directories</para></item>
          <item><para>1c70f0c (#2128) Add support for setting node
name based on a fact</para></item>
          <item><para>c629958 (#2128) Get facts before retrieving
catalog</para></item>
          <item><para>8eb0e16 (#2728) Add diff output for changes made
by Augeas provider</para></item>
          <item><para>c02126d (#5966) Add support for hostname regular
expressions in auth.conf</para></item>
          <item><para>75e2764 (#5318) Always notice changes to
manifests when compiling.</para></item>
          <item><para>0bcbca5 maint: Dedup the loadpath so we don't
have to walk it multiple times</para></item>
          <item><para>89d447b (#6962) Add "arguments" method to help
API</para></item>
          <item><para>8eea3f5 Added the vcsrepo type and providers to
the core</para></item>
          <item><para>107b38a maint: Fix pacman provider to work with
Ruby 1.9</para></item>
          <item><para>0b8ebac (#7300) Fix instances method of mount
provider</para></item>
        </items>
      </change>

      <change from="2.7.1" to="2.7.2">
        <item><para>2.7.2 was slain in the Thunderdome by
2.7.3.</para></item>
      </change>

      <change from="2.7.0" to="2.7.1">
        <item><para>2.7.1 is a bug fix release in the 2.7.x
branch.</para></item>
        <item><para>Fixing bug #8048. This made users of Puppet as a
gem unable to install Puppet 2.7.0 release if gem was configured to
use rdoc, as rdoc failed to parse on one file.</para>
        <para>This issue only impacted users of Puppet as a
gem.</para></item>
      </change>

      <change from="2.6.x" to="2.7.0">
        <item><para>2.7.0 is a new feature release of
Puppet.</para></item>
        <items name="Notable Features and Bug Fixes">
          <item><para>Apache License</para>
          <para>Puppet is now released under the Apache 2.0
license.</para></item>
          <item><para>Ruby 1.9 Support</para>
          <para>There are some known issues with the 2.7.0
release, but we now support Ruby 1.9.2 and higher, and will be
aggressively fixing bugs under Ruby 1.9.</para></item>
          <item><para>Deterministic Catalog Application</para>
          <para>Previously, Puppet didn't guarantee that it would
apply unrelated resources in any particular order. This meant that if
you forgot to specify some important before or require relationship, a
single catalog might work fine on eight nodes and then fail
mysteriously on the ninth and tenth. This could be frustrating! Now
it's gone: Puppet will make sure that the same catalog will always be
applied in the same order on every machine, and it'll either succeed
reliably or fail reliably. (This change will also be appearing in the
final 2.6.x releases.) (See issue #6911.)</para></item>
          <item><para>Manage Network Devices</para>
          <para>Currently this initial solution has a base network
type/provider and providers for managing Cisco interfaces and vlans.
The puppet provider connects to remote switches and routers through
either ssh or telnet.</para>
          <para>To manage an interface:</para>
          <screen>
interface { "FastEthernet 0/1":
   device_url          =&gt; "ssh://user:pass@cisco2960.domain.com/",
   mode                =&gt; trunk,
   encapsulation       =&gt; dot1q,
   trunk_allowed_vlans =&gt; "1-99,200,253",
   description         =&gt; "to back bone router"
 }
          </screen>
          <para>or</para>
          <screen>
interface { "Vlan 1":
   device_url  =&gt; "ssh://user:pass@router.domain.com/",
   description =&gt; "internal net",
   ipaddress   =&gt; [ "192.168.0.1/24", "fe08::/128 link-local"]
 }
          </screen>
          <para>And to manage vlans:</para>
          <screen>
vlan { "99":
   description =&gt; "management",
   device_url  =&gt; "ssh://user:pass@cisco2960.domain.com/",
 }
          </screen>
          <para>A current limitation is that it isn't possible
to have 2 switches with the same interface name.</para></item>
          <item><para>Dependency cycle reporting</para>
          <para>We have significantly improved dependency cycle
reporting so that the cycle is clearly identifiable, and will produce
graphs of such cycles for easier debugging. Error messages will now
appear as follows:</para>
          <screen>
Found 2 dependency cycles: (Notify[a] =&gt; Notify[b] =&gt; Notify[a]) (Notify[mp2-2] =&gt; Notify[mp2] =&gt; Notify[mp2-2])
          </screen></item>
          <item><para>Man Pages</para>
          <para>We've spiffed up our man pages. Static man files are
in the man/ directory of the source, and should be installed for you
if you installed Puppet with your OS's packaging system. We've also
introduced a puppet man subcommand that can render man pages on the
fly using ronn. (We recommend running gem install ronn before using
it; if it isn't installed, puppet man will just print a human-readable
version of the man page source text.)</para></item>
          <item><para>Deprecations</para>
          <para>We're starting the hourglass on a few older
features:</para>
          <unorderedlist>
            <item><para>`puppet' as a synonym for `puppet apply' ---
Starting today, running puppet my-manifest.pp will issue a warning;
you should start using puppet apply directly instead. Support for
implicit invocation of puppet apply will be dropped in Puppet
2.8.</para></item>
            <item><para>Dynamic scope --- We've started issuing warnings
when variables or resource defaults are found via dynamic lookup.
There's more info and explanation in a guide on the docs site, but the
short version is that you should start referencing variables with
their qualified names instead of counting on dynamic scope. We hope to
drop support for dynamic scope in Puppet 2.8. (Issue
#5027)</para></item>
            <item><para>No more --parseonly option --- This one's
already gone, because we used Faces to build a drop-in replacement:
use puppet parser validate [&lt;manifest&gt;] [&lt;manifest&gt; ...]
instead.</para></item>
          </unorderedlist></item>
          <item><para>Notice Changed Manifests on the First
Try</para>
          <para>During the 2.6.x series, puppet agent would
sometimes require two runs to receive new configurations when puppet
master was running under Passenger. This persistent bug has been dealt
with. (This change will also be appearing in the final 2.6.x
releases.)</para></item>
          <item><para>Static Compiler</para>
          <para>We've introduced static_compiler, a new
catalog_terminus which can be configured in puppet.conf on your puppet
master. (See issue #6873.) The static compiler works by wrapping the
default compiler terminus and replacing every puppet:/// URL in the
catalog it returns with an MD5 reference to a filebucket object; this
saves a lot of describe calls while the agent is running, and it
ensures that the agent won't grab inconsistent file versions if one of
the source files changes while it's running.</para>
          <para>There are some known issues that keep it from
being used as-is, yet --- you have to manually sync the agent's
filebucket to that of the master, the compiler's behavior around
recursion hasn't been rigorously tested, we haven't specified how it
should behave if your puppet master is serving files through a load
balancer, and files are read into memory rather than being streamed.
However, this new approach has the potential to drastically speed up
file-heavy Puppet runs, and if your site serves a lot of files and you
have some lab time to test it, it could be worth a look.</para></item>
          <item><para>Improved APIs</para>
          <para>You can now manage and sign certificates via Puppet's
REST API, which means that in the near future you'll be able to check
off signing requests for new nodes right from Puppet Dashboard. (And
someone can now easily write an iPhone or Android app to fetch and
handle CSRs, hint hint. :) )</para></item>
          <item><para>Services Are Assumed to Have Status
Commands</para>
          <para>Per issue #5108, the service type's hasstatus
attribute now defaults to true, which means init scripts are expected
to have working status commands. This is a potentially incompatible
change. If you use an OS where broken status commands are still the
norm, you may need to add the following resource default to your
site.pp manifest:</para>
          <screen>
Service {
   hasstatus =&gt; false,
 }
          </screen>
          <para>This will effectively restore the old
behavior.</para></item>
          <item><para>Default ACL improvements</para>
          <para>We have adjusted the default ACL in the puppet
master to allow a node to query configuration information about itself
from the internal or external node classifier.</para></item>
          <item><para>pkgutil Provider</para>
          <para>pkgutil provider support has been significantly
improved, resolving issue #4258.</para></item>
          <item><para>Puppet Faces</para>
          <para>Faces is a new API for creating new Puppet
subcommands. Faces dramatically simplifies the process of extending
Puppet by building new capabilities, including additional nouns and
verbs that can be called by issuing commands from your command line
interface.</para>
          <para>We're particularly excited about Faces and the
opportunities it offers for our user base. You can see how easy it is
to create a subcommand and action with our new manifest
validator</para>
          <para>This provides a new subcommand and a single action as
follows: <command>puppet parser validate
mymanifest.pp</command></para>
          <para>It's also easy to create new actions for existing
subcommands, which is a great way to extend the Puppet model, and it's
also become significantly easier to access Puppet subsystems as shown
by the configurer subcommand:</para>
          <para>This shows how easy it is to access these subcommands
and actions in Ruby code:</para>
          <screen>
facts = Puppet::Face[:facts, '0.0.1'].find(certname)
   catalog = Puppet::Face[:catalog, '0.0.1'].download(certname, facts)
   report = Puppet::Face[:catalog, '0.0.1'].apply(catalog)
          </screen>
          <para>That small amount of code offers this on the command
line:</para>
          <screen>
$ puppet configurer synchronize
          </screen>
          <para>which accomplishes basically the same functionality as
`puppet agent --test', but is much simpler to rearrange and modify for
your own needs.</para>
          <para>We look forward to seeing what the community comes up
with now that it is so easy to interact with and extend the underlying
model.</para>
          <para>To get a look at the new subcommands, start by running
puppet help. To see the API in action, look at the source for the
secret_agent and parser faces.</para></item>
          <item><para>Certificate API</para>
          <para>Read or alter the status of a certificate or pending
certificate request. This endpoint is roughly equivalent to the puppet
cert command; rather than returning complete certificates, signing
requests, or revocation lists, this endpoint returns information about
the various certificates (and potential and former certificates) known
to the CA.</para>
          <screen>
GET /{environment}/certificate_status/{certname}
          </screen>
          <para>Retrieve a PSON hash containing information about the
specified host's certificate. Similar to puppet cert --list
{certname}.</para>
          <screen>
GET /{environment}/certificate_statuses/no_key
          </screen>
          <para>Retrieve a list of PSON hashes containing information
about all known certificates. Similar to puppet cert --list
--all.</para>
          <screen>
PUT /{environment}/certificate_status/{certname}
          </screen>
          <para>Change the status of the specified host's certificate.
The desired state is sent in the body of the PUT request as a one-item
PSON hash; the two allowed complete hashes are
{"desired_state":"signed"} (for signing a certificate signing request;
similar to puppet cert --sign) and {"desired_state":"revoked"} (for
revoking a certificate; similar to puppet cert --revoke); see examples
below for details.</para>
          <para>When revoking certificates, you may wish to use a
DELETE request instead, which will also clean up other info about the
host.</para>
          <screen>
DELETE /{environment}/certificate_status/{hostname}
          </screen>
          <para>Cause the certificate authority to discard all
information regarding a host (including any certificates, certificate
requests, and keys), and revoke the certificate if one is present.
Similar to puppet cert --clean.</para>
          <para>Examples include:</para>
          <screen>
curl -k -H "Accept: pson" https://puppetmaster:8140/production/certificate_status/testnode.localdomain
 curl -k -H "Accept: pson" https://puppetmaster:8140/production/certificate_statuses/all
 curl -k -X PUT -H "Content-Type: text/pson" --data '{"desired_state":"signed"}' https://puppetmaster:8140/production/certificate_status/client.network.address
 curl -k -X PUT -H "Content-Type: text/pson" --data '{"desired_state":"revoked"}' https://puppetmaster:8140/production/certificate_status/client.network.address
 curl -k -X DELETE -H "Accept: pson" https://puppetmaster:8140/production/certificate_status/client.network.address
          </screen></item>
        </items>
      </change>

      <note type="configuration">
        <para>The master puppet daemon, puppetmasterd, requires
a user and group "puppet". This may be changed by modifying the
<command>/etc${SB_INSTALL_PREFIX}/puppet.conf</command> configuration
file with a custom user/group directive in the
<command>[master]</command> section.</para>
        <para>The <command>/etc${SB_INSTALL_PREFIX}/puppetmasterd</command> and
<command>/etc${SB_INSTALL_PREFIX}/puppetd</command> files specify additional
command-line options for the puppetmasterd and puppetd daemons. These
files are sourced by the master and client init scripts. To pass
additional options to puppetmasterd:</para>
        <screen>
PUPPETMASTERD_OPTIONS="&lt;option_1&gt; &lt;option_2&gt; ... &lt;option_n&gt;"
        </screen>

        <para>To pass additional options to puppetd:</para>
        <screen>
PUPPETD_OPTIONS="&lt;option_1&gt; &lt;option_2&gt; ... &lt;option_n&gt;"
        </screen>

        <para>If "<command>puppet</command>" does not resolve to the
server running puppetmasterd, PUPPETD_OPTIONS must contain at least
"<command>--server=&lt;puppetmasterd server&gt;gt;</command>" so
puppetd can locate the puppetmasterd server.</para>
      </note>
    </notes>
  </program>
</programs>
