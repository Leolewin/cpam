<?xml version="1.0"?>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
<programs>
  <program name="git" version="1.7.7.4" revision="1">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>git17</install-name>

    <sources>
      <source checksum="2f3277475b8da2eb92cef54c4c641a2c"
        checksum-type="md5" size="3484470"
        path="src/git-1.7.7.4.tar.gz"/>
      <patch checksum="106e8e2fdc04a356279ae54aef8d3a21"
        checksum-type="md5" size="10151"
        path="src/git-1.7.7.4.tww.patch"/>
      <patch checksum="a2f8d589bc7b16a94b8c04c3fffcc286"
        checksum-type="md5" size="15618"
        path="src/git-1.7.7.4.auto.patch"/>
      <source checksum="cfe12571df3b6b683eb36cd65fc14f44"
        checksum-type="md5" size="474588"
        path="src/git-manpages-1.7.7.4.tar.gz"
        noop="1" var="DOC_MAN"/>
      <source checksum="daae75502177b14cd8610f6834de60da"
        checksum-type="md5" size="1634131"
        path="src/git-htmldocs-1.7.7.4.tar.gz"
        noop="1" var="DOC_HTML"/>
    </sources>

    <dependencies>
      <depend program="expat" var="LIBEXPAT"
        install-name="libexpat20"
        add-path="prepend">v&gt;=2.0.1</depend>
      <depend program="gettext" install-name="gettext018"
        add-path="prepend">v&gt;=0.18.1.1</depend>
      <depend program="libiconv" var="LIBICONV"
        install-name="libiconv113">v&gt;=1.13.1</depend>
      <depend program="libxslt" install-name="libxslt11"
        add-path="prepend" type="build">v&gt;=1.1.26</depend>
      <depend program="zlib" var="LIBZ"
        install-name="libz12">v&gt;=1.2.5</depend>
      <depend program="bash" var="BASH" install-name="bash42"
        add-path="prepend">v&gt;=4.2</depend>
      <depend program="curl" var="CURL" install-name="curl722"
        add-path="prepend">v&gt;=7.22.0</depend>
      <depend program="diffutils" install-name="diffutils32"
        add-path="prepend" type="build">v&gt;=3.2</depend>
      <depend program="tar" var="TAR" install-name="tar12"
        add-path="prepend">v&gt;=1.26</depend>
      <depend program="tcl" var="TCL" install-name="tcl85"
        add-path="prepend">v&gt;=8.5.10</depend>
      <depend program="tk" var="TK" install-name="tk85"
        add-path="prepend">v&gt;=8.5.10</depend>
    </dependencies>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"
_sysconfdir="${SB_INSTALL_PREFIX}/etc"

case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib"
  CC_LD_RT="-Wl,-blibpath:" ;;
ia64*-hpux*)
  CC=cc CFLAGS="+O2 -z +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="+O2 -z +Ofltacc +Olit=all +Oentrysched \
+DAportable +Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b,"

  # HPUX has a perfectly good strtoumax macro that configure
  # undefines and fails to detect
  export ac_cv_func_strtoumax=yes
  export ac_cv_search_strtoumax="none required" ;;
*-hpux*)
  CC=cc CFLAGS="+O2 -z +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b,"

  # HPUX has a perfectly good strtoumax macro that configure
  # undefines and fails to detect
  export ac_cv_func_strtoumax=yes
  export ac_cv_search_strtoumax="none required" ;;
*-irix*)
  CC=c99 CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1009,1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0"
  CC_LD_RT="-Wl,-rpath," ;;
x86_64*-linux*)
  CFLAGS="-O0 -g"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"
  CC_LD_RT="-Wl,-rpath," ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-osf*)
  CC=cc CFLAGS="-O2 -arch ev5 -ieee -msym -readonly_strings"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4"
  CC_LD_RT="-R" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CC_LD_RT="-R" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis"
  CC_LD_RT="-R" ;;
esac
]]>
    </script-header>

    <configure>
<![CDATA[
${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CPPFLAGS="-I${SB_VAR_CURL_INC} \
${SB_VAR_LIBEXPAT+-I${SB_VAR_LIBEXPAT_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} ${CPPFLAGS+${CPPFLAGS}}" \
LDFLAGS="-L${SB_VAR_CURL_LIB} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB}} \
${CC_LD_RT}${SB_VAR_CURL_LIB} \
${SB_VAR_GCC_RT+${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} \
${SB_VAR_LIBEXPAT+${CC_LD_RT}${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} \
${LDFLAGS+${LDFLAGS}}" \
${SB_VAR_LIBEXPAT+--with-expat} \
${SB_VAR_LIBICONV+--with-iconv=${SB_VAR_LIBICONV}} \
${SB_VAR_PERL+--with-perl="${SB_VAR_PERL}/bin/perl"} \
${SB_VAR_PYTHON+--with-python="${SB_VAR_PYTHON}/bin/python"} \
--with-shell="${SB_VAR_BASH}/bin/bash" \
--with-tcl="${SB_VAR_TCL}/bin/tclsh8.5" \
--with-tcltk="${SB_VAR_TK}/bin/wish8.5" \
--without-openssl --with-curl ${ARGS+${ARGS}} \
--with-gitattributes="${_sysconfdir}/gitattributes" \
--datarootdir=${_datadir} --docdir=${_docdir} \
--mandir="${SB_INSTALL_PREFIX}/man" --sysconfdir=${_sysconfdir} \
--prefix=${SB_INSTALL_PREFIX}

# set python installation dir
if [ "${_pyinstall_prefix+set}" = set ]; then
  ${SB_PATH_SED} -i -e "\
s!@PY_INSTALL_PREFIX@!${_pyinstall_prefix}!g;" \
git_remote_helpers/Makefile
fi
]]>
    </configure>

    <build>
<![CDATA[
gmake all V=1 CC_LD_DYNPATH="${CC_LD_RT}" \
TCLTK_PATH="${SB_VAR_TK}/bin/wish8.5" \
TCL_PATH="${SB_VAR_TCL}/bin/tclsh8.5"

${SB_PATH_SED} -i -e "\
s|^#!.*ruby *$|#!${SB_VAR_RUBY}/bin/ruby|" \
git-instaweb.sh
]]>
    </build>

    <test auto-include="0">
<![CDATA[
gmake -k test NO_SVN_TESTS=1 CC_LD_DYNPATH=${CC_LD_RT} || :
]]>
    </test>

    <purge>
<![CDATA[
# Workaround sb not being able to remove non-ascii filenames
rm -rf ${SB_BUILD_PREFIX}
]]>
    </purge>

    <module name="default">
      <dependencies replace="0">
        <depend program="perl" var="PERL">v==5.12.2</depend>
        <depend program="python" var="PYTHON">v==2.6.7</depend>
        <depend program="ruby" var="RUBY">v==1.8.7</depend>
      </dependencies>

      <validate>
        <depend program="git" module="perl-5.12.2">v==1.7.7.4</depend>
        <depend program="git" module="python-2.6.7">v==1.7.7.4</depend>
        <depend program="git" module="python-2.7.2">v==1.7.7.4</depend>
        <depend program="git" module="ruby-1.8.7">v==1.7.7.4</depend>
        <depend program="git" module="ruby-1.9.2">v==1.7.7.4</depend>
      </validate>

      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"
_sysconfdir="${SB_INSTALL_PREFIX}/etc"

case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib"
  CC_LD_RT="-Wl,-blibpath:" ;;
ia64*-hpux*)
  CC=cc CFLAGS="+O2 -z +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="+O2 -z +Ofltacc +Olit=all +Oentrysched \
+DAportable +Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b,"

  # HPUX has a perfectly good strtoumax macro that configure
  # undefines and fails to detect
  export ac_cv_func_strtoumax=yes
  export ac_cv_search_strtoumax="none required" ;;
*-hpux*)
  CC=cc CFLAGS="+O2 -z +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b,"

  # HPUX has a perfectly good strtoumax macro that configure
  # undefines and fails to detect
  export ac_cv_func_strtoumax=yes
  export ac_cv_search_strtoumax="none required" ;;
*-irix*)
  CC=c99 CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1009,1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0"
  CC_LD_RT="-Wl,-rpath," ;;
x86_64*-linux*)
  CFLAGS="-O0 -g"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"
  CC_LD_RT="-Wl,-rpath," ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-osf*)
  CC=cc CFLAGS="-O2 -arch ev5 -ieee -msym -readonly_strings"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4"
  CC_LD_RT="-R" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CC_LD_RT="-R" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis"
  CC_LD_RT="-R" ;;
esac
]]>
      </script-header>

      <configure>
<![CDATA[
${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CPPFLAGS="-I${SB_VAR_CURL_INC} \
${SB_VAR_LIBEXPAT+-I${SB_VAR_LIBEXPAT_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} ${CPPFLAGS+${CPPFLAGS}}" \
LDFLAGS="-L${SB_VAR_CURL_LIB} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB}} \
${CC_LD_RT}${SB_VAR_CURL_LIB} \
${SB_VAR_GCC_RT+${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} \
${SB_VAR_LIBEXPAT+${CC_LD_RT}${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} \
${LDFLAGS+${LDFLAGS}}" \
${SB_VAR_LIBEXPAT+--with-expat} \
${SB_VAR_LIBICONV+--with-iconv=${SB_VAR_LIBICONV}} \
${SB_VAR_PERL+--with-perl="${SB_VAR_PERL}/bin/perl"} \
${SB_VAR_PYTHON+--with-python="${SB_VAR_PYTHON}/bin/python"} \
--with-shell="${SB_VAR_BASH}/bin/bash" \
--with-tcl="${SB_VAR_TCL}/bin/tclsh8.5" \
--with-tcltk="${SB_VAR_TK}/bin/wish8.5" \
--without-openssl --with-curl ${ARGS+${ARGS}} \
--with-gitattributes="${_sysconfdir}/gitattributes" \
--datarootdir=${_datadir} --docdir=${_docdir} \
--mandir="${SB_INSTALL_PREFIX}/man" --sysconfdir=${_sysconfdir} \
--prefix=${SB_INSTALL_PREFIX}

# set python installation dir
if [ "${_pyinstall_prefix+set}" = set ]; then
  ${SB_PATH_SED} -i -e "\
s!@PY_INSTALL_PREFIX@!${_pyinstall_prefix}!g;" \
git_remote_helpers/Makefile
fi
]]>
      </configure>

      <build>
<![CDATA[
gmake all V=1 CC_LD_DYNPATH="${CC_LD_RT}" \
TCLTK_PATH="${SB_VAR_TK}/bin/wish8.5" \
TCL_PATH="${SB_VAR_TCL}/bin/tclsh8.5"

${SB_PATH_SED} -i -e "\
s|^#!.*ruby *$|#!${SB_VAR_RUBY}/bin/ruby|" \
git-instaweb.sh
]]>
      </build>

      <test auto-include="0">
<![CDATA[
gmake -k test NO_SVN_TESTS=1 CC_LD_DYNPATH=${CC_LD_RT} || :
]]>
      </test>

      <install>
<![CDATA[
gmake install CC_LD_DYNPATH=${CC_LD_RT} INSTALL=${SB_PATH_INSTALL}

# Install manual pages.
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${SB_INSTALL_PREFIX}/man
(cd ${SB_INSTALL_PREFIX}/man
 gtar xf ${SRC_DOC_MAN})
${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}/man
${SB_PATH_CHMOD} -R g-ws ${SB_INSTALL_PREFIX}/man

# Install HTML documentation
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/html
(cd ${_docdir}/html
 gtar xf ${SRC_DOC_HTML}
 # We already have man pages and html docs, remove ascii versions.
 rm *.txt)
${SB_PATH_CHOWN} -hR 0:0 ${_docdir}/html

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_sysconfdir}
${SB_PATH_INSTALL} -m 755 -o root -g 0 /dev/null \
${_sysconfdir}/gitconfig

${SB_PATH_CHOWN} -hR 0:0 ${_datadir}
]]>
      </install>

      <uninstall>
        <remove-db-entry program="git" module="perl-5.12.2">v==1.7.7.4</remove-db-entry>
        <remove-db-entry program="git" module="python-2.6.7">v==1.7.7.4</remove-db-entry>
        <remove-db-entry program="git" module="python-2.7.2">v==1.7.7.4</remove-db-entry>
        <remove-db-entry program="git" module="ruby-1.8.7">v==1.7.7.4</remove-db-entry>
        <remove-db-entry program="git" module="ruby-1.9.2">v==1.7.7.4</remove-db-entry>
      </uninstall>

      <purge>
<![CDATA[
# Workaround sb not being able to remove non-ascii filenames
rm -rf ${SB_BUILD_PREFIX}
]]>
      </purge>
    </module>

    <module name="ruby-1.8.7">
      <build-name>git-1.2.5</build-name>

      <sources>
        <source checksum="3506583cd89c17530dc1c6bf498b4e91"
          checksum-type="md5" size="19968"
          path="src/git-1.2.5.gem"
          noop="1" var="GEMFILE"/>
      </sources>

      <dependencies>
        <depend program="ruby" install-name="ruby18"
          add-path="prepend">v&gt;=1.8.7</depend>
        <depend program="git">v==1.7.7.4</depend>
        <depend program="rubygems" module="1.8.7"
          add-path="prepend">v&gt;=1.8.10</depend>
      </dependencies>

      <script-header>
<![CDATA[
_ruby_subdir="ruby18"

_install_prefix="${SB_INSTALL_PREFIX_LIB}/${_ruby_subdir}"
]]>
      </script-header>

      <configure>
<![CDATA[
: nothing to configure
]]>
      </configure>

      <build>
<![CDATA[
: no tests, so nothing unpacked into $SB_BUILD_PREFIX here
]]>
      </build>

      <test auto-include="0">
<![CDATA[
gmake -k test NO_SVN_TESTS=1 CC_LD_DYNPATH=${CC_LD_RT} || :
]]>
      </test>

      <install>
<![CDATA[
# Install directly from the gem payload
gem install --local -V --rdoc --ri --install-dir=${_install_prefix} \
${SB_SRC_GEMFILE}

# install path for Python's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_install_prefix}/include.paths.d
cat >${_install_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_install_prefix}
_EOT_
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${_install_prefix}
]]>
      </uninstall>

      <purge>
<![CDATA[
# Workaround sb not being able to remove non-ascii filenames
rm -rf ${SB_BUILD_PREFIX}
]]>
      </purge>
    </module>

    <module name="python-2.6.7">
      <dependencies replace="0">
        <depend program="python" var="PYTHON"
          add-path="prepend">v==2.6.7</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_pysubdir="python26"

_pyinstall_prefix="${SB_INSTALL_PREFIX_LIB}/${_pysubdir}"
]]>
      </script-header>

      <configure>
<![CDATA[
${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CPPFLAGS="-I${SB_VAR_CURL_INC} \
${SB_VAR_LIBEXPAT+-I${SB_VAR_LIBEXPAT_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} ${CPPFLAGS+${CPPFLAGS}}" \
LDFLAGS="-L${SB_VAR_CURL_LIB} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB}} \
${CC_LD_RT}${SB_VAR_CURL_LIB} \
${SB_VAR_GCC_RT+${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} \
${SB_VAR_LIBEXPAT+${CC_LD_RT}${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} \
${LDFLAGS+${LDFLAGS}}" \
${SB_VAR_LIBEXPAT+--with-expat} \
${SB_VAR_LIBICONV+--with-iconv=${SB_VAR_LIBICONV}} \
${SB_VAR_PERL+--with-perl="${SB_VAR_PERL}/bin/perl"} \
${SB_VAR_PYTHON+--with-python="${SB_VAR_PYTHON}/bin/python"} \
--with-shell="${SB_VAR_BASH}/bin/bash" \
--with-tcl="${SB_VAR_TCL}/bin/tclsh8.5" \
--with-tcltk="${SB_VAR_TK}/bin/wish8.5" \
--without-openssl --with-curl ${ARGS+${ARGS}} \
--with-gitattributes="${_sysconfdir}/gitattributes" \
--datarootdir=${_datadir} --docdir=${_docdir} \
--mandir="${SB_INSTALL_PREFIX}/man" --sysconfdir=${_sysconfdir} \
--prefix=${SB_INSTALL_PREFIX}

# set python installation dir
if [ "${_pyinstall_prefix+set}" = set ]; then
  ${SB_PATH_SED} -i -e "\
s!@PY_INSTALL_PREFIX@!${_pyinstall_prefix}!g;" \
git_remote_helpers/Makefile
fi
]]>
      </configure>

      <build>
<![CDATA[
gmake python V=1 CC_LD_DYNPATH=${CC_LD_RT}
]]>
      </build>

      <test auto-include="0">
<![CDATA[
gmake -k test NO_SVN_TESTS=1 CC_LD_DYNPATH=${CC_LD_RT} || :
]]>
      </test>

      <install>
<![CDATA[
gmake install-python CC_LD_DYNPATH=${CC_LD_RT}

# install path for Python's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_pyinstall_prefix}/include.paths.d
cat >${_pyinstall_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_pyinstall_prefix}
_EOT_
]]>
      </install>

      <purge>
<![CDATA[
# Workaround sb not being able to remove non-ascii filenames
rm -rf ${SB_BUILD_PREFIX}
]]>
      </purge>
    </module>

    <module name="perl-5.12.2">
      <dependencies replace="0">
        <depend program="perl" var="PERL">v==5.12.2</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_install_prefix="${SB_INSTALL_PREFIX_LIB}/perl5122"
]]>
      </script-header>

      <configure>
<![CDATA[
${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CPPFLAGS="-I${SB_VAR_CURL_INC} \
${SB_VAR_LIBEXPAT+-I${SB_VAR_LIBEXPAT_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} ${CPPFLAGS+${CPPFLAGS}}" \
LDFLAGS="-L${SB_VAR_CURL_LIB} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB}} \
${CC_LD_RT}${SB_VAR_CURL_LIB} \
${SB_VAR_GCC_RT+${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} \
${SB_VAR_LIBEXPAT+${CC_LD_RT}${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} \
${LDFLAGS+${LDFLAGS}}" \
${SB_VAR_LIBEXPAT+--with-expat} \
${SB_VAR_LIBICONV+--with-iconv=${SB_VAR_LIBICONV}} \
${SB_VAR_PERL+--with-perl="${SB_VAR_PERL}/bin/perl"} \
${SB_VAR_PYTHON+--with-python="${SB_VAR_PYTHON}/bin/python"} \
--with-shell="${SB_VAR_BASH}/bin/bash" \
--with-tcl="${SB_VAR_TCL}/bin/tclsh8.5" \
--with-tcltk="${SB_VAR_TK}/bin/wish8.5" \
--without-openssl --with-curl ${ARGS+${ARGS}} \
--with-gitattributes="${_sysconfdir}/gitattributes" \
--datarootdir=${_datadir} --docdir=${_docdir} \
--mandir="${SB_INSTALL_PREFIX}/man" --sysconfdir=${_sysconfdir} \
--prefix=${SB_INSTALL_PREFIX}

# set python installation dir
if [ "${_pyinstall_prefix+set}" = set ]; then
  ${SB_PATH_SED} -i -e "\
s!@PY_INSTALL_PREFIX@!${_pyinstall_prefix}!g;" \
git_remote_helpers/Makefile
fi
]]>
      </configure>

      <build>
<![CDATA[
gmake perl V=1
]]>
      </build>

      <test auto-include="0">
<![CDATA[
gmake -k test NO_SVN_TESTS=1 CC_LD_DYNPATH=${CC_LD_RT} || :
]]>
      </test>

      <install>
<![CDATA[
gmake install-perl sitelib_SQ=${_install_prefix}

rm ${_install_prefix}/perllocal.pod

# install path for Perl's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_install_prefix}/include.paths.d
cat >${_install_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_install_prefix}
_EOT_
]]>
      </install>

      <purge>
<![CDATA[
# Workaround sb not being able to remove non-ascii filenames
rm -rf ${SB_BUILD_PREFIX}
]]>
      </purge>
    </module>

    <module name="ruby-1.9.2">
      <build-name>git-1.2.5</build-name>

      <sources>
        <source checksum="3506583cd89c17530dc1c6bf498b4e91"
          checksum-type="md5" size="19968"
          path="src/git-1.2.5.gem"
          noop="1" var="GEMFILE"/>
      </sources>

      <dependencies>
        <depend program="ruby" install-name="ruby19"
          add-path="prepend">v&gt;=1.9.2</depend>
        <depend program="git">v==1.7.7.4</depend>
        <depend program="rubygems" module="1.9.2"
          add-path="prepend">v&gt;=1.8.10</depend>
      </dependencies>

      <script-header>
<![CDATA[
_ruby_subdir="ruby19"

_install_prefix="${SB_INSTALL_PREFIX_LIB}/${_ruby_subdir}"
]]>
      </script-header>

      <configure>
<![CDATA[
: nothing to configure
]]>
      </configure>

      <build>
<![CDATA[
: no tests, so nothing unpacked into $SB_BUILD_PREFIX here
]]>
      </build>

      <test auto-include="0">
<![CDATA[
gmake -k test NO_SVN_TESTS=1 CC_LD_DYNPATH=${CC_LD_RT} || :
]]>
      </test>

      <install>
<![CDATA[
# Install directly from the gem payload
gem install --local -V --rdoc --ri --install-dir=${_install_prefix} \
${SB_SRC_GEMFILE}

# install path for Python's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_install_prefix}/include.paths.d
cat >${_install_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_install_prefix}
_EOT_
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${_install_prefix}
]]>
      </uninstall>

      <purge>
<![CDATA[
# Workaround sb not being able to remove non-ascii filenames
rm -rf ${SB_BUILD_PREFIX}
]]>
      </purge>
    </module>

    <module name="python-2.7.2">
      <dependencies replace="0">
        <depend program="python" var="PYTHON"
          add-path="prepend">v==2.7.2</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_pysubdir="python27"

_pyinstall_prefix="${SB_INSTALL_PREFIX_LIB}/${_pysubdir}"
]]>
      </script-header>

      <configure>
<![CDATA[
${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CPPFLAGS="-I${SB_VAR_CURL_INC} \
${SB_VAR_LIBEXPAT+-I${SB_VAR_LIBEXPAT_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} ${CPPFLAGS+${CPPFLAGS}}" \
LDFLAGS="-L${SB_VAR_CURL_LIB} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB}} \
${CC_LD_RT}${SB_VAR_CURL_LIB} \
${SB_VAR_GCC_RT+${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} \
${SB_VAR_LIBEXPAT+${CC_LD_RT}${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} \
${LDFLAGS+${LDFLAGS}}" \
${SB_VAR_LIBEXPAT+--with-expat} \
${SB_VAR_LIBICONV+--with-iconv=${SB_VAR_LIBICONV}} \
${SB_VAR_PERL+--with-perl="${SB_VAR_PERL}/bin/perl"} \
${SB_VAR_PYTHON+--with-python="${SB_VAR_PYTHON}/bin/python"} \
--with-shell="${SB_VAR_BASH}/bin/bash" \
--with-tcl="${SB_VAR_TCL}/bin/tclsh8.5" \
--with-tcltk="${SB_VAR_TK}/bin/wish8.5" \
--without-openssl --with-curl ${ARGS+${ARGS}} \
--with-gitattributes="${_sysconfdir}/gitattributes" \
--datarootdir=${_datadir} --docdir=${_docdir} \
--mandir="${SB_INSTALL_PREFIX}/man" --sysconfdir=${_sysconfdir} \
--prefix=${SB_INSTALL_PREFIX}

# set python installation dir
if [ "${_pyinstall_prefix+set}" = set ]; then
  ${SB_PATH_SED} -i -e "\
s!@PY_INSTALL_PREFIX@!${_pyinstall_prefix}!g;" \
git_remote_helpers/Makefile
fi
]]>
      </configure>

      <build>
<![CDATA[
gmake python V=1 CC_LD_DYNPATH=${CC_LD_RT}
]]>
      </build>

      <test auto-include="0">
<![CDATA[
gmake -k test NO_SVN_TESTS=1 CC_LD_DYNPATH=${CC_LD_RT} || :
]]>
      </test>

      <install>
<![CDATA[
gmake install-python CC_LD_DYNPATH=${CC_LD_RT}

# install path for Python's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_pyinstall_prefix}/include.paths.d
cat >${_pyinstall_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_pyinstall_prefix}
_EOT_
]]>
      </install>

      <purge>
<![CDATA[
# Workaround sb not being able to remove non-ascii filenames
rm -rf ${SB_BUILD_PREFIX}
]]>
      </purge>
    </module>

    <licenses>
      <license path="gpl-2.license"/>
    </licenses>

    <notes>
      <change from="1.7.7.3" to="1.7.7.4">
        <items name="Fixes">
          <item><para>A few header dependencies were missing from the
Makefile.</para></item>
          <item><para>Some newer parts of the code used C99 __VA_ARGS__
while we still try to cater to older compilers.</para></item>
          <item><para>"git name-rev --all" tried to name all _objects_,
naturally failing to describe many blobs and trees, instead of showing
only commits as advertised in its documentation.</para></item>
        </items>
      </change>

      <change from="1.7.7.2" to="1.7.7.3">
        <items name="Fixes">
          <item><para>Adjust the "quick-install-doc" procedures as
preformatted html/manpage are no longer in the source
repository.</para></item>
          <item><para>The logic to optimize the locality of the data in
a pack introduced in 1.7.7 was grossly inefficient.</para></item>
          <item><para>The logic to filter out forked projects in the
project list in "gitweb" was broken for some time.</para></item>
          <item><para>"git branch -m/-M" advertised to update RENAME_REF
ref in the commit log message that introduced the feature but not
anywhere in the documentation, and never did update such a ref anyway.
This undocumented misfeature that did not exist has been
excised.</para></item>
        </items>
      </change>

      <change from="1.7.7.1" to="1.7.7.2">
        <items name="Fixes">
          <item><para>We used to drop error messages from libcurl on
certain kinds of errors.</para></item>
          <item><para>Error report from smart HTTP transport, when the
connection was broken in the middle of a transfer, showed a useless
message on a corrupt packet.</para></item>
          <item><para>"git fetch --prune" was unsafe when used with
refspecs from the command line.</para></item>
          <item><para>The attribute mechanism did not use case
insensitive match when core.ignorecase was set.</para></item>
          <item><para>"git bisect" did not notice when it failed to
update the working tree to the next commit to be tested.</para></item>
          <item><para>"git config --bool --get-regexp" failed to
separate the variable name and its value "true" when the variable is
defined without "= true".</para></item>
          <item><para>"git remote rename $a $b" were not careful to
match the remote name against $a (i.e. source side of the remote
nickname).</para></item>
          <item><para>"git mergetool" did not use its arguments as
pathspec, but as a path to the file that may not even have any
conflict.</para></item>
          <item><para>"git diff --[num]stat" used to use the number of
lines of context different from the default, potentially giving
different results from "git diff | diffstat" and confusing the
users.</para></item>
          <item><para>"git pull" and "git rebase" did not work well even
when GIT_WORK_TREE is set correctly with GIT_DIR if the current
directory is outside the working tree.</para></item>
          <item><para>"git send-email" did not honor the configured
hostname when restarting the HELO/EHLO exchange after switching TLS
on.</para></item>
          <item><para>"gitweb" used to produce a non-working link while
showing the contents of a blob, when JavaScript actions are
enabled.</para></item>
        </items>
      </change>

      <change from="1.7.7" to="1.7.7.1">
        <items name="Fixes">
          <item><para>On some BSD systems, adding +s bit on directories
is detrimental (it is not necessary on BSD to begin with). "git init
--shared" has been updated to take this into account without extra
makefile settings on platforms the Makefile knows about.</para></item>
          <item><para>After incorrectly written third-party tools store
a tag object in HEAD, git diagnosed it as a repository corruption and
refused to proceed in order to avoid spreading the damage. We now
gracefully recover from such a situation by pretending as if the commit
that is pointed at by the tag were in HEAD.</para></item>
          <item><para>"git apply --whitespace=error" did not bother to
report the exact line number in the patch that introduced new blank
lines at the end of the file.</para></item>
          <item><para>"git apply --index" did not check corrupted
patch.</para></item>
          <item><para>"git checkout $tree $directory/" resurrected paths
locally removed or modified only in the working tree in $directory/ that
did not appear in $directory of the given $tree. They should have been
kept intact.</para></item>
          <item><para>"git diff $tree $path" used to apply the pathspec
at the output stage, reading the whole tree, wasting
resources.</para></item>
          <item><para>The code to check for updated submodules during a
"git fetch" of the superproject had an unnecessary quadratic
loop.</para></item>
          <item><para>"git fetch" from a large bundle did not enable the
progress output.</para></item>
          <item><para>When "git fsck --lost-and-found" found that an
empty blob object in the object store is unreachable, it incorrectly
reported an error after writing the lost blob out
successfully.</para></item>
          <item><para>"git filter-branch" did not refresh the index
before checking that the working tree was clean.</para></item>
          <item><para>"git grep $tree" when run with multiple threads
had an unsafe access to the object database that should have been
protected with mutex.</para></item>
          <item><para>The "--ancestry-path" option to "git log" and
friends misbehaved in a history with complex criss-cross merges and
showed an uninteresting side history as well.</para></item>
          <item><para>Test t1304 assumed LOGNAME is always set, which
may not be true on some systems.</para></item>
          <item><para>Tests with --valgrind failed to find "mergetool"
scriptlets.</para></item>
          <item><para>"git patch-id" miscomputed the patch-id in a patch
that has a line longer than 1kB.</para></item>
          <item><para>When an "exec" insn failed after modifying the
index and/or the working tree during "rebase -i", we now check and warn
that the changes need to be cleaned up.</para></item>
        </items>
      </change>

      <change from="1.7.6.4" to="1.7.7">
        <items name="Updates">
          <item><para>The scripting part of the codebase is getting
prepared for i18n/l10n.</para></item>
          <item><para>Interix, Cygwin and Minix ports got
updated.</para></item>
          <item><para>Various updates to git-p4 (in contrib/),
fast-import, and git-svn.</para></item>
          <item><para>Gitweb learned to read from
/etc/gitweb-common.conf when it exists, before reading from
gitweb_config.perl or from /etc/gitweb.conf (this last one is read only
when per-repository gitweb_config.perl does not exist).</para></item>
          <item><para>Various codepaths that invoked zlib
deflate/inflate assumed that these functions can compress or uncompress
more than 4GB data in one call on platforms with 64-bit long, which has
been corrected.</para></item>
          <item><para>Git now recognizes loose objects written by other
implementations that use a non-standard window size for zlib deflation
(e.g. Agit running on Android with 4kb window). We used to reject
anything that was not deflated with 32kb window.</para></item>
          <item><para>Interaction between the use of pager and coloring
of the output has been improved, especially when a command that is not
built-in was involved.</para></item>
          <item><para>"git am" learned to pass the
"--exclude=&lt;path&gt;" option through to underlying "git
apply".</para></item>
          <item><para>You can now feed many empty lines before feeding
an mbox file to "git am".</para></item>
          <item><para>"git archive" can be told to pass the output to
gzip compression and produce "archive.tar.gz".</para></item>
          <item><para>"git bisect" can be used in a bare repository
(provided that the test you perform per each iteration does not need a
working tree, of course).</para></item>
          <item><para>The length of abbreviated object names in "git
branch -v" output now honors the core.abbrev configuration
variable.</para></item>
          <item><para>"git check-attr" can take relative paths from the
command line.</para></item>
          <item><para>"git check-attr" learned an "--all" option to list
the attributes for a given path.</para></item>
          <item><para>"git checkout" (both the code to update the files
upon checking out a different branch and the code to checkout a specific
set of files) learned to stream the data from object store when
possible, without having to read the entire contents of a file into
memory first. An earlier round of this code that is not in any released
version had a large leak but now it has been plugged.</para></item>
          <item><para>"git clone" can now take a "--config key=value"
option to set the repository configuration options that affect the
initial checkout.</para></item>
          <item><para>"git commit &lt;paths&gt;..." now lets you feed
relative pathspecs that refer to outside your current
subdirectory.</para></item>
          <item><para>"git diff --stat" learned a --stat-count option to
limit the output of a diffstat report.</para></item>
          <item><para>"git diff" learned a "--histogram" option to use a
different diff generation machinery stolen from jgit, which might give
better performance.</para></item>
          <item><para>"git diff" had a weird worst case behaviour that
can be triggered when comparing files with potentially many places that
could match.</para></item>
          <item><para>"git fetch", "git push" and friends no longer show
connection errors for addresses that couldn't be connected to when at
least one address succeeds (this is arguably a regression but a
deliberate one).</para></item>
          <item><para>"git grep" learned "--break" and "--heading"
options, to let users mimic the output format of "ack".</para></item>
          <item><para>"git grep" learned a "-W" option that shows wider
context using the same logic used by "git diff" to determine the hunk
header.</para></item>
          <item><para>Invoking the low-level "git http-fetch" without
"-a" option (which git itself never did---normal users should not have
to worry about this) is now deprecated.</para></item>
          <item><para>The "--decorate" option to "git log" and its
family learned to highlight grafted and replaced commits.</para></item>
          <item><para>"git rebase master topci" no longer spews usage
hints after giving the "fatal: no such branch: topci" error
message.</para></item>
          <item><para>The recursive merge strategy implementation got a
fairly large fix for many corner cases that may rarely happen in real
world projects (it has been verified that none of the 16000+ merges in
the Linux kernel history back to v2.6.12 is affected with the corner
case bugs this update fixes).</para></item>
          <item><para>"git stash" learned an "--include-untracked
option".</para></item>
          <item><para>"git submodule update" used to stop at the first
error updating a submodule; it now goes on to update other submodules
that can be updated, and reports the ones with errors at the
end.</para></item>
          <item><para>"git push" can be told with the
"--recurse-submodules=check" option to refuse pushing of the
supermodule, if any of its submodules' commits hasn't been pushed out to
their remotes.</para></item>
          <item><para>"git upload-pack" and "git receive-pack" learned
to pretend that only a subset of the refs exist in a repository. This
may help a site to put many tiny repositories into one repository (this
would not be useful for larger repositories as repacking would be
problematic).</para></item>
          <item><para>"git verify-pack" has been rewritten to use the
"index-pack" machinery that is more efficient in reading objects in
packfiles.</para></item>
          <item><para>test scripts for gitweb tried to run even when
CGI-related perl modules are not installed; they now exit early when the
latter are unavailable.</para></item>
          <item><para>Also contains various documentation updates and
minor miscellaneous changes.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git branch -m" and "git checkout -b" incorrectly
allowed the tip of the branch that is currently checked out
updated.</para></item>
        </items>
      </change>

      <change from="1.7.6.3" to="1.7.6.4">
        <items name="Fixes">
          <item><para>The error reporting logic of "git am" when the
command is fed a file whose mail-storage format is unknown was
fixed.</para></item>
          <item><para>"git branch --set-upstream @{-1} foo" did not
expand @{-1} correctly.</para></item>
          <item><para>"git check-ref-format --print" used to parrot a
candidate string that began with a slash (e.g. /refs/heads/master)
without stripping it, to make the result a suitably normalized string
the caller can append to "$GIT_DIR/".</para></item>
          <item><para>"git clone" failed to clone locally from a ".git"
file that itself is not a directory but is a pointer to
one.</para></item>
          <item><para>"git clone" from a local repository that borrows
from another object store using a relative path in its
objects/info/alternates file did not adjust the alternates in the
resulting repository.</para></item>
          <item><para>"git describe --dirty" did not refresh the index
before checking the state of the working tree files.</para></item>
          <item><para>"git ls-files ../$path" that is run from a
subdirectory reported errors incorrectly when there is no such path that
matches the given pathspec.</para></item>
          <item><para>"git mergetool" could loop forever prompting when
nothing can be read from the standard input.</para></item>
          <item><para>Also contains minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.6.2" to="1.7.6.3">
        <items name="Fixes">
          <item><para>"git -c var=value subcmd" misparsed the custom
configuration when value contained an equal sign.</para></item>
          <item><para>"git fetch" had a major performance regression,
wasting many needless cycles in a repository where there is no
submodules present. This was especially bad, when there were many
refs.</para></item>
          <item><para>"git reflog $refname" did not default to the
"show" subcommand as the documentation advertised the command to
do.</para></item>
          <item><para>"git reset" did not leave meaningful log message
in the reflog.</para></item>
          <item><para>"git status --ignored" did not show ignored items
when there is no untracked items.</para></item>
          <item><para>"git tag --contains $commit" was unnecessarily
inefficient.</para></item>
          <item><para>Also contains minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.6.1" to="1.7.6.2">
        <items name="Fixes">
          <item><para>v1.7.6.1 broke "git push --quiet"; it used to be a
no-op against an old version of Git running on the other end, but
v1.7.6.1 made it abort.</para></item>
        </items>
      </change>

      <change from="1.7.6" to="1.7.6.1">
        <items name="Fixes">
          <item><para>Various codepaths that invoked zlib
deflate/inflate assumed that these functions can compress or uncompress
more than 4GB data in one call on platforms with 64-bit long, which has
been corrected.</para></item>
          <item><para>"git unexecutable" reported that "unexecutable"
was not found, even though the actual error was that "unexecutable" was
found but did not have a proper she-bang line to be
executed.</para></item>
          <item><para>Error exits from $PAGER were silently
ignored.</para></item>
          <item><para>"git checkout -b &lt;branch&gt;" was confused when
attempting to create a branch whose name ends with "-g" followed by
hexadecimal digits, and refused to work.</para></item>
          <item><para>"git checkout -b &lt;branch&gt;" sometimes wrote a
bogus reflog entry, causing later "git checkout -" to
fail.</para></item>
          <item><para>"git diff --cc" learned to correctly ignore binary
files.</para></item>
          <item><para>"git diff -c/--cc" mishandled a deletion that
resolves a conflict, and looked in the working tree
instead.</para></item>
          <item><para>"git fast-export" forgot to quote pathnames with
unsafe characters in its output.</para></item>
          <item><para>"git fetch" over smart-http transport used to
abort when the repository was updated between the initial connection and
the subsequent object transfer.</para></item>
          <item><para>"git fetch" did not recurse into submodules in
subdirectories.</para></item>
          <item><para>"git ls-tree" did not error out when asked to show
a corrupt tree.</para></item>
          <item><para>"git pull" without any argument left an extra
whitespace after the command name in its reflog.</para></item>
          <item><para>"git push --quiet" was not really
quiet.</para></item>
          <item><para>"git rebase -i -p" incorrectly dropped commits
from side branches.</para></item>
          <item><para>"git reset [&lt;commit&gt;] paths..." did not
reset the index entry correctly for unmerged paths.</para></item>
          <item><para>"git submodule add" did not allow a relative
repository path when the superproject did not have any default remote
url.</para></item>
          <item><para>"git submodule foreach" failed to correctly give
the standard input to the user-supplied command it
invoked.</para></item>
          <item><para>submodules that the user has never showed interest
in by running "git submodule init" was incorrectly marked as interesting
by "git submodule sync".</para></item>
          <item><para>"git submodule update --quiet" was not really
quiet.</para></item>
          <item><para>"git tag -l &lt;glob&gt;..." did not take multiple
glob patterns from the command line.</para></item>
        </items>
      </change>

      <change from="1.7.5.4" to="1.7.6">
        <items name="Updates">
          <item><para>Various git-svn updates.</para></item>
          <item><para>Updates the way content tags are handled in
gitweb.  Also adds a UI to choose common timezone for displaying the
dates.</para></item>
          <item><para>Similar to branch names, tagnames that begin with
"-" are now disallowed.</para></item>
          <item><para>Clean-up of the C part of i18n (but not
l10n---please wait) continues.</para></item>
          <item><para>The scripting part of the codebase is getting
prepared for i18n/l10n.</para></item>
          <item><para>Pushing and pulling from a repository with large
number of refs that point to identical commits are optimized by not
listing the same commit during the common ancestor negotiation exchange
with the other side.</para></item>
          <item><para>Adding a file larger than core.bigfilethreshold
(defaults to 1/2 Gig) using "git add" will send the contents straight to
a packfile without having to hold it and its compressed representation
both at the same time in memory.</para></item>
          <item><para>Processes spawned by "[alias] &lt;name&gt; =
!process" in the configuration can inspect GIT_PREFIX environment
variable to learn where in the working tree the original command was
invoked.</para></item>
          <item><para>A magic pathspec ":/" tells a command that limits its
operation to the current directory when ran from a subdirectory to work
on the entire working tree. In general, ":/path/to/file" would be
relative to the root of the working tree hierarchy.</para>
          <para>After "git reset --hard; edit Makefile; cd t/", "git
add -u" would be a no-op, but "git add -u :/" would add the updated
contents of the Makefile at the top level. If you want to name a path in
the current subdirectory whose unusual name begins with ":/", you can
name it by "./:/that/path" or by "\:/that/path".</para></item>
          <item><para>"git blame" learned "--abbrev[=&lt;n&gt;]" option
to control the minimum number of hexdigits shown for commit object
names.</para></item>
          <item><para>"git blame" learned "--line-porcelain" that is
less efficient but is easier to parse.</para></item>
          <item><para>Aborting "git commit --interactive" discards
updates to the index made during the interactive session.</para></item>
          <item><para>"git commit" learned a "--patch" option to
directly jump to the per-hunk selection UI of the interactive
mode.</para></item>
          <item><para>"git diff" and its family of commands learned
--dirstat=0 to show directories that contribute less than 0.1% of
changes.</para></item>
          <item><para>"git diff" and its family of commands learned
--dirstat=lines mode to assess damage to the directory based on number
of lines in the patch output, not based on the similarity
numbers.</para></item>
          <item><para>"git format-patch" learned "--quiet" option to
suppress the output of the names of generated files.</para></item>
          <item><para>"git format-patch" quotes people's names when it
has RFC822 special characters in it, e.g. "Junio C. Hamano"
&lt;jch@example.com&gt;.  Earlier it was up to the user to do this when
using its output.</para></item>
          <item><para>"git format-patch" can take an empty
--subject-prefix now.</para></item>
          <item><para>"git grep" learned the "-P" option to take pcre
regular expressions.</para></item>
          <item><para>"git log" and friends learned a new "--notes"
option to replace the "--show-notes" option.  Unlike "--show-notes",
"--notes=&lt;ref&gt;" does not imply showing the default
notes.</para></item>
          <item><para>They also learned a log.abbrevCommit configuration
variable to augment the --abbrev-commit command line
option.</para></item>
          <item><para>"git ls-remote" learned "--exit-code" option to
consider it a different kind of error when no remote ref to be
shown.</para></item>
          <item><para>"git merge" learned "-" as a short-hand for "the
previous branch", just like the way "git checkout -"
works.</para></item>
          <item><para>"git merge" uses "merge.ff" configuration variable
to decide to always create a merge commit (i.e. --no-ff, aka
merge.ff=no), refuse to create a merge commit (i.e. --ff-only, aka
merge.ff=only). Setting merge.ff=yes (or not setting it at all) restores
the default behaviour of allowing fast-forward to happen when
possible.</para></item>
          <item><para>p4-import (from contrib) learned a new option
--preserve-user.</para></item>
          <item><para>"git read-tree -m" learned "--dry-run" option that
reports if a merge would fail without touching the index nor the working
tree.</para></item>
          <item><para>"git rebase" that does not specify on top of which
branch to rebase the current branch now uses @{upstream} of the current
branch.</para></item>
          <item><para>"git rebase" finished either normally or with
--abort did not update the reflog for HEAD to record the event to come
back to where it started from.</para></item>
          <item><para>"git remote add -t only-this-branch
--mirror=fetch" is now allowed. Earlier a fetch-mode mirror meant mirror
everything, but now it only means refs are not renamed.</para></item>
          <item><para>"git rev-list --count" used with "--cherry-mark"
counts the cherry-picked commits separately, producing more a useful
output.</para></item>
          <item><para>"git submodule update" learned "--force" option to
get rid of local changes in submodules and replace them with the
up-to-date version.</para></item>
          <item><para>"git status" and friends ignore .gitmodules file
while the file is still in a conflicted state during a merge, to avoid
using information that is not final and possibly corrupt with conflict
markers.</para></item>
          <item><para>Also contains various documentation updates and
minor miscellaneous changes.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git config" used to choke with an insanely long
line. (merge ef/maint-strbuf-init later)</para></item>
          <item><para>"git diff --quiet" did not work well with
--diff-filter. (merge jk/diff-not-so-quick later)</para></item>
          <item><para>"git status -z" did not default to --porcelain
output format. (merge bc/maint-status-z-to-use-porcelain
later)</para></item>
        </items>
      </change>

      <change from="1.7.5.3" to="1.7.5.4">
        <items name="Fixes">
          <item><para>The single-key mode of "git add -p" was easily
fooled into thinking that it was told to add everthing ('a') when
up-arrow was pressed by mistake.</para></item>
          <item><para>Setting a git command that uses custom
configuration via "-c var=val" as an alias caused a crash due to a
realloc(3) failure.</para></item>
          <item><para>"git diff -C -C" used to disable the rename
detection entirely when there are too many copy candidate paths in the
tree; now it falls back to "-C" when doing so would keep the copy
candidate paths under the rename detection limit.</para></item>
          <item><para>"git rerere" did not diagnose a corrupt MERGE_RR
file in some cases.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.5.2" to="1.7.5.3">
        <items name="Fixes">
          <item><para>The bash completion scripts should correctly work
using zsh's bash completion emulation layer now.</para></item>
          <item><para>Setting $(prefix) in config.mak did not affect
where etc/gitconfig file is read from, even though passing it from the
command line of $(MAKE) did.</para></item>
          <item><para>The logic to handle "&amp;" (expand to UNIX
username) in GECOS field miscounted the length of the name it
formatted.</para></item>
          <item><para>"git cherry-pick -s resolve" failed to cherry-pick
a root commit.</para></item>
          <item><para>"git diff --word-diff" misbehaved when
diff.suppress-blank-empty was in effect.</para></item>
          <item><para>"git log --stdin path" with an input that has
additional pathspec used to corrupt memory.</para></item>
          <item><para>"git send-pack" (hence "git push") over smalt-HTTP
protocol could deadlock when the client side pack-object died
early.</para></item>
          <item><para>Compressed tarball gitweb generates used to be
made with the timestamp of the tarball generation; this was bad because
snapshot from the same tree should result in a same
tarball.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.5.1" to="1.7.5.2">
        <items name="Fixes">
          <item><para>"git add -p" did not work correctly when a hunk is
split and then one of them was given to the editor.</para></item>
          <item><para>"git add -u" did not resolve a conflict where our
history deleted and their history modified the same file, and the
working tree resolved to keep a file.</para></item>
          <item><para>"git cvsimport" did not know that CVSNT stores its
password file in a location different from the traditional
CVS.</para></item>
          <item><para>"git diff-files" did not show the mode information
from the working tree side of an unmerged path correctly.</para></item>
          <item><para>"git diff -M --cached" used to use unmerged path
as a possible rename source candidate, which made no
sense.</para></item>
          <item><para>The option name parser in "git fast-import" used
prefix matches for some options where it shouldn't, and accepted
non-existent options, e.g. "--relative-marksmith" or
"--forceps".</para></item>
          <item><para>"git format-patch" did not quote RFC822 special
characters in the email address (e.g From: Junio C. Hamano
&lt;jch@example.com&gt;, not From: "Junio C. Hamano"
&lt;jch@example.com&gt;).</para></item>
          <item><para>"git format-patch" when run with "--quiet" option
used to produce a nonsense result that consists of alternating empty
output.</para></item>
          <item><para>In "git merge", per-branch
branch.&lt;name&gt;.mergeoptions configuration variables did not
override the fallback default merge.&lt;option&gt; configuration
variables such as merge.ff, merge.log, etc.</para></item>
          <item><para>"git merge-one-file" did not honor GIT_WORK_TREE
settings when handling a "both sides added, differently"
conflict.</para></item>
          <item><para>"git mergetool" did not handle conflicted
submoudules gracefully.</para></item>
          <item><para>"git-p4" (in contrib) used a wrong base image
while merge a file that was added on both branches
differently.</para></item>
          <item><para>"git rebase -i -p" failed to preserve the history
when there is a redundant merge created with the --no-ff
option.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.5" to="1.7.5.1">
        <items name="Fixes">
          <item><para>"git stash -p --no-keep-index" and "git stash
--no-keep-index -p" now mean the same thing.</para></item>
          <item><para>"git upload-pack" (hence "git push" over git
native protocol) had a subtle race condition that could lead to a
deadlock.</para></item>
          <item><para>When an object "$tree:$path" does not exist, if
$path does exist in the subtree of $tree that corresponds to the
subdirectory the user is in, git now suggests using "$tree:./$path" in
addition to the advice to use the full path from the root of the working
tree.</para></item>
          <item><para>The "--date=relative" output format used to say "X
years, 12 months" when it should have said "X+1 years".</para></item>
          <item><para>The smart-HTTP transfer was broken in 1.7.5 when
the client needs to issue a small POST (which uses content-length) and
then a large POST (which uses chunked) back to back.</para></item>
          <item><para>"git clean" used to fail on an empty directory
that is not readable, even though rmdir(2) could remove such a
directory.  Now we attempt it as the last resort.</para></item>
          <item><para>The "--dirstat" option of "diff" family of
commands used to totally ignore a change that only rearranged lines
within a file.  Such a change now counts as at least a minimum but non
zero change.</para></item>
          <item><para>The "--dirstat" option of "diff" family of
commands used to use the pathname in the original, instead of the
pathname in the result, when renames are involved.</para></item>
          <item><para>"git pack-object" did not take
core.bigfilethreashold into account (unlike fast-import); now it
does.</para></item>
          <item><para>"git reflog" ignored options like "--format=.." on
the command line.</para></item>
          <item><para>"git stash apply" used to refuse to work if there
was any change in the working tree, even when the change did not overlap
with the change the stash recorded.</para></item>
          <item><para>"git stash apply @{99999}" was not diagnosed as an
error, even when you did not have that many stash entries.</para></item>
          <item><para>An error message from "git send-email" to diagnose
a broken SMTP connection configuration lacked a space between
"hello=&lt;smtp-domain&gt;" and
"port=&lt;smtp-server-port&gt;".</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.4.5" to="1.7.5">
        <items name="Updates">
          <item><para>Various MinGW portability fixes.</para></item>
          <item><para>Various git-p4 enhancements (in
contrib).</para></item>
          <item><para>Various vcs-svn, git-svn and gitk enhancements and
fixes.</para></item>
          <item><para>Various git-gui updates (0.14.0).</para></item>
          <item><para>Update to more modern HP-UX port.</para></item>
          <item><para>The codebase is getting prepared for i18n/l10n; no
translated strings nor translation mechanism in the code yet, but the
strings are being marked for l10n.</para></item>
          <item><para>The bash completion script can now complete
symmetric difference for "git diff" command, e.g. "git diff
...bra&lt;TAB&gt;".</para></item>
          <item><para>The default minimum length of abbreviated and
unique object names can now be configured by setting the core.abbrev
configuration variable.</para></item>
          <item><para>"git apply -v" reports offset lines when the patch
does not apply at the exact location recorded in the diff
output.</para></item>
          <item><para>"git config" used to be also known as "git
repo-config", but the old name is now officially
deprecated.</para></item>
          <item><para>"git checkout --detach &lt;commit&gt;" is a more
user friendly synonym for "git checkout &lt;commit&gt;^0".</para></item>
          <item><para>"git checkout" performed on detached HEAD gives a
warning and advice when the commit being left behind will become
unreachable from any branch or tag.</para></item>
          <item><para>"git cherry-pick" and "git revert" can be told to
use a custom merge strategy, similar to "git rebase".</para></item>
          <item><para>"git cherry-pick" remembers which commit failed to
apply when it is stopped by conflicts, making it unnecessary to use
"commit -c $commit" to conclude it.</para></item>
          <item><para>"git cvsimport" bails out immediately when the cvs
server cannot be reached, without spewing unnecessary error messages
that complain about the server response it never got.</para></item>
          <item><para>"git fetch" vs "git upload-pack" transfer learned
'no-done' protocol extension to save one round-trip after the content
negotiation is done. This saves one HTTP RPC, reducing the overall
latency for a trivial fetch.</para></item>
          <item><para>"git fetch" can be told to recursively fetch
submodules on-demand.</para></item>
          <item><para>"git grep -f &lt;filename&gt;" learned to treat
"-" as "read from the standard input stream".</para></item>
          <item><para>"git grep --no-index" did not honor pathspecs
correctly, returning paths outside the specified area.</para></item>
          <item><para>"git init" learned the --separate-git-dir option
to allow the git directory for a new repository created elsewhere and
linked via the gitdir mechanism. This is primarily to help submodule
support later to switch between a branch of superproject that has the
submodule and another that does not.</para></item>
          <item><para>"git log" type commands now understand globbing
pathspecs.  You can say "git log -- '*.txt'" for example.</para></item>
          <item><para>"git log" family of commands learned --cherry and
--cherry-mark options that can be used to view two diverged branches
while omitting or highlighting equivalent changes that appear on both
sides of a symmetric difference (e.g. "log --cherry
A...B").</para></item>
          <item><para>A lazy "git merge" that didn't say what to merge
used to be an error. When run on a branch that has an upstream defined,
however, the command now merges from the configured
upstream.</para></item>
          <item><para>"git mergetool" learned how to drive "beyond
compare 3" as well.</para></item>
          <item><para>"git rerere forget" without pathspec used to
forget all the saved conflicts that relate to the current merge; it now
requires you to give it pathspecs.</para></item>
          <item><para>"git rev-list --objects $revs -- $pathspec" now
limits the objects listed in its output properly with the pathspec, in
preparation for narrow clones.</para></item>
          <item><para>"git push" with no parameters gives better advice
messages when "tracking" is used as the push.default semantics or there
is no remote configured yet.</para></item>
          <item><para>A possible value to the "push.default"
configuration variable, 'tracking', gained a synonym that more naturally
describes what it does, 'upstream'.</para></item>
          <item><para>"git rerere" learned a new subcommand "remaining"
that is similar to "status" and lists the paths that had conflicts which
are known to rerere, but excludes the paths that have already been
marked as resolved in the index from its output.  "git mergetool" has
been updated to use this facility.</para></item>
          <item><para>Also contains various documentation
updates.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git fetch" from a client that is mostly following
the remote needlessly told all of its refs to the server for both sides
to compute the set of objects that need to be transferred efficiently,
instead of stopping when the server heard enough. In a project with many
tags, this turns out to be extremely wasteful, especially over the smart
HTTP transport
(sp/maint-{upload,fetch}-pack-stop-early~1).</para></item>
          <item><para>"git fetch" run from a repository that uses the
same repository as its alternate object store as the repository it is
fetching from did not tell the server that it already has access to
objects reachable from the refs in their common alternate object store,
causing it to fetch unnecessary objects
(jc/maint-fetch-alt).</para></item>
          <item><para>"git remote add --mirror" created a configuration
that is suitable for doing both a mirror fetch and a mirror push at the
same time, which made little sense.  We now warn and require the command
line to specify either --mirror=fetch or --mirror=push.</para></item>
        </items>
      </change>

      <change from="1.7.4.4" to="1.7.4.5">
        <item><para>This contains only minor documentation fixes
accumulated since 1.7.4.4.</para></item>
      </change>

      <change from="1.7.4.3" to="1.7.4.4">
        <items name="Fixes">
          <item><para>Compilation of sha1_file.c on BSD platforms were
broken due to our recent use of getrlimit() without including
&lt;sys/resource.h&gt;.</para></item>
          <item><para>"git config" did not diagnose incorrect
configuration variable names.</para></item>
          <item><para>"git format-patch" did not wrap a long subject
line that resulted from rfc2047 encoding.</para></item>
          <item><para>"git instaweb" should work better again with
plackup.</para></item>
          <item><para>"git log --max-count=4 -Sfoobar" now shows 4
commits that changes the number of occurrences of string "foobar"; it
used to scan only for 4 commits and then emitted only matching
ones.</para></item>
          <item><para>"git log --first-parent --boundary $c^..$c"
segfaulted on a merge.</para></item>
          <item><para>"git pull" into an empty branch should have
behaved as if fast-forwarding from emptiness to the version being
pulled, with the usual protection against overwriting untracked
files.</para></item>
          <item><para>"git submodule" that is run while a merge in the
superproject is in conflicted state tried to process each conflicted
submodule up to three times.</para></item>
          <item><para>"git status" spent all the effort to notice
racily-clean index entries but didn't update the index file to help
later operations go faster in some cases.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.4.2" to="1.7.4.3">
        <items name="Fixes">
          <item><para>"git apply" used to confuse lines updated by
previous hunks as lines that existed before when applying a hunk,
contributing misapplication of patches with offsets.</para></item>
          <item><para>"git branch --track" (and "git checkout --track
--branch") used to allow setting up a random non-branch that does not
make sense to follow as the "upstream".  The command correctly diagnoses
it as an error.</para></item>
          <item><para>"git checkout $other_branch" silently removed
untracked symbolic links in the working tree that are in the way in
order to check out paths under it from the named branch.</para></item>
          <item><para>"git cvsimport" did not bail out immediately when
the cvs server cannot be reached, spewing unnecessary error messages
that complain about the server response that it never got.</para></item>
          <item><para>"git diff --quiet" did not work very well with the
"--diff-filter" option.</para></item>
          <item><para>"git grep -n" lacked a long-hand synonym
--line-number.</para></item>
          <item><para>"git stash apply" reported the result of its
operation by running "git status" from the top-level of the working
tree; it should (and now does) run it from the user's working
directory.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.4.1" to="1.7.4.2">
        <items name="Fixes">
          <item><para>Many documentation updates to match "git cmd -h"
output and the git-cmd manual page.</para></item>
          <item><para>We used to keep one file descriptor open for each
and every packfile that we have a mmap window on it (read: "in use"),
even when for very tiny packfiles.  We now close the file descriptor
early when the entire packfile fits inside one mmap
window.</para></item>
          <item><para>"git bisect visualize" tried to run "gitk" in
windowing environments even when "gitk" is not installed, resulting in a
strange error message.</para></item>
          <item><para>"git clone /no/such/path" did not fail
correctly.</para></item>
          <item><para>"git commit" did not correctly error out when the
user asked to use a non existent file as the commit message
template.</para></item>
          <item><para>"git diff --stat -B" ran on binary files counted
the changes in lines, which was nonsensical.</para></item>
          <item><para>"git diff -M" opportunistically detected copies,
which was not necessarily a good thing, especially when it is internally
run by recursive merge.</para></item>
          <item><para>"git difftool" didn't tell (g)vimdiff that the
files it is reading are to be opened read-only.</para></item>
          <item><para>"git merge" didn't pay attention to
prepare-commit-msg hook, even though if a merge is conflicted and
manually resolved, the subsequent "git commit" would have triggered the
hook, which was inconsistent.</para></item>
          <item><para>"git patch-id" (and commands like "format-patch
--ignore-in-upstream" that use it as their internal logic) handled
changes to files that end with incomplete lines
incorrectly.</para></item>
          <item><para>The official value to tell "git push" to push the
current branch back to update the upstream branch it forked from is now
called "upstream". The old name "tracking" is and will be
supported.</para></item>
          <item><para>"git submodule update" used to honor the
--merge/--rebase option (or corresponding configuration variables) even
for a newly cloned subproject, which made no sense
(so/submodule-no-update-first-time).</para></item>
          <item><para>gitweb's "highlight" interface mishandled
tabs.</para></item>
          <item><para>gitweb didn't understand timezones with GMT offset
that is not multiple of a whole hour.</para></item>
          <item><para>gitweb had a few forward-incompatible syntactic
constructs and also used incorrect variable when showing the file mode
in a diff.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.4" to="1.7.4.1">
        <items name="Fixes">
          <item><para>On Windows platform, the codepath to spawn a new
child process forgot to first flush the output buffer.</para></item>
          <item><para>"git bundle" did not use OFS_DELTA encoding,
making its output a few per-cent larger than necessarily.</para></item>
          <item><para>The option to tell "git clone" to recurse into the
submodules was misspelled with an underscore
"--recurse_submodules".</para></item>
          <item><para>"git diff --cached HEAD" before the first commit
does what an end user would expect (namely, show what would be committed
without further "git add").</para></item>
          <item><para>"git fast-import" didn't accept the command to ask
for "notes" feature to be present in its input stream, even though it
was capable of the feature.</para></item>
          <item><para>"git fsck" gave up scanning loose object files in
directories with garbage files.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.3.5" to="1.7.4">
        <items name="Updates">
          <item><para>The documentation Makefile now assumes by default
asciidoc 8 and docbook-xsl &gt;= 1.73. If you have older versions, you can
set ASCIIDOC7 and ASCIIDOC_ROFF, respectively.</para></item>
          <item><para>The option parsers of various commands that create
new branches (or rename existing ones to a new name) were too loose and
users were allowed to give a branch a name that begins with a dash by
creative abuse of their command line options, which only led to burning
themselves.  The name of a branch cannot begin with a dash
now.</para></item>
          <item><para>System-wide fallback default attributes can be
stored in /etc/gitattributes; the core.attributesfile configuration
variable can be used to customize the path to this file.</para></item>
          <item><para>The thread structure generated by "git send-email"
has changed slightly.  Setting the cover letter of the latest series as
a reply to the cover letter of the previous series with --in-reply-to
used to make the new cover letter and all the patches replies to the
cover letter of the previous series; this has been changed to make the
patches in the new series replies to the new cover letter.</para></item>
          <item><para>The Bash completion script in contrib/ has been
adjusted to be usable with Bash 4 (options with '=value' didn't
complete).  It has been also made usable with zsh.</para></item>
          <item><para>Different pagers can be chosen depending on which
subcommand is being run under the pager, using the
"pager.&lt;subcommand&gt;" variable.</para></item>
          <item><para>The hardcoded tab-width of 8 that is used in
whitespace breakage checks is now configurable via the attributes
mechanism.</para></item>
          <item><para>Support of case insensitive filesystems (i.e.
"core.ignorecase") has been improved.  For example, the gitignore
mechanism didn't pay attention to case insensitivity.</para></item>
          <item><para>The &lt;tree&gt;:&lt;path&gt; syntax for naming a
blob in a tree, and the :&lt;path&gt; syntax for naming a blob in the
index (e.g. "master:Makefile", ":hello.c") have been extended.  You can
start &lt;path&gt; with "./" to implicitly have the (sub)directory you
are in prefixed to the lookup.  Similarly, ":../Makefile" from a
subdirectory would mean "the Makefile of the parent directory in the
index".</para></item>
          <item><para>"git blame" learned the --show-email option to
display the e-mail addresses instead of the names of
authors.</para></item>
          <item><para>"git commit" learned the --fixup and --squash
options to help later invocation of interactive rebase.</para></item>
          <item><para>Command line options to "git cvsimport" whose
names are in capital letters (-A, -M, -R and -S) can now be specified as
the default in the .git/config file by their longer names
(cvsimport.authorsFile, cvsimport.mergeRegex, cvsimport.trackRevisions,
cvsimport.ignorePaths).</para></item>
          <item><para>"git daemon" can be built in the MinGW
environment.</para></item>
          <item><para>"git daemon" can take more than one --listen
option to listen to multiple addresses.</para></item>
          <item><para>"git describe --exact-match" was optimized not to
read commit objects unnecessarily.</para></item>
          <item><para>"git diff" and "git grep" learned what functions
and subroutines in Fortran, Pascal and Perl look like.</para></item>
          <item><para>"git fetch" learned the "--recurse-submodules"
option.</para></item>
          <item><para>"git mergetool" tells vim/gvim to show a three-way
diff by default (use vimdiff2/gvimdiff2 as the tool name for old
behavior).</para></item>
          <item><para>"git log -G&lt;pattern&gt; limits the output to
commits whose change has added or deleted lines that match the given
pattern.</para></item>
          <item><para>"git read-tree" with no argument as a way to empty
the index is deprecated; we might want to remove it in the future.
Users can use the new --empty option to be more explicit
instead.</para></item>
          <item><para>"git repack -f" does not spend cycles to
recompress objects in the non-delta representation anymore (use -F if
you really mean it e.g. after you changed the core.compression variable
setting).</para></item>
          <item><para>"git merge --log" used to limit the resulting
merge log to 20 entries; this is now customizable by giving e.g.
"--log=47".</para></item>
          <item><para>"git merge" may work better when all files were
moved out of a directory in one branch while a new file is created in
place of that directory in the other branch.</para></item>
          <item><para>"git merge" learned the "--abort" option,
synonymous to "git reset --merge" when a merge is in
progress.</para></item>
          <item><para>"git notes" learned the "merge" subcommand to
merge notes refs. In addition to the default manual conflict resolution,
there are also several notes merge strategies for automatically
resolving notes merge conflicts.</para></item>
          <item><para>"git rebase --autosquash" can use SHA-1 object
names to name the commit which is to be fixed up (e.g. "fixup!
e83c5163").</para></item>
          <item><para>The default "recursive" merge strategy learned the
--rename-threshold option to influence the rename detection, similar to
the -M option of "git diff".  From the "git merge" frontend, the
"-X&lt;strategy option&gt; interface, e.g. "git merge
-Xrename-threshold=50% ...", can be used to trigger this.</para></item>
          <item><para>The "recursive" strategy also learned to ignore
various whitespace changes; the most notable is
-Xignore-space-at-eol.</para></item>
          <item><para>"git send-email" learned "--to-cmd", similar to
"--cc-cmd", to read the recipient list from a command
output.</para></item>
          <item><para>"git send-email" learned to read and use "To:"
from its input files.</para></item>
          <item><para>you can extend "git shell", which is often used on
boxes that allow git-only login over ssh as login shell, with a custom
set of commands.</para></item>
          <item><para>The current branch name in "git status" output can
be colored differently from the generic header color by setting the
"color.status.branch" variable.</para></item>
          <item><para>"git submodule sync" updates metainformation for
all submodules, not just the ones that have been checked
out.</para></item>
          <item><para>gitweb can use a custom 'highlight' command with
its configuration file.</para></item>
          <item><para>other gitweb updates.</para></item>
          <item><para>Also contains various documentation
updates.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git log --author=me --author=her" did not find
commits written by me or by her; instead it looked for commits written
by me and by her, which is impossible.</para></item>
          <item><para>"git push --progress" shows progress indicators
now.</para></item>
          <item><para>"git rebase -i" showed a confusing error message
when given a branch name that does not exist.</para></item>
          <item><para>"git repack" places its temporary packs under
$GIT_OBJECT_DIRECTORY/pack instead of $GIT_OBJECT_DIRECTORY/ to avoid
cross directory renames.</para></item>
          <item><para>"git submodule update --recursive --other-flags"
passes flags down to its subinvocations.</para></item>
        </items>
      </change>

      <change from="1.7.3.4" to="1.7.3.5">
        <items name="Fixes">
          <item><para>The xfuncname pattern used by "git diff" and "git
grep" to show the last notable line in context were broken for python
and ruby for a long time.</para></item>
          <item><para>"git merge" into an unborn branch removed an
untracked file "foo" from the working tree when merged branch had "foo"
(this fix was already in 1.7.3.3 but was omitted from the release notes
by mistake).</para></item>
          <item><para>"git status -s" did not quote unprintable
characters in paths as documented.</para></item>
          <item><para>"git am --abort" used to always reset to the
commit at the beginning of the last "am" invocation that has stopped,
losing any unrelated commits that may have been made since then.  Now it
refrains from doing so and instead issues a warning.</para></item>
          <item><para>"git blame" incorrectly reused bogusly cached
result of textconv filter for files from the working tree.</para></item>
          <item><para>"git commit" used to abort after the user edited
the log message when the committer information was not correctly set up.
It now aborts before starting the editor.</para></item>
          <item><para>"git commit --date=invalid" used to silently
ignore the incorrectly specified date; it is now diagnosed as an
error.</para></item>
          <item><para>"git rebase --skip" to skip the last commit in a
series used to fail to run post-rewrite hook and to copy notes from old
commits that have successfully been rebased so far.  Now it do
(backmerge ef88ad2).</para></item>
          <item><para>"gitweb" tried to show a wrong feed logo when none
was specified.</para></item>
        </items>
      </change>

      <change from="1.7.3.3" to="1.7.3.4">
        <items name="Fixes">
          <item><para>Smart HTTP transport used to incorrectly retry
redirected POST request with GET request.</para></item>
          <item><para>"git apply" did not correctly handle patches that
only change modes if told to apply while stripping leading paths with -p
option.</para></item>
          <item><para>"git apply" can deal with patches with timezone
formatted with a colon between the hours and minutes part (e.g. "-08:00"
instead of "-0800").</para></item>
          <item><para>"git checkout" removed an untracked file "foo"
from the working tree when switching to a branch that contains a tracked
path "foo/bar".  Prevent this, just like the case where the conflicting
path were "foo" (c752e7f..7980872d).</para></item>
          <item><para>"git cherry-pick" or "git revert" refused to work
when a path that would be modified by the operation was stat-dirty
without a real difference in the contents of the file.</para></item>
          <item><para>"git diff --check" reported an incorrect line
number for added blank lines at the end of file.</para></item>
          <item><para>"git imap-send" failed to build under
NO_OPENSSL.</para></item>
          <item><para>Setting log.decorate configuration variable to "0"
or "1" to mean "false" or "true" did not work.</para></item>
          <item><para>"git push" over dumb HTTP protocol did not work
against WebDAV servers that did not terminate a collection name with a
slash.</para></item>
          <item><para>"git tag -v" did not work with GPG signatures in
rfc1991 mode.</para></item>
          <item><para>The post-receive-email sample hook was
accidentally broken in 1.7.3.3 update.</para></item>
          <item><para>"gitweb" can sometimes be tricked into parrotting
a filename argument given in a request without properly
quoting.</para></item>
          <item><para>Other minor fixes and documentation updates are
also included.</para></item>
        </items>
      </change>

      <change from="1.7.3.2" to="1.7.3.3">
        <items name="Updates">
          <item><para>In addition to the usual fixes, this release also
includes support for the new "add.ignoreErrors" name given to the
existing "add.ignore-errors" configuration variable.</para></item>
          <item><para>The next version, Git 1.7.4, and future versions,
will support both old and incorrect name and the new corrected name, but
without this backport, users who want to use the new name
"add.ignoreErrors" in their repositories cannot use older versions of
Git.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git apply" segfaulted when a bogus input is fed
to it.</para></item>
          <item><para>Running "git cherry-pick --ff" on a root commit
segfaulted.</para></item>
          <item><para>"diff", "blame" and friends incorrectly applied
textconv filters to symlinks.</para></item>
          <item><para>Highlighting of whitespace breakage in "diff"
output was showing incorrect amount of whitespaces when blank-at-eol is
set and the line consisted only of whitespaces and a TAB.</para></item>
          <item><para>"diff" was overly inefficient when trying to find
the line to use for the function header (i.e. equivalent to
--show-c-function of GNU diff).</para></item>
          <item><para>"git imap-send" depends on libcrypto but our build
rule relied on the linker to implicitly link it via libssl, which was
wrong.</para></item>
          <item><para>"git merge-file" can be called from within a
subdirectory now.</para></item>
          <item><para>"git repack -f" expanded and recompressed
non-delta objects in the existing pack, which was wasteful.  Use new
"-F" option if you really want to (e.g. when changing the
pack.compression level).</para></item>
          <item><para>"git rev-list --format="...%x00..." incorrectly
chopped its output at NUL.</para></item>
          <item><para>"git send-email" did not correctly remove
duplicate mail addresses from the Cc: header that appear on the To:
header.</para></item>
          <item><para>The completion script (in contrib/completion)
ignored lightweight tags in __git_ps1().</para></item>
          <item><para>"git-blame" mode (in contrib/emacs) didn't say
(require 'format-spec) even though it depends on it; it didn't work with
Emacs 22 or older unless Gnus is used.</para></item>
          <item><para>"git-p4" (in contrib/) did not correctly handle
deleted files.</para></item>
          <item><para>Other minor fixes and documentation updates are
also included.</para></item>
        </items>
      </change>

      <change from="1.7.3.1" to="1.7.3.2">
        <items name="Documentation">
          <item><para>Many accumulated documentation updates since the
last release.</para></item>
        </items>
      </change>

      <change from="1.7.3" to="1.7.3.1">
        <items name="Fixes">
          <item><para>"git stash show stash@{$n}" was accidentally
broken in 1.7.3 ("git stash show" without any argument still worked,
though).</para></item>
          <item><para>"git stash branch $branch stash@{$n}" was
accidentally broken in 1.7.3 and started dropping the named stash even
when branch creation failed.</para></item>
        </items>
      </change>

      <change from="1.7.2.3" to="1.7.3">
        <items name="Updates">
          <item><para>git-gui, now at version 0.13.0, got various
updates and a new maintainer.</para></item>
          <item><para>Gitweb allows its configuration to change per
each request; it used to read the configuration once upon
startup.</para></item>
          <item><para>When git finds a corrupt object, it now reports
the file that contains it.</para></item>
          <item><para>"git checkout -B &lt;it&gt;" is a shorter way to
say "git branch -f &lt;it&gt;" followed by "git checkout
&lt;it&gt;".</para></item>
          <item><para>When "git checkout" or "git merge" refuse to
proceed in order to protect local modification to your working tree,
they used to stop after showing just one path that might be lost.
They now show all, in a format that is easier to read.</para></item>
          <item><para>"git clean" learned "-e" ("--exclude")
option.</para></item>
          <item><para>Hunk headers produced for C# files by "git diff"
and friends show more relevant context than before.</para></item>
          <item><para>diff.ignoresubmodules configuration variable can
be used to squelch the differences in submodules reported when running
commands (e.g. "diff", "status", etc.) at the superproject
level.</para></item>
          <item><para>http.useragent configuration can be used to lie
who you are to your restrictive firewall.</para></item>
          <item><para>"git rebase --strategy &lt;s&gt;" learned "-X"
option to pass extra options that are understood by the chosen merge
strategy.</para></item>
          <item><para>"git rebase -i" learned "exec" that you can
insert into the insn sheet to run a command between its
steps.</para></item>
          <item><para>"git rebase" between branches that have many
binary changes that do not conflict should be faster.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git merge -s recursive" (which is the default)
did not handle cases where a directory becomes a file (or vice versa)
very well.</para></item>
          <item><para>"git fetch" and friends were accidentally broken
for url with "+" in its path, e.g.
"git://git.gnome.org/gtk+".</para></item>
          <item><para>"git fetch $url" (i.e. without refspecs) was
broken for quite some time, if the current branch happen to be
tracking some remote.</para></item>
          <item><para>"git ls-tree dir dirgarbage", when "dir" was a
directory, incorrectly recursed into "dir".</para></item>
          <item><para>"git note remove" created unnecessary extra
commit when named object did not have any note to begin
with.</para></item>
          <item><para>"git rebase" did not work well if you had
diff.noprefix configured.</para></item>
          <item><para>"git -c foo=bar subcmd" did not work well for
subcmd that is not implemented as a built-in command. </para></item>
        </items>
      </change>

      <change from="1.7.2.2" to="1.7.2.3">
        <items name="Fixes">
          <item><para>When people try insane things such as
delta-compressing 4GiB files, we threw an assertion
failure.</para></item>
          <item><para>"git archive" gave the full commit ID for
"$Format:%h$".</para></item>
          <item><para>"git fetch --tags" did not fetch tags when
remote.&lt;nick&gt;.tagopt was set to --no-tags.  The command line
option now overrides the configuration setting.</para></item>
          <item><para>"git for-each-ref
--format='%(objectname:short)'" has been completely broken for a long
time.</para></item>
          <item><para>"git gc" incorrectly pruned a rerere record that
was created long time ago but still is actively and repeatedly
used.</para></item>
          <item><para>"git log --follow -M -p" was seriously broken in
1.7.2, reporting assertion failure.</para></item>
          <item><para>Running "git log" with an incorrect option
started pager nevertheless, forcing the user to dismiss
it.</para></item>
          <item><para>"git rebase" did not work well when the user has
diff.renames configuration variable set.</para></item>
          <item><para>An earlier (and rather old) fix to "git rebase"
against a rebased upstream broke a more normal, non rebased upstream
case rather badly, attempting to re-apply patches that are already
accepted upstream.</para></item>
          <item><para>"git submodule sync" forgot to update the
superproject's config file when submodule URL changed.</para></item>
          <item><para>"git pack-refs --all --prune" did not remove a
directory that has become empty.</para></item>
        </items>
      </change>

      <change from="1.7.2.1" to="1.7.2.2">
        <items name="Fixes">
          <item><para>Object transfer over smart http transport
deadlocked the client when the remote HTTP server returned a failure,
instead of erroring it out.</para></item>
          <item><para>git-gui honors custom textconv filters when
showing diff and blame;</para></item>
          <item><para>git diff --relative=subdir (without the
necessary trailing /) did not work well;</para></item>
          <item><para>"git diff-files -p --submodule" was recently
broken;</para></item>
          <item><para>"git checkout -b n ':/token'" did not
work;</para></item>
          <item><para>"git index-pack" (hence "git
fetch/clone/pull/push") enabled the object replacement machinery by
mistake (it never should have);</para></item>
        </items>
      </change>

      <change from="1.7.2" to="1.7.2.1">
        <items name="Fixes">
          <item><para>"git instaweb" wasn't useful when your Apache
was installed under a name other than apache2 (e.g.
"httpd").</para></item>
          <item><para>Similarly, "git web--browse" (invoked by "git
help -w") learned that chrome browser is sometimes called
google-chrome.</para></item>
          <item><para>An overlong line after ".gitdir: " in a git file
caused out of bounds access to an array on the stack.</para></item>
          <item><para>"git config --path conf.var" to attempt to
expand a variable conf.var that uses "~/" short-hand segfaulted when
$HOME environment variable was not set.</para></item>
          <item><para>Documentation on Cygwin failed to
build.</para></item>
          <item><para>The error message from "git pull blarg" when
'blarg' is an unknown remote name has been improved.</para></item>
        </items>
      </change>

      <change from="1.7.1.2" to="1.7.2">
        <items name="Updates">
          <item><para>core.eol configuration and text/eol attributes
are the new way to control the end of line conventions for files in
the working tree.</para></item>
          <item><para>core.autocrlf has been made safer - it will now
only handle line endings for new files and files that are LF-only in
the repository. To normalize content that has been checked in with
CRLF, use the new eol/text attributes.</para></item>
          <item><para>The whitespace rules used in "git apply
--whitespace" and "git diff" gained a new member in the family
(tab-in-indent) to help projects with policy to indent only with
spaces.</para></item>
          <item><para>When working from a subdirectory, by default,
git does not look for its metadirectory ".git" across filesystems,
primarily to help people who have invocations of git in their custom
PS1 prompts, as being outside of a git repository would look for
".git" all the way up to the root directory, and NFS mounts are often
slow.  DISCOVERY_ACROSS_FILESYSTEM environment variable can be used to
tell git not to stop at a filesystem boundary.</para></item>
          <item><para>Usage help messages generated by parse-options
library (i.e. most of the Porcelain commands) are sent to the standard
output now.</para></item>
          <item><para>':/&lt;string&gt;' notation to look for a commit
now takes regular expression and it is not anchored at the beginning
of the commit log message anymore (this is a backward incompatible
change).</para></item>
          <item><para>"git" wrapper learned "-c name=value" option to
override configuration variable from the command line.</para></item>
          <item><para>Improved portability for various platforms
including older SunOS, HP-UX 10/11, AIX, Tru64, etc. and platforms
with Python 2.4.</para></item>
          <item><para>The message from "git am -3" has been improved
when conflict resolution ended up making the patch a
no-op.</para></item>
          <item><para>"git blame" applies the textconv filter to the
contents it works on, when available.</para></item>
          <item><para>"git checkout --orphan newbranch" is similar to
"-b newbranch" but prepares to create a root commit that is not
connected to any existing commit.</para></item>
          <item><para>"git cherry-pick" learned to pick a range of
commits (e.g. "cherry-pick A..B" and "cherry-pick --stdin"), so did
"git revert"; these do not support the nicer sequencing control
"rebase [-i]" has, though.</para></item>
          <item><para>"git cherry-pick" and "git revert" learned
--strategy option to specify the merge strategy to be used when
performing three-way merges.</para></item>
          <item><para>"git cvsserver" can be told to use pserver; its
password file can be stored outside the repository.</para></item>
          <item><para>The output from the textconv filter used by "git
diff" can be cached to speed up their reuse.</para></item>
          <item><para>"git diff --word-diff=&lt;mode&gt;" extends the
existing "--color-words" option, making it more useful in
color-challenged environments.</para></item>
          <item><para>The regexp to detect function headers used by
"git diff" for PHP has been enhanced for visibility modifiers (public,
protected, etc.) to better support PHP5.</para></item>
          <item><para>"diff.noprefix" configuration variable can be
used to implicitly ask for "diff --no-prefix" behaviour.</para></item>
          <item><para>"git for-each-ref" learned "%(objectname:short)"
that gives the object name abbreviated.</para></item>
          <item><para>"git format-patch" learned --signature option
and format.signature configuration variable to customize the e-mail
signature used in the output.</para></item>
          <item><para>Various options to "git grep" (e.g. --count,
--name-only) work better with binary files.</para></item>
          <item><para>"git grep" learned "-Ovi" to open the files with
hits in your editor.</para></item>
          <item><para>"git help -w" learned "chrome" and "chromium"
browsers.</para></item>
          <item><para>"git log --decorate" shows commit decorations in
various colours.</para></item>
          <item><para>"git log --follow &lt;path&gt;" follows across
copies (it used to only follow renames).  This may make the processing
more expensive.</para></item>
          <item><para>"git log --pretty=format:&lt;template&gt;"
specifier learned "% &lt;something&gt;" magic that inserts a space
only when %&lt;something&gt; expands to a non-empty string; this is
similar to "%+&lt;something&gt;" magic, but is useful in a context to
generate a single line output.</para></item>
          <item><para>"git notes prune" learned "-n" (dry-run) and
"-v" options, similar to what "git prune" has.</para></item>
          <item><para>"git patch-id" can be fed a mbox without getting
confused by the signature line in the format-patch
output.</para></item>
          <item><para>"git remote" learned "set-branches"
subcommand.</para></item>
          <item><para>"git rev-list A..B" learned --ancestry-path
option to further limit the result to the commits that are on the
ancestry chain between A and B (i.e. commits that are not descendants
of A are excluded).</para></item>
          <item><para>"git show -5" is equivalent to "git show
--do-walk 5"; this is similar to the update to make "git show
master..next" walk the history, introduced in 1.6.4.</para></item>
          <item><para>"git status [-s] --ignored" can be used to list
ignored paths.</para></item>
          <item><para>"git status -s -b" shows the current branch in
the output.</para></item>
          <item><para>"git status" learned "--ignore-submodules"
option.</para></item>
          <item><para>Various "gitweb" enhancements and clean-ups,
including syntax highlighting, "plackup" support for instaweb, .fcgi
suffix to run it as FastCGI script, etc.</para></item>
          <item><para>The test harness has been updated to produce
TAP-friendly output.</para></item>
          <item><para>Many documentation improvement patches are also
included.</para></item>
        </items>

        <items name="Fixes">
          <item><para>We didn't URL decode "file:///path/to/repo"
correctly when path/to/repo had percent-encoded characters (638794c,
9d2e942, ce83eda, 3c73a1d).</para></item>
          <item><para>"git clone" did not configure remote.origin.url
correctly for bare clones (df61c889).</para></item>
          <item><para>"git diff --graph" works better with
"--color-words" and other options (81fa024..4297c0a).</para></item>
          <item><para>"git diff" could show ambiguous abbreviation of
blob object names on its "index" line (3e5a188).</para></item>
          <item><para>"git reset --hard" started from a wrong
directory and a working tree in a nonstandard location is in use got
confused (560fb6a1).</para></item>
          <item><para>"git read-tree -m A B" used to switch to branch
B while retaining local changes added an incorrect cache-tree
information (b1f47514).</para></item>
        </items>
      </change>

      <change from="1.7.1.1" to="1.7.1.2">
        <items name="Fixes">
          <item><para>"git commit" did not honor GIT_REFLOG_ACTION
environment variable, resulting reflog messages for cherry-pick and
revert actions to be recorded as "commit".</para></item>
          <item><para>"git clone/fetch/pull" issued an incorrect error
message when a ref and a symref that points to the ref were updated at
the same time.  This obviously would update them to the same value,
and should not result in an error condition.</para></item>
          <item><para>"git diff" inside a tree with many pathnames
that have certain characters has become very slow in 1.7.0 by
mistake.</para></item>
          <item><para>"git rev-parse --parseopt --stop-at-non-option"
did not stop at non option when --keep-dashdash was in
effect.</para></item>
          <item><para>An overlong line after ".gitdir: " in a git file
caused out of bounds access to an array on the stack.</para></item>
          <item><para>"git config --path conf.var" to attempt to
expand a variable conf.var that uses "~/" short-hand segfaulted when
$HOME environment variable was not set.</para></item>
        </items>
      </change>

      <change from="1.7.1" to="1.7.1.1">
        <items name="Fixes">
          <item><para>Authentication over http transport can now be
made lazily, in that the request can first go to a URL without
username, get a 401 response and then the client will ask for the
username to use.</para></item>
          <item><para>We used to mistakenly think "../work" is a
subdirectory of the current directory when we are in
"../work-xyz".</para></item>
          <item><para>The attribute mechanism now allows an entry that
uses an attribute macro that set/unset one attribute, immediately
followed by an overriding setting; this makes attribute macros much
easier to use.</para></item>
          <item><para>We didn't recognize timezone "Z" as a synonym
for "UTC" (75b37e70).</para></item>
          <item><para>In 1.7.0, read-tree and user commands that use
the mechanism such as checkout and merge were fixed to handle
switching between branches one of which has a file while the other has
a directory at the same path correctly even when there are some
"confusing" pathnames in them.  But the algorithm used for this fix
was suboptimal and had a terrible performance degradation especially
in larger trees.</para></item>
          <item><para>"git am -3" did not show diagnosis when the
patch in the message was corrupt.</para></item>
          <item><para>After "git apply --whitespace=fix" removed
trailing blank lines in an patch in a patch series, it failed to apply
later patches that depend on the presence of such blank
lines.</para></item>
          <item><para>"git bundle --stdin" segfaulted.</para></item>
          <item><para>"git checkout" and "git rebase" overwrote paths
that are marked "assume unchanged".</para></item>
          <item><para>"git commit --amend" on a commit with an invalid
author-name line that lacks the display name didn't
work.</para></item>
          <item><para>"git describe" did not tie-break tags that point
at the same commit correctly; newer ones are preferred by paying
attention to the tagger date now.</para></item>
          <item><para>"git diff" used to tell underlying xdiff
machinery to work very hard to minimize the output, but this often was
spending too many extra cycles for very little gain.</para></item>
          <item><para>"git diff --color" did not paint extended diff
headers per line (i.e. the coloring escape sequence didn't end at the
end of line), which confused "less -R".</para></item>
          <item><para>"git fetch" over HTTP verifies the downloaded
packfiles more robustly.</para></item>
          <item><para>The memory usage by "git index-pack" (run during
"git fetch" and "git push") got leaner.</para></item>
          <item><para>"GIT_DIR=foo.git git init --bare bar.git"
created foo.git instead of bar.git.</para></item>
          <item><para>"git log --abbrev=$num --format='%h' ignored
--abbrev=$num.</para></item>
          <item><para>"git ls-files ../out/side/cwd" refused to
work.</para></item>
          <item><para>"git merge --log" used to replace the custom
message given by "-m" with the shortlog, instead of appending to
it.</para></item>
          <item><para>"git notes copy" without any other argument
segfaulted.</para></item>
          <item><para>"git pull" accepted "--dry-run", gave it to
underlying "git fetch" but ignored the option itself, resulting in a
bogus attempt to merge unrelated commit.</para></item>
          <item><para>"git rebase" did not faithfully reproduce a
malformed author ident, that is often seen in a repository converted
from foreign SCMs.</para></item>
          <item><para>"git reset --hard" started from a wrong
directory and a working tree in a nonstandard location is in use got
confused.</para></item>
          <item><para>"git send-email" lacked a way to specify the
domainname used in the EHLO/HELO exchange, causing rejected connection
from picky servers. It learned --smtp-domain option to solve this
issue.</para></item>
          <item><para>"git send-email" did not declare a
content-transfer-encoding and content-type even when its payload needs
to be sent in 8-bit.</para></item>
          <item><para>"git show -C -C" and other corner cases lost
diff metainfo output in 1.7.0.</para></item>
          <item><para>"git stash" incorrectly lost paths in the
working tree that were previously removed from the
index.</para></item>
          <item><para>"git status" stopped refreshing the index by
mistake in 1.7.1.</para></item>
          <item><para>"git status" showed excess "hints" even when
advice.statusHints is set to false.</para></item>
        </items>
      </change>

      <change from="1.7.0.7" to="1.7.1">
        <items name="Updates">
          <item><para>Eric Raymond is the maintainer of updated CIAbot
scripts, in contrib/.</para></item>
          <item><para>gitk updates.</para></item>
          <item><para>Some commands (e.g. svn and http interfaces)
that interactively ask for a password can be told to use an external
program given via GIT_ASKPASS.</para></item>
          <item><para>Conflict markers that lead the common ancestor
in diff3-style output now have a label, which hopefully would help
third-party tools that expect one.</para></item>
          <item><para>Comes with an updated bash-completion
script.</para></item>
          <item><para>"git am" learned "--keep-cr" option to handle
inputs that are a mixture of changes to files with and without CRLF
line endings.</para></item>
          <item><para>"git cvsimport" learned -R option to leave
revision mapping between CVS revisions and resulting git
commits.</para></item>
          <item><para>"git diff --submodule" notices and describes
dirty submodules.</para></item>
          <item><para>"git for-each-ref" learned %(symref),
%(symref:short) and %(flag) tokens.</para></item>
          <item><para>"git hash-object --stdin-paths" can take
"--no-filters" option now.</para></item>
          <item><para>"git init" can be told to look at
init.templatedir configuration variable (obviously that has to come
from either /etc/gitconfig or $HOME/.gitconfig).</para></item>
          <item><para>"git grep" learned "--no-index" option, to
search inside contents that are not managed by git.</para></item>
          <item><para>"git grep" learned
--color=auto/always/never.</para></item>
          <item><para>"git grep" learned to paint filename and
line-number in colors.</para></item>
          <item><para>"git log -p --first-parent -m" shows one-parent
diff for merge commits, instead of showing combined
diff.</para></item>
          <item><para>"git merge-file" learned to use custom conflict
marker size and also to use the "union merge" behaviour.</para></item>
          <item><para>"git notes" command has been rewritten in C and
learned many commands and features to help you carry notes forward
across rebases and amends.</para></item>
          <item><para>"git request-pull" identifies the commit the
request is relative to in a more readable way.</para></item>
          <item><para>"git reset" learned "--keep" option that lets
you discard commits near the tip while preserving your local changes
in a way similar to how "git checkout branch" does.</para></item>
          <item><para>"git status" notices and describes dirty
submodules.</para></item>
          <item><para>"git svn" should work better when interacting
with repositories with CRLF line endings.</para></item>
          <item><para>"git imap-send" learned to support CRAM-MD5
authentication.</para></item>
          <item><para>"gitweb" installation procedure can use
"minified" js/css files better.</para></item>
          <item><para>Various documentation updates.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git add frotz/nitfol" did not complain when the
entire frotz/ directory was ignored.</para></item>
          <item><para>"git diff --stat" used "int" to count the size
of differences, which could result in overflowing.</para></item>
          <item><para>"git rev-list --pretty=oneline" didn't terminate
a record with LF for commits without any message.</para></item>
          <item><para>"git rev-list --abbrev-commit" defaulted to
40-byte abbreviations, unlike newer tools in the git
toolset.</para></item>
        </items>
      </change>

      <change from="1.7.0.6" to="1.7.0.7">
        <items name="Fixes">
          <item><para>"make NO_CURL=NoThanks install" was
broken.</para></item>
          <item><para>An overlong line after ".gitdir: " in a git file
caused out of bounds access to an array on the stack.</para></item>
          <item><para>"git config --path conf.var" to attempt to
expand a variable conf.var that uses "~/" short-hand segfaulted when
$HOME environment variable was not set.</para></item>
        </items>
      </change>

      <change from="1.7.0.5" to="1.7.0.6">
        <items name="Updates">
          <item><para>Eric Raymond is the maintainer of updated CIAbot
scripts, in contrib/.</para></item>
          <item><para>gitk updates.</para></item>
          <item><para>Some commands (e.g. svn and http interfaces)
that interactively ask for a password can be told to use an external
program given via GIT_ASKPASS.</para></item>
          <item><para>Conflict markers that lead the common ancestor
in diff3-style output now have a label, which hopefully would help
third-party tools that expect one.</para></item>
          <item><para>Comes with an updated bash-completion
script.</para></item>
          <item><para>"git am" learned "--keep-cr" option to handle
inputs that are a mixture of changes to files with and without CRLF
line endings.</para></item>
          <item><para>"git cvsimport" learned -R option to leave
revision mapping between CVS revisions and resulting git
commits.</para></item>
          <item><para>"git diff --submodule" notices and describes
dirty submodules.</para></item>
          <item><para>"git hash-object --stdin-paths" can take
"--no-filters" option now.</para></item>
          <item><para>"git init" can be told to look at
init.templatedir configuration variable (obviously that has to come
from either /etc/gitconfig or $HOME/.gitconfig).</para></item>
          <item><para>"git grep" learned "--no-index" option, to
search inside contents that are not managed by git.</para></item>
          <item><para>"git grep" learned
--color=auto/always/never.</para></item>
          <item><para>"git grep" learned to paint filename and
line-number in colors.</para></item>
          <item><para>"git log -p --first-parent -m" shows one-parent
diff for merge commits, instead of showing combined
diff.</para></item>
          <item><para>"git merge-file" learned to use custom conflict
marker size and also to use the "union merge" behaviour.</para></item>
          <item><para>"git notes" command has been rewritten in C and
learned many commands and features to help you carry notes forward
across rebases and amends.</para></item>
          <item><para>"git request-pull" identifies the commit the
request is relative to in a more readable way.</para></item>
          <item><para>"git reset" learned "--keep" option that lets
you discard commits near the tip while preserving your local changes
in a way similar to how "git checkout branch" does.</para></item>
          <item><para>"git status" notices and describes dirty
submodules.</para></item>
          <item><para>"git svn" should work better when interacting
with repositories with CRLF line endings.</para></item>
          <item><para>"git imap-send" learned to support CRAM-MD5
authentication.</para></item>
          <item><para>"gitweb" installation procedure can use
"minified" js/css files better.</para></item>
          <item><para>Various documentation updates.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git add frotz/nitfol" did not complain when the
entire frotz/ directory was ignored.</para></item>
          <item><para>"git diff --stat" used "int" to count the size
of differences, which could result in overflowing.</para></item>
          <item><para>"git rev-list --pretty=oneline" didn't terminate
a record with LF for commits without any message.</para></item>
          <item><para>"git rev-list --abbrev-commit" defaulted to
40-byte abbreviations, unlike newer tools in the git
toolset.</para></item>
        </items>
      </change>

      <change from="1.7.0.5" to="1.7.0.6">
        <items name="Fixes">
          <item><para>"git diff --stat" used "int" to count the size
of differences, which could result in overflowing.</para></item>
          <item><para>"git rev-list --abbrev-commit" defaulted to
40-byte abbreviations, unlike newer tools in the git
toolset.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.0.4" to="1.7.0.5">
        <items name="Fixes">
          <item><para>"git daemon" failed to compile on platforms
without sockaddr_storage type.</para></item>
          <item><para>Output from "git rev-list --pretty=oneline" was
unparsable when a commit did not have any message, which is abnormal
but possible in a repository converted from foreign scm.</para></item>
          <item><para>"git stash show
&lt;commit-that-is-not-a-stash&gt;" gave an error message that was not
so useful.  Reworded the message to "&lt;it&gt; is not a
stash".</para></item>
          <item><para>Python scripts in contrib/ area now start with
"#!/usr/bin/env python" to honor user's PATH.</para></item>
          <item><para>"git imap-send" used to mistake any line that
begins with "From " as a message separator in format-patch
output.</para></item>
          <item><para>Smart http server backend failed to report an
internal server error and infinitely looped instead after output pipe
was closed.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.0.3" to="1.7.0.4">
        <items name="Fixes">
          <item><para>Optimized ntohl/htonl on big-endian machines
were broken.</para></item>
          <item><para>Color values given to
"color.&lt;cmd&gt;.&lt;slot&gt;" configuration can now have more than
one attributes (e.g. "bold ul").</para></item>
          <item><para>"git add -u nonexistent-path" did not
complain.</para></item>
          <item><para>"git apply --whitespace=fix" didn't work well
when an early patch in a patch series adds trailing blank lines and a
later one depended on such a block of blank lines at the
end.</para></item>
          <item><para>"git fast-export" didn't check error status and
stop when marks file cannot be opened.</para></item>
          <item><para>"git format-patch --ignore-if-in-upstream" gave
unwarranted errors when the range was empty, instead of silently
finishing.</para></item>
          <item><para>"git remote prune" did not detect remote
tracking refs that became dangling correctly.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.0.2" to="1.7.0.3">
        <items name="Fixes">
          <item><para>Object files are created in a more ACL friendly
way in repositories where group permission is ACL
controlled.</para></item>
          <item><para>"git add -i" didn't handle a deleted path very
well.</para></item>
          <item><para>"git blame" padded line numbers with one extra
SP when the total number of lines was one less than multiple of ten
due to an off-by-one error.</para></item>
          <item><para>"git fetch --all/--multi" used to discard
information for remotes that are fetched earlier.</para></item>
          <item><para>"git log --author=me --grep=it" tried to find
commits that have "it" or are written by "me", instead of the ones
that have "it" _and_ are written by "me".</para></item>
          <item><para>"git log -g branch" misbehaved when there was no
entries in the reflog for the named branch.</para></item>
          <item><para>"git mailinfo" (hence "git am") incorrectly
removed initial indent from paragraphs.</para></item>
          <item><para>"git prune" and "git reflog" (hence "git gc" as
well) didn't honor an instruction never to expire by setting
gc.reflogexpire to never.</para></item>
          <item><para>"git push" misbehaved when
branch.&lt;name&gt;.merge was configured without matching
branch.&lt;name&gt;.remote.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.0.1" to="1.7.0.2">
        <items name="Fixes">
          <item><para>GIT_PAGER was not honored consistently by some
scripted Porcelains, most notably "git am".</para></item>
          <item><para>updating working tree files after telling git to
add them to the index and while it is still working created garbage
object files in the repository without diagnosing it as an
error.</para></item>
          <item><para>"git bisect -- pathspec..." did not diagnose an
error condition properly when the simplification with given pathspec
made the history empty.</para></item>
          <item><para>"git rev-list --cherry-pick A...B" now has an
obvious optimization when the histories haven't diverged (i.e. when
one end is an ancestor of the other).</para></item>
          <item><para>"git diff --quiet -w" did not work as
expected.</para></item>
          <item><para>"git fast-import" didn't work with a large
input, as it lacked support for producing the pack index in v2
format.</para></item>
          <item><para>"git imap-send" didn't use CRLF line endings
over the imap protocol when storing its payload to the draft box,
violating RFC 3501.</para></item>
          <item><para>"git log --format='%w(x,y,z)%b'" and friends
that rewrap message has been optimized for utf-8
payload.</para></item>
          <item><para>Error messages generated on the receiving end
did not come back to "git push".</para></item>
          <item><para>"git status" in 1.7.0 lacked the optimization we
used to have in 1.6.X series to speed up scanning of large working
tree.</para></item>
          <item><para>"gitweb" did not diagnose parsing errors
properly while reading tis configuration file.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.7.0" to="1.7.0.1">
        <items name="Fixes">
          <item><para>In a freshly created repository "rev-parse
HEAD^0" complained that it is dangling symref, even though "rev-parse
HEAD" didn't.</para></item>
          <item><para>"git show :no-such-name" tried to access the
index without bounds check, leading to a potential
segfault.</para></item>
          <item><para>Message from "git cherry-pick" was harder to
read and use than necessary when it stopped due to conflicting
changes.</para></item>
          <item><para>We referred to ".git/refs/" throughout the
documentation when we meant to talk about abstract notion of "ref
namespace".  Because people's repositories often have packed refs
these days, this was confusing.</para></item>
          <item><para>"git diff --output=/path/that/cannot/be/written"
did not correctly error out.</para></item>
          <item><para>"git grep -e -pattern-that-begin-with-dash
paths..." could not be spelled as "git grep --
-pattern-that-begin-with-dash paths..." which would be a GNU way to
use "--" as "end of options".</para></item>
          <item><para>"git grep" compiled with threading support tried
to access an uninitialized mutex on boxes with a single
CPU.</para></item>
          <item><para>"git stash pop -q --index" failed because the
unnecessary --index option was propagated to "git stash drop" that is
internally run at the end.</para></item>
          <item><para>And other minor fixes and documentation
updates.</para></item>
        </items>
      </change>

      <change from="1.6.6" to="1.7.0">
        <items name="Behavior Changes">
          <item><para>"git push" into a branch that is currently
checked out (i.e. pointed at by HEAD in a repository that is not bare)
is refused by default.</para>
          <para>Similarly, "git push $there :$killed" to delete the
branch $killed in a remote repository $there, when $killed branch is
the current branch pointed at by its HEAD, will be refused by
default.</para>
          <para>Setting the configuration variables
receive.denyCurrentBranch and receive.denyDeleteCurrent to 'ignore' in
the receiving repository can be used to override these safety
features.</para></item>
          <item><para>"git send-email" does not make deep threads by
default when sending a patch series with more than two messages.  All
messages will be sent as a reply to the first message, i.e. cover
letter.</para>
          <para>It has been possible already to configure send-email to
send "shallow thread" by setting sendemail.chainreplyto configuration
variable to false.  The only thing this release does is to change the
default when you haven't configured that variable.</para></item>
          <item><para>"git status" is not "git commit --dry-run"
anymore.  This change does not affect you if you run the command
without argument.</para></item>
          <item><para>"git diff" traditionally treated various "ignore
whitespace" options only as a way to filter the patch output.  "git
diff --exit-code -b" exited with non-zero status even if all changes
were about changing the amount of whitespace and nothing else;  and
"git diff -b" showed the "diff --git" header line for such a change
without patch text.</para>
          <para>In this release, the "ignore whitespaces" options
affect the semantics of the diff operation.  A change that does not
affect anything but whitespaces is reported with zero exit status when
run with --exit-code, and there is no "diff --git" header for such a
change.</para></item>
          <item><para>External diff and textconv helpers are now
executed using the shell. This makes them consistent with other
programs executed by git, and allows you to pass command-line
parameters to the helpers. Any helper paths containing spaces or other
metacharacters now need to be shell-quoted.  The affected helpers are
GIT_EXTERNAL_DIFF in the environment, and diff.*.command and
diff.*.textconv in the config file.</para></item>
          <item><para>The --max-pack-size argument to 'git repack',
'git pack-objects', and 'git fast-import' was assuming the provided
size to be expressed in MiB, unlike the corresponding config variable
and other similar options accepting a size value.  It is now expecting
a size expressed in bytes, with a possible unit suffix of 'k', 'm', or
'g'.</para></item>
        </items>

        <items name="Subsystems">
          <item><para>"git fast-import" updates; adds "option" and
"feature" to detect the mismatch between fast-import and the frontends
that produce the input stream.</para></item>
          <item><para>"git svn" support of subversion "merge tickets"
and miscellaneous fixes.</para></item>
          <item><para>"gitk" and "git gui" translation
updates.</para></item>
          <item><para>"gitweb" updates (code clean-up, load checking
etc.)</para></item>
        </items>

        <items name="Portability">
          <item><para>Some more MSVC portability patches for msysgit
port.</para></item>
          <item><para>Minimum Pthreads emulation for msysgit
port.</para></item>
        </items>

        <items name="Performance">
          <item><para>More performance improvement patches for msysgit
port.</para></item>
        </items>

        <items name="Usability">
          <item><para>More commands learned "--quiet" and
"--[no-]progress" options.</para></item>
          <item><para>Various commands given by the end user (e.g.
diff.type.textconv, and GIT_EDITOR) can be specified with command line
arguments.  E.g. it is now possible to say "[diff "utf8doc"] textconv
= nkf -w".</para></item>
          <item><para>"sparse checkout" feature allows only part of
the work tree to be checked out.</para></item>
          <item><para>HTTP transfer can use authentication scheme
other than basic (i.e./e.g. digest).</para></item>
          <item><para>Switching from a version of superproject that
used to have a submodule to another version of superproject that no
longer has it did not remove the submodule directory when it should
(namely, when you are not interested in the submodule at all and
didn't clone/checkout).</para></item>
          <item><para>A new attribute conflict-marker-size can be used
to change the size of the conflict markers from the default 7; this is
useful when tracked contents (e.g. git-merge documentation) have
strings that resemble the conflict markers.</para></item>
          <item><para>A new syntax "&lt;branch&gt;@{upstream}" can be
used on the command line to substitute the name of the "upstream" of
the branch.  Missing branch defaults to the current branch, so "git
fetch &amp;&amp; git merge @{upstream}" will be equivalent to "git
pull".</para></item>
          <item><para>"git am --resolved" has a synonym "git am
--continue".</para></item>
          <item><para>"git branch --set-upstream" can be used to
update the (surprise!) upstream, i.e. where the branch is supposed to
pull and merge from (or rebase onto).</para></item>
          <item><para>"git checkout A...B" is a way to detach HEAD at
the merge base between A and B.</para></item>
          <item><para>"git checkout -m path" to reset the work tree
file back into the conflicted state works even when you already ran
"git add path" and resolved the conflicts.</para></item>
          <item><para>"git commit --date='&lt;date&gt;'" can be used
to override the author date just like "git commit
--author='&lt;name&gt; &lt;email&gt;'" can be used to override the
author identity.</para></item>
          <item><para>"git commit --no-status" can be used to omit the
listing of the index and the work tree status in the editor used to
prepare the log message.</para></item>
          <item><para>"git commit" warns a bit more aggressively until
you configure user.email, whose default value almost always is not
(and fundamentally cannot be) what you want.</para></item>
          <item><para>"git difftool" has been extended to make it
easier to integrate it with gitk.</para></item>
          <item><para>"git fetch --all" can now be used in place of
"git remote update".</para></item>
          <item><para>"git grep" does not rely on external grep
anymore.  It can use more than one thread to accelerate the
operation.</para></item>
          <item><para>"git grep" learned "--quiet"
option.</para></item>
          <item><para>"git log" and friends learned "--glob=heads/*"
syntax that is a more flexible way to complement
"--branches/--tags/--remotes".</para></item>
          <item><para>"git merge" learned to pass options specific to
strategy-backends.  E.g.</para>
          <unorderedlist>
            <item><para>"git merge -Xsubtree=path/to/directory" can
be used to tell the subtree strategy how much to shift the trees
explicitly.</para></item>
            <item><para>"git merge -Xtheirs" can be used to
auto-merge as much as possible, while discarding your own changes and
taking merged version in conflicted regions.</para></item>
          </unorderedlist></item>
          <item><para>"git push" learned "git push origin --delete
branch", a syntactic sugar for "git push origin
:branch".</para></item>
          <item><para>"git push" learned "git push --set-upstream
origin forker:forkee" that lets you configure your "forker" branch to
later pull from "forkee" branch at "origin".</para></item>
          <item><para>"git rebase --onto A...B" means the history is
replayed on top of the merge base between A and B.</para></item>
          <item><para>"git rebase -i" learned new action "fixup" that
squashes the change but does not affect existing log
message.</para></item>
          <item><para>"git rebase -i" also learned --autosquash option
that is useful together with the new "fixup" action.</para></item>
          <item><para>"git remote" learned set-url subcommand that
updates (surprise!) url for an existing remote nickname.</para></item>
          <item><para>"git rerere" learned "forget path" subcommand.
Together with "git checkout -m path" it will be useful when you
recorded a wrong resolution.</para></item>
          <item><para>Use of "git reset --merge" has become easier
when resetting away a conflicted mess left in the work
tree.</para></item>
          <item><para>"git rerere" had rerere.autoupdate configuration
but there was no way to countermand it from the command line;
--no-rerere-autoupdate option given to "merge", "revert", etc. fixes
this.</para></item>
          <item><para>"git status" learned "-s(hort)" output
format.</para></item>
        </items>

        <items name="Developers">
          <item><para>The infrastructure to build foreign SCM
interface has been updated.</para></item>
          <item><para>Many more commands are now
built-in.</para></item>
          <item><para>THREADED_DELTA_SEARCH is no more.  If you build
with threads, delta compression will always take advantage of
it.</para></item>
        </items>

        <items name="Fixes">
          <item><para>"git branch -d branch" used to refuse deleting
the branch even when the branch is fully merged to its upstream branch
if it is not merged to the current branch.  It now deletes it in such
a case.</para></item>
          <item><para>"fiter-branch" command incorrectly said
--prune-empty and --filter-commit were incompatible; the latter should
be read as --commit-filter.</para></item>
          <item><para>When using "git status" or asking "git diff" to
compare the work tree with something, they used to consider that a
checked-out submodule with uncommitted changes is not modified; this
could cause people to forget committing these changes in the submodule
before committing in the superproject. They now consider such a change
as a modification and "git diff" will append a "-dirty" to the work
tree side when generating patch output or when used with the
--submodule option.</para></item>
        </items>
      </change>

      <change from="1.6.5" to="1.6.6">
        <items name="Subsystems">
          <item><para>various gitk updates including use of themed
widgets under Tk 8.5, Japanese translation, a fix to a bug when
running "gui blame" from a subdirectory, etc.</para></item>
          <item><para>various git-gui updates including new
translations, wm states fixes, Tk bug workaround after quitting,
improved heuristics to trigger gc, etc.</para></item>
          <item><para>various git-svn updates.</para></item>
          <item><para>"git fetch" over http learned a new mode that is
different from the traditional "dumb commit walker".</para></item>
        </items>

        <items name="Partability">
          <item><para>imap-send can be built on mingw
port.</para></item>
        </items>

        <items name="Performance">
          <item><para>"git diff -B" has a smaller memory
footprint.</para></item>
        </items>

        <items name="Usability, bells and whistles">
          <item><para>The object replace mechanism can be bypassed
with --no-replace-objects global option given to the "git"
program.</para></item>
          <item><para>In configuration files, a few variables that
name paths can begin with ~/ and ~username/ and they are expanded as
expected.</para></item>
          <item><para>"git subcmd -h" now shows short usage help for
many more subcommands.</para></item>
          <item><para>"git bisect reset" can reset to an arbitrary
commit.</para></item>
          <item><para>"git checkout frotz" when there is no local
branch "frotz" but there is only one remote tracking branch "frotz" is
taken as a request to start the named branch at the corresponding
remote tracking branch.</para></item>
          <item><para>"git commit -c/-C/--amend" can be told with a
new "--reset-author" option to ignore authorship information in the
commit it is taking the message from.</para></item>
          <item><para>"git describe" can be told to add "-dirty"
suffix with "--dirty" option.</para></item>
          <item><para>"git diff" learned --submodule option to show a
list of one-line logs instead of differences between the commit object
names.</para></item>
          <item><para>"git diff" learned to honor diff.color.func
configuration to paint function name hint printed on the hunk header
"@@ -j,k +l,m @@" line in the specified color.</para></item>
          <item><para>"git fetch" learned --all and --multiple
options, to run fetch from many repositories, and --prune option to
remove remote tracking branches that went stale.  These make "git
remote update" and "git remote prune" less necessary (there is no plan
to remove "remote update" nor "remote prune", though).</para></item>
          <item><para>"git fsck" by default checks the packfiles (i.e.
"--full" is the default); you can turn it off with "git fsck
--no-full".</para></item>
          <item><para>"git grep" can use -F (fixed strings) and -i
(ignore case) together.</para></item>
          <item><para>import-tars contributed fast-import frontend
learned more types of compressed tarballs.</para></item>
          <item><para>"git instaweb" knows how to talk with mod_cgid
to apache2.</para></item>
          <item><para>"git log --decorate" shows the location of HEAD
as well.</para></item>
          <item><para>"git log" and "git rev-list" learned to take
revs and pathspecs from the standard input with the new "--stdin"
option.</para></item>
          <item><para>"--pretty=format" option to "log" family of
commands learned:</para>
          <unorderedlist>
            <item><para>to wrap text with the "%w()"
specifier.</para></item>
            <item><para>to show reflog information with "%g[sdD]"
specifier.</para></item>
          </unorderedlist></item>
          <item><para>"git notes" command to annotate existing
commits.</para></item>
          <item><para>"git merge" (and "git pull") learned --ff-only
option to make it fail if the merge does not result in a
fast-forward.</para></item>
          <item><para>"git mergetool" learned to use
p4merge.</para></item>
          <item><para>"git rebase -i" learned "reword" that acts like
"edit" but immediately starts an editor to tweak the log message
without returning control to the shell, which is done by "edit" to
give an opportunity to tweak the contents.</para></item>
          <item><para>"git send-email" can be told with
"--envelope-sender=auto" to use the same address as "From:" address as
the envelope sender address.</para></item>
          <item><para>"git send-email" will issue a warning when it
defaults to the --chain-reply-to behaviour without being told by the
user and instructs to prepare for the change of the default in 1.7.0
release.</para></item>
          <item><para>In "git submodule add &lt;repository&gt;
&lt;path&gt;", &lt;path&gt; is now optional and inferred from
&lt;repository&gt; the same way "git clone &lt;repository&gt;"
does.</para></item>
          <item><para>"git svn" learned to read SVN 1.5+ and SVK merge
tickets.</para></item>
          <item><para>"git svn" learned to recreate empty directories
tracked only by SVN.</para></item>
          <item><para>"gitweb" can optionally render its "blame"
output incrementally (this requires JavaScript on the client
side).</para></item>
          <item><para>Author names shown in gitweb output are links to
search commits by the author.</para></item>
        </items>

        <items name="Fixes since 1.6.5">
          <item><para>All of the fixes in v1.6.5.X maintenance series
are included in this release, unless otherwise noted.</para></item>
        </items>
      </change>

      <change from="1.6.5.6" to="1.6.5.7">
        <item><para>If a user specifies a color for a &lt;slot&gt;
(i.e. a class of things to show in a particular color) that is known
only by newer versions of git (e.g. "color.diff.func" was recently
added for upcoming 1.6.6 release), an older version of git should just
ignore them.  Instead we diagnosed it as an error.</para></item>
        <item><para>With help.autocorrect set to non-zero value, the
logic to guess typoes in the subcommand name misfired and ran a random
nonsense command.</para></item>
        <item><para>If a command is run with an absolute path as a
pathspec inside a bare repository, e.g. "rev-list HEAD -- /home", the
code tried to run strlen() on NULL, which is the result of
get_git_work_tree(), and segfaulted.</para></item>
      </change>

      <change from="1.6.5.5" to="1.6.5.6">
        <item><para>"git add -p" had a regression since v1.6.5.3 that
broke deletion of non-empty files.</para></item>
        <item><para>"git archive -o o.zip -- Makefile" produced an
archive in o.zip but in POSIX tar format.</para></item>
        <item><para>Error message given to "git pull --rebase" when
the user didn't give enough clue as to what branch to integrate with
still talked about "merging with" the branch.</para></item>
        <item><para>Error messages given by "git merge" when the merge
resulted in a fast-forward still were in plumbing lingo, even though
in v1.6.5 we reworded messages in other cases.</para></item>
        <item><para>The post-upload-hook run by upload-pack in
response to "git fetch" has been removed, due to security concerns
(the hook first appeared in 1.6.5).</para></item>
      </change>

      <change from="1.6.5.4" to="1.6.5.5">
        <item><para>Manual pages can be formatted with older xmlto
again.</para></item>
        <item><para>GREP_OPTIONS exported from user's environment
could have broken our scripted commands.</para></item>
        <item><para>In configuration files, a few variables that name
paths can begin with ~/ and ~username/ and they are expanded as
expected.  This is not a bugfix but 1.6.6 will have this and without
backporting users cannot easily use the same ~/.gitconfig across
versions.</para></item>
        <item><para>"git diff -B -M" did the same computation to hash
lines of contents twice, and held onto memory after it has used the
data in it unnecessarily before it freed.</para></item>
        <item><para>"git diff -B" and "git diff --dirstat" was not
counting newly added contents correctly.</para></item>
        <item><para>"git format-patch revisions... -- path" issued an
incorrect error message that suggested to use "--" on the command line
when path does not exist in the current work tree (it is a separate
matter if it makes sense to limit format-patch with pathspecs like
that without using the --full-diff option).</para></item>
        <item><para>"git grep -F -i StRiNg" did not work as
expected.</para></item>
        <item><para>Enumeration of available merge strategies iterated
over the list of commands in a wrong way, sometimes producing an
incorrect result.</para></item>
        <item><para>"git shortlog" did not honor the "encoding" header
embedded in the commit object like "git log" did.</para></item>
        <item><para>Reading progress messages that come from the
remote side while running "git pull" is given precedence over reading
the actual pack data to prevent garbled progress message on the user's
terminal.</para></item>
        <item><para>"git rebase" got confused when the log message
began with certain strings that looked like Subject:, Date: or From:
header.</para></item>
        <item><para>"git reset" accidentally run in .git/ directory
checked out the work tree contents in there.</para></item>
        <item><para>Other minor documentation updates are
included.</para></item>
      </change>

      <change from="1.6.5.3" to="1.6.5.4">
        <item><para>"git help" (without argument) used to check if you
are in a directory under git control. There was no breakage in
behaviour per-se, but this was unnecessary.</para></item>
        <item><para>"git prune-packed" gave progress output even when
its standard error is not connected to a terminal; this caused cron
jobs that run it to produce crufts.</para></item>
        <item><para>"git pack-objects --all-progress" is an option to
ask progress output from write-object phase _if_ progress output were
to be produced, and shouldn't have forced the progress
output.</para></item>
        <item><para>"git apply -p&lt;n&gt;
--directory=&lt;elsewhere&gt;" did not work well for a non-default
value of n.</para></item>
        <item><para>"git merge foo HEAD" was misparsed as an old-style
invocation of the command and produced a confusing error message.  As
it does not specify any other branch to merge, it shouldn't be
mistaken as such.  We will remove the old style "git merge
&lt;message&gt; HEAD &lt;commit&gt;..."  syntax in future versions,
but not in this release,</para></item>
        <item><para>"git merge -m &lt;message&gt; &lt;branch&gt;..."
added the standard merge message on its own after user-supplied
message, which should have overrided the standard one.</para></item>
        <item><para>Other minor documentation updates are
included.</para></item>
      </change>

      <change from="1.6.5.2" to="1.6.5.3">
        <item><para>info/grafts file didn't ignore trailing CR at the
end of lines.</para></item>
        <item><para>Packages generated on newer FC were unreadable by
older versions of RPM as the new default is to use stronger
hash.</para></item>
        <item><para>output from "git blame" was unreadable when the
file ended in an incomplete line.</para></item>
        <item><para>"git add -i/-p" didn't handle deletion of empty
files correctly.</para></item>
        <item><para>"git clone" takes up to two parameters, but did
not complain when given more arguments than necessary and silently
ignored them.</para></item>
        <item><para>"git cvsimport" did not read files given as
command line arguments correctly when it is run from a
subdirectory.</para></item>
        <item><para>"git diff --color-words -U0" didn't work
correctly.</para></item>
        <item><para>The handling of blank lines at the end of file by
"git diff/apply --whitespace" was inconsistent with the other kinds of
errors. They are now colored, warned against, and fixed the same way
as others.</para></item>
        <item><para>There was no way to allow blank lines at the end
of file without allowing extra blanks at the end of lines.  You can
use blank-at-eof and blank-at-eol whitespace error class to specify
them separately. The old trailing-space error class is now a
short-hand to set both.</para></item>
        <item><para>"-p" option to "git format-patch" was supposed to
suppress diffstat generation, but it was broken since
1.6.1.</para></item>
        <item><para>"git imap-send" did not compile cleanly with newer
OpenSSL.</para></item>
        <item><para>"git help -a" outside of a git repository was
broken.</para></item>
        <item><para>"git ls-files -i" was supposed to be inverse of
"git ls-files" without -i with respect to exclude patterns, but it was
broken since 1.6.5.2.</para></item>
        <item><para>"git ls-remote" outside of a git repository over
http was broken.</para></item>
        <item><para>"git rebase -i" gave bogus error message when the
command word was misspelled.</para></item>
        <item><para>"git receive-pack" that is run in response to "git
push" did not run garbage collection nor update-server-info, but in
larger hosting sites, these almost always need to be run.  To help
site administrators, the command now runs "gc --auto" and "u-s-i" by
setting receive.autogc and receive.updateserverinfo configuration
variables, respectively.</para></item>
        <item><para>Release notes spelled the package name with
incorrect capitalization.</para></item>
        <item><para>"gitweb" did not escape non-ascii characters
correctly in the URL.</para></item>
        <item><para>"gitweb" showed "patch" link even for merge
commits.</para></item>
        <item><para>"gitweb" showed incorrect links for blob line
numbers in pathinfo mode.</para></item>
        <item><para>Other minor documentation updates are
included.</para></item>
      </change>

      <change from="1.6.5.1" to="1.6.5.2">
        <item><para>Installation of templates triggered a bug in
busybox when using tar implementation from it.</para></item>
        <item><para>"git add -i" incorrectly ignored paths that are
already in the index if they matched .gitignore
patterns.</para></item>
        <item><para>"git describe --always" should have produced some
output even there were no tags in the repository, but it
didn't.</para></item>
        <item><para>"git ls-files" when showing tracked files
incorrectly paid attention to the exclude patterns.</para></item>
        <item><para>Other minor documentation updates are
included.</para></item>
      </change>

      <change from="1.6.5" to="1.6.5.1">
        <item><para>An corrupt pack could make codepath to read
objects into an infinite loop.</para></item>
        <item><para>Download throughput display was always shown in
KiB/s but on fast links it is more appropriate to show it in
MiB/s.</para></item>
        <item><para>"git grep -f filename" used uninitialized variable
and segfaulted.</para></item>
        <item><para>"git clone -b branch" gave a wrong commit object
name to post-checkout hook.</para></item>
        <item><para>"git pull" over http did not work on
msys.</para></item>
        <item><para>Other minor documentation updates are
included.</para></item>
      </change>

      <change from="1.6.4.4" to="1.6.5">
        <items name="Subsystems">
          <item><para>various updates to gitk, git-svn and
gitweb.</para></item>
        </items>

        <items name="Portability">
          <item><para>more improvements on mingw port.</para></item>
          <item><para>mingw will also give FRSX as the default value
for the LESS environment variable when the user does not have
one.</para></item>
          <item><para>initial support to compile git on Windows with
MSVC.</para></item>
        </items>

        <items name="Performance">
          <item><para>On major platforms, the system can be compiled
to use with Linus's block-sha1 implementation of the SHA-1 hash
algorithm, which outperforms the default fallback implementation we
borrowed from Mozilla.</para></item>
          <item><para>Unnecessary inefficiency in deepening of a
shallow repository has been removed.</para></item>
          <item><para>"git clone" does not grab objects that it does
not need (i.e. referenced only from refs outside refs/heads and
refs/tags hierarchy) anymore.</para></item>
          <item><para>The "git" main binary used to link with libcurl,
which then dragged in a large number of external libraries.  When
using basic plumbing commands in scripts, this unnecessarily slowed
things down.  We now implement http/https/ftp transfer as a separate
executable as we used to.</para></item>
          <item><para>"git clone" run locally hardlinks or copies the
files in .git/ to newly created repository.  It used to give new mtime
to copied files, but this delayed garbage collection to trigger
unnecessarily in the cloned repository.  We now preserve mtime for
these files to avoid this issue.</para></item>
        </items>

        <items name="Usability, bells and whistles">
          <item><para>Human writable date format to various options,
e.g. --since=yesterday, master@{2000.09.17}, are taught to infer some
omitted input properly.</para></item>
          <item><para>A few programs gave verbose "advice" messages to
help uninitiated people when issuing error messages.  An
infrastructure to allow users to squelch them has been introduced, and
a few such messages can be silenced now.</para></item>
          <item><para>refs/replace/ hierarchy is designed to be usable
as a replacement of the "grafts" mechanism, with the added advantage
that it can be transferred across repositories.</para></item>
          <item><para>"git am" learned to optionally ignore whitespace
differences.</para></item>
          <item><para>"git am" handles input e-mail files that has
CRLF line endings sensibly.</para></item>
          <item><para>"git am" learned "--scissors" option to allow
you to discard early part of an incoming e-mail.</para></item>
          <item><para>"git archive -o output.zip" works without being
told what format to use with an explicit
"--format=zip".option.</para></item>
          <item><para>"git checkout", "git reset" and "git stash"
learned to pick and choose to use selected changes you made, similar
to "git add -p".</para></item>
          <item><para>"git clone" learned a "-b" option to pick a HEAD
to check out different from the remote's default branch.</para></item>
          <item><para>"git clone" learned --recursive
option.</para></item>
          <item><para>"git clone" from a local repository on a
different filesystem used to copy individual object files without
preserving the old timestamp, giving them extra lifetime in the new
repository until they gc'ed.</para></item>
          <item><para>"git commit --dry-run $args" is a new
recommended way to ask "what would happen if I try to commit with
these arguments."</para></item>
          <item><para>"git commit --dry-run" and "git status" shows
conflicted paths in a separate section to make them easier to spot
during a merge.</para></item>
          <item><para>"git cvsimport" now supports password-protected
pserver access even when the password is not taken from ~/.cvspass
file.</para></item>
          <item><para>"git fast-export" learned --no-data option that
can be useful when reordering commits and trees without touching the
contents of blobs.</para></item>
          <item><para>"git fast-import" has a pair of new front-end in
contrib/ area.</para></item>
          <item><para>"git init" learned to mkdir/chdir into a
directory when given an extra argument (i.e. "git init
this").</para></item>
          <item><para>"git instaweb" optionally can use mongoose as
the web server.</para></item>
          <item><para>"git log --decorate" can optionally be told with
--decorate=full to give the reference name in full.</para></item>
          <item><para>"git merge" issued an unnecessarily scary
message when it detected that the merge may have to touch the path
that the user has local uncommitted changes to. The message has been
reworded to make it clear that the command aborted, without doing any
harm.</para></item>
          <item><para>"git push" can be told to be
--quiet.</para></item>
          <item><para>"git push" pays attention to
url.$base.pushInsteadOf and uses a URL that is derived from the URL
used for fetching.</para></item>
          <item><para>informational output from "git reset" that lists
the locally modified paths is made consistent with that of "git
checkout $another_branch".</para></item>
          <item><para>"git submodule" learned to give submodule name
to scripts run with "foreach" subcommand.</para></item>
          <item><para>various subcommands to "git submodule" learned
--recursive option.</para></item>
          <item><para>"git submodule summary" learned --files option
to compare the work tree vs the commit bound at submodule path,
instead of comparing the index.</para></item>
          <item><para>"git upload-pack", which is the server side
support for "git clone" and "git fetch", can call a new
post-upload-pack hook for statistics purposes.</para></item>
        </items>

        <items name="developers">
          <item><para>With GIT_TEST_OPTS="--root=/p/a/t/h", tests can
be run outside the source directory; using tmpfs may give faster
turnaround.</para></item>
          <item><para>With NO_PERL_MAKEMAKER set, DESTDIR= is now
honoured, so you can build for one location, and install into another
location to tar it up.</para></item>
        </items>

        <items name="Fixes since 1.6.4">
          <item><para>All of the fixes in v1.6.4.X maintenance series
are included in this release, unless otherwise noted.</para></item>
        </items>
      </change>

      <change from="1.6.4.3" to="1.6.4.4">
        <item><para>The workaround for Github server that sometimes
gave 500 (Internal server error) response to HEAD requests in 1.6.4.3
introduced a regression that caused re-fetching projects over http to
segfault in certain cases due to uninitialized pointer being
freed</para></item>
        <item><para>"git pull" on an unborn branch used to consider
anything in the work tree and the index discardable</para></item>
        <item><para>"git diff -b/w" did not work well on the
incomplete line at the end of the file, due to an incorrect hashing of
lines in the low-level xdiff routines</para></item>
        <item><para>"git checkout-index --prefix=$somewhere" used to
work when $somewhere is a symbolic link to a directory elsewhere, but
v1.6.4.2 broke it</para></item>
        <item><para>"git unpack-objects --strict", invoked when
receive.fsckobjects configuration is set in the receiving repository
of "git push", did not properly check the objects, especially the
submodule links, it received</para></item>
      </change>

      <change from="1.6.4.2" to="1.6.4.3">
        <item><para>"git clone" from an empty repository gave
unnecessary error message, even though it did everything else
correctly</para></item>
        <item><para>"git cvsserver" invoked git commands via "git-foo"
style, which has long been deprecated</para></item>
        <item><para>"git fetch" and "git clone" had an extra sanity
check to verify the presense of the corresponding *.pack file before
downloading *.idx file by issuing a HEAD request.  Github server
however sometimes gave 500 (Internal server error) response to HEAD
even if a GET request for *.pack file to the same URL would have
succeeded, and broke clone over HTTP from some of their repositories.
As a workaround, this verification has been removed (as it is not
absolutely necessary)</para></item>
        <item><para>"git grep" did not like relative pathname to refer
outside the current directory when run from a
subdirectory</para></item>
        <item><para>an error message from "git push" was formatted in
a very ugly way</para></item>
        <item><para>"git svn" did not quote the subversion user name
correctly when running its author-prog helper program</para></item>
      </change>

      <change from="1.6.4.1" to="1.6.4.2">
        <item><para>--date=relative output between 1 and 5 years ago
rounded the number of years when saying X years Y months ago, instead
of rounding it down.</para></item>
        <item><para>"git add -p" did not handle changes in executable
bits correctly (a regression around 1.6.3).</para></item>
        <item><para>"git apply" did not honor GNU diff's convention to
mark the creation/deletion event with UNIX epoch timestamp on missing
side.</para></item>
        <item><para>"git checkout" incorrectly removed files in a
directory pointed by a symbolic link during a branch switch that
replaces a directory with a symbolic link.</para></item>
        <item><para>"git clean -d -f" happily descended into a
subdirectory that is managed by a separate git repository.  It now
requires two -f options for safety.</para></item>
        <item><para>"git fetch/push" over http transports had two
rather grave bugs. </para></item>
        <item><para>"git format-patch --cover-letter" did not prepare
the cover letter file for use with non-ASCII strings when there are
the series contributors with non-ASCII names.</para></item>
        <item><para>"git pull origin branch" and "git fetch origin
&amp;&amp; git merge origin/branch" left different merge messages in
the resulting commit.</para></item>
      </change>

      <change from="1.6.4" to="1.6.4.1">
        <item><para>An unquoted value in the configuration file, when
it contains more than one whitespaces in a row, got them replaced with
a single space.</para></item>
        <item><para>"git am" used to accept a single piece of e-mail
per file (not a mbox) as its input, but multiple input format support
in v1.6.4 broke it. Apparently many people have been depending on this
feature.</para></item>
        <item><para>The short help text for "git filter-branch"
command was a single long line, wrapped by terminals, and was hard to
read.</para></item>
        <item><para>The "recursive" strategy of "git merge" segfaulted
when a merge has more than one merge-bases, and merging of these
merge-bases involves a rename/rename or a rename/add
conflict.</para></item>
        <item><para>"git pull --rebase" did not use the right fork
point when the repository has already fetched from the upstream that
rewinds the branch it is based on in an earlier fetch.</para></item>
        <item><para>Explain the concept of fast-forward more fully in
"git push" documentation, and hint to refer to it from an error
message when the command refuses an update to protect the
user.</para></item>
        <item><para>The default value for pack.deltacachesize, used by
"git repack", is now 256M, instead of unbounded.  Otherwise a repack
of a moderately sized repository would needlessly eat into
swap.</para></item>
        <item><para>Document how "git repack" (hence "git gc")
interacts with a repository that borrows its objects from other
repositories (e.g. ones created by "git clone -s").</para></item>
        <item><para>"git show" on an annotated tag lacked a delimiting
blank line between the tag itself and the contents of the object it
tags.</para></item>
        <item><para>"git verify-pack -v" erroneously reported number
of objects with too deep delta depths as "chain length 0"
objects.</para></item>
        <item><para>Long names of authors and committers outside
US-ASCII were sometimes incorrectly shown in "gitweb".</para></item>
      </change>

      <change from="1.6.3.4" to="1.6.4">
        <items name="Subsystems">
          <item><para>gitweb Perl style clean-up.</para></item>
          <item><para>git-svn updates, including a new --authors-prog
option to map author names by invoking an external program, 'git svn
reset' to unwind 'git svn fetch', support for more than one branches,
documenting of the useful --minimize-url feature, new "git svn gc"
command, etc.</para></item>
        </items>

        <items name="Portability">
          <item><para>We feed iconv with "UTF-8" instead of "utf8";
the former is understood more widely.  Similarly updated test scripts
to use encoding names more widely understood (e.g. use "ISO8859-1"
instead of "ISO-8859-1").</para></item>
          <item><para>Various portability fixes/workarounds for
different vintages of SunOS, IRIX, and Windows.</para></item>
          <item><para>Git-over-ssh transport on Windows supports PuTTY
plink and TortoisePlink.</para></item>
        </items>

        <items name="Performance">
          <item><para>Many repeated use of lstat() are optimized out
in "checkout" codepath.</para></item>
          <item><para>git-status (and underlying git-diff-index
--cached) are optimized to take advantage of cache-tree information in
the index.</para></item>
        </items>

        <items name="Usability">
          <item><para>"git add --edit" lets users edit the whole patch
text to fine-tune what is added to the index.</para></item>
          <item><para>"git am" accepts StGIT series file as its
input.</para></item>
          <item><para>"git bisect skip" skips to a more randomly
chosen place in the hope to avoid testing a commit that is too close
to a commit that is already known to be untestable.</para></item>
          <item><para>"git cvsexportcommit" learned -k option to stop
CVS keywords expansion</para></item>
          <item><para>"git fast-export" learned to handle history
simplification more gracefully.</para></item>
          <item><para>"git fast-export" learned an option
--tag-of-filtered-object to handle dangling tags resulting from
history simplification more usefully.</para></item>
          <item><para>"git grep" learned -p option to show the
location of the match using the same context hunk marker "git diff"
uses.</para></item>
          <item><para>https transport can optionally be told that the
used client certificate is password protected, in which case it asks
the password only once.</para></item>
          <item><para>"git imap-send" is IPv6 aware.</para></item>
          <item><para>"git log --graph" draws graphs more compactly by
using horizontal lines when able.</para></item>
          <item><para>"git log --decorate" shows shorter refnames by
stripping well-known refs/* prefix.</para></item>
          <item><para>"git push $name" honors remote.$name.pushurl if
present before using remote.$name.url.  In other words, the URL used
for fetching and pushing can be different.</para></item>
          <item><para>"git send-email" understands quoted aliases in
.mailrc files (might have to be backported to 1.6.3.X).</para></item>
          <item><para>"git send-email" can fetch the sender address
from the configuration variable "sendmail.from" (and
"sendmail.&lt;identity&gt;.from").</para></item>
          <item><para>"git show-branch" can color its
output.</para></item>
          <item><para>"add" and "update" subcommands to "git
submodule" learned --reference option to use local clone with
references.</para></item>
          <item><para>"git submodule update" learned --rebase option
to update checked out submodules by rebasing the local
changes.</para></item>
          <item><para>"gitweb" can optionally use gravatar to adorn
author/committer names. </para></item>
        </items>

        <items name="Developers">
          <item><para>A major part of the "git bisect" wrapper has
moved to C.</para></item>
          <item><para>Formatting with the new version of AsciiDoc
8.4.1 is now supported.</para></item>
        </items>

        <items name="Fixes since 1.6.3.4">
          <item><para>"git diff-tree -r -t" used to omit new or removed
directories from the output.  df533f3 (diff-tree -r -t: include
added/removed directories in the output, 2009-06-13) may need to be
cherry-picked to backport this fix.</para></item>
          <item><para>The way Git.pm sets up a Repository object was not
friendly to callers that chdir around.  It now internally records the
repository location as an absolute path when
autodetected.</para></item>
          <item><para>Removing a section with "git config
--remove-section", when its section header has a variable definition
on the same line, lost that variable definition.</para></item>
          <item><para>"git rebase -p --onto" used to always leave side
branches of a merge intact, even when both branches are subject to
rewriting.</para></item>
          <item><para>"git repack" used to faithfully follow grafts and
considered true parents recorded in the commit object unreachable from
the commit. After such a repacking, you cannot remove grafts without
corrupting the repository.</para></item>
          <item><para>"git send-email" did not detect erroneous loops in
alias expansion.</para></item>
        </items>
      </change>

      <change from="1.6.3.3" to="1.6.3.4">
        <item><para>"git add --no-ignore-errors" did not override
configured add.ignore-errors configuration.</para></item>
        <item><para>"git apply --whitespace=fix" did not fix trailing
whitespace on an incomplete line.</para></item>
        <item><para>"git branch" opened too many commit objects
unnecessarily.</para></item>
        <item><para>"git checkout -f $commit" with a path that is a
file (or a symlink) in the work tree to a commit that has a directory
at the path issued an unnecessary error message.</para></item>
        <item><para>"git diff -c/--cc" was very inefficient in
coalescing the removed lines shared between parents.</para></item>
        <item><para>"git diff -c/--cc" showed removed lines at the
beginning of a file incorrectly.</para></item>
        <item><para>"git remote show nickname" did not honor
configured remote.nickname.uploadpack when inspecting the branches at
the remote.</para></item>
        <item><para>"git request-pull" when talking to the terminal
for a preview showed some of the output in the pager.</para></item>
        <item><para>"git request-pull start nickname [end]" did not
honor configured remote.nickname.uploadpack when it ran git-ls-remote
against the remote repository to learn the current tip of
branches.</para></item>
      </change>

      <change from="1.6.3.2" to="1.6.3.3">
        <item><para>"git archive" running on Cygwin can get stuck in
an infinite loop.</para></item>
        <item><para>"git daemon" did not correctly parse the initial
line that carries virtual host request information.</para></item>
        <item><para>"git diff --textconv" leaked memory badly when the
textconv filter errored out.</para></item>
        <item><para>The built-in regular expressions to pick function
names to put on hunk header lines for java and objc were very
inefficiently written.</para></item>
        <item><para>in certain error situations git-fetch (and
git-clone) on Windows didn't detect connection abort and ended up
waiting indefinitely.</para></item>
        <item><para>import-tars script (in contrib) did not import
symbolic links correctly.</para></item>
        <item><para>http.c used CURLOPT_SSLKEY even on libcURL version
7.9.2, even though it was only available starting 7.9.3.</para></item>
        <item><para>low-level filelevel merge driver used return value
from strdup() without checking if we ran out of memory.</para></item>
        <item><para>"git rebase -i" left stray closing parenthesis in
its reflog message.</para></item>
        <item><para>"git remote show" did not show all the URLs
associated with the named remote, even though "git remote -v" did.
Made them consistent by making the former show all URLs.</para></item>
        <item><para>"whitespace" attribute that is set was meant to
detect all errors known to git, but it told git to ignore trailing
carriage-returns.</para></item>
      </change>

      <change from="1.6.3.1" to="1.6.3.2">
        <item><para>A few codepaths picked up the first few bytes from
an sha1[] by casting the (char *) pointer to (int *); GCC 4.4 did not
like this, and aborted compilation.</para></item>
        <item><para>Some unlink(2) failures went
undiagnosed.</para></item>
        <item><para>The "recursive" merge strategy misbehaved when
faced rename/delete conflicts while coming up with an intermediate
merge base.</para></item>
        <item><para>The low-level merge algorithm did not handle a
degenerate case of merging a file with itself using itself as the
common ancestor gracefully.  It should produce the file itself, but
instead produced an empty result.</para></item>
        <item><para>GIT_TRACE mechanism segfaulted when tracing a
shell-quoted aliases.</para></item>
        <item><para>OpenBSD also uses st_ctimspec in "struct stat",
instead of "st_ctim".</para></item>
        <item><para>With NO_CROSS_DIRECTORY_HARDLINKS, "make install"
can be told not to create hardlinks between
$(gitexecdir)/git-$builtin_commands and $(bindir)/git.</para></item>
        <item><para>command completion code in bash did not reliably
detect that we are in a bare repository.</para></item>
        <item><para>"git add ." in an empty directory complained that
pathspec "." did not match anything, which may be technically correct,
but not useful.  We silently make it a no-op now.</para></item>
        <item><para>"git add -p" (and "patch" action in "git add -i")
was broken when the first hunk that adds a line at the top was split
into two and both halves are marked to be used.</para></item>
        <item><para>"git blame path" misbehaved at the commit where
path became file from a directory with some files in it.</para></item>
        <item><para>"git for-each-ref" had a segfaulting bug when
dealing with a tag object created by an ancient git.</para></item>
        <item><para>"git format-patch -k" still added patch numbers if
format.numbered configuration was set.</para></item>
        <item><para>"git grep --color ''" did not terminate.  The
command also had subtle bugs with its -w option.</para></item>
        <item><para>http-push had a small use-after-free
bug.</para></item>
        <item><para>"git push" was converting OFS_DELTA pack
representation into less efficient REF_DELTA representation
unconditionally upon transfer, making the transferred data
unnecessarily larger.</para></item>
        <item><para>"git remote show origin" segfaulted when origin
was still empty.</para></item>
      </change>

      <change from="1.6.3" to="1.6.3.1">
        <item><para>"git checkout -b new-branch" with a staged change
in the index incorrectly primed the in-index cache-tree, resulting a
wrong tree object to be written out of the index.  This is a grave
regression since the last 1.6.2.X maintenance release.</para></item>
      </change>

      <change from="1.6.2.5" to="1.6.3">
        <items name="Updates since 1.6.2.5">
          <item><para>With the next major release, "git push" into a
branch that is currently checked out will be refused by default.  You
can choose what should happen upon such a push by setting the
configuration variable receive.denyCurrentBranch in the receiving
repository.</para></item>
          <item><para>To ease the transition plan, the receiving
repository of such a push running this release will issue a big
warning when the configuration variable is missing.  Please refer
to:</para>
          <screen>
http://git.or.cz/gitwiki/GitFaq#non-bare
  http://thread.gmane.org/gmane.comp.version-control.git/107758/focus=108007
          </screen>
          <para>for more details on the reason why this change is needed
and the transition plan.</para></item>
          <item><para>For a similar reason, "git push $there :$killed"
to delete the branch $killed in a remote repository $there, if $killed
branch is the current branch pointed at by its HEAD, gets a large
warning.  You can choose what should happen upon such a push by
setting the configuration variable receive.denyDeleteCurrent in the
receiving repository.</para></item>
          <item><para>When the user does not tell "git push" what to
push, it has always pushed matching refs.  For some people it is
unexpected, and a new configuration variable push.default has been
introduced to allow changing a different default behaviour.  To
advertise the new feature, a big warning is issued if this is not
configured and a git push without arguments is
attempted.</para></item>
        </items>

        <items name="Subsystems">
          <item><para>various git-svn updates.</para></item>
          <item><para>git-gui updates, including an update to Russian
translation, and a fix to an infinite loop when showing an empty
diff.</para></item>
          <item><para>gitk updates, including an update to Russian
translation and improved Windows support.</para></item>
        </items>

        <items name="Performance">
          <item><para>many uses of lstat(2) in the codepath for "git
checkout" have been optimized out.</para></item>
        </items>

        <items name="Usability">
          <item><para>Boolean configuration variable yes/no can be
written as on/off.</para></item>
          <item><para>rsync:/path/to/repo can be used to run git over
rsync for local repositories.  It may not be useful in practice; meant
primarily for testing.</para></item>
          <item><para>http transport learned to prompt and use
password when fetching from or pushing to http://user@host.xz/
URL.</para></item>
          <item><para>(msysgit) progress output that is sent over the
sideband protocol can be handled appropriately in Windows
console.</para></item>
          <item><para>"--pretty=&lt;style&gt;" option to the log
family of commands can now be spelled as "--format=&lt;style&gt;".  In
addition, --format=%formatstring is a short-hand for
--pretty=tformat:%formatstring.</para></item>
          <item><para>"--oneline" is a synonym for "--pretty=oneline
--abbrev-commit". </para></item>
          <item><para>"--graph" to the "git log" family can draw the
commit ancestry graph in colors.</para></item>
          <item><para>If you realize that you botched the patch when
you are editing hunks with the 'edit' action in git-add -i/-p, you can
abort the editor to tell git not to apply it.</para></item>
          <item><para>@{-1} is a new way to refer to the last branch
you were on introduced in 1.6.2, but the initial implementation did
not teach this to a few commands.  Now the syntax works with "branch
-m @{-1} newname".</para></item>
          <item><para>git-archive learned --output=&lt;file&gt;
option. </para></item>
          <item><para>git-archive takes attributes from the tree being
archived; strictly speaking, this is an incompatible behaviour change,
but is a good one. Use --worktree-attributes option to allow it to
read attributes from the work tree as before (deprecated git-tar tree
command always reads attributes from the work tree). </para></item>
          <item><para>git-bisect shows not just the number of
remaining commits whose goodness is unknown, but also shows the
estimated number of remaining rounds.</para></item>
          <item><para>You can give --date=&lt;format&gt; option to
git-blame. </para></item>
          <item><para>"git-branch -r" shows HEAD symref that points at
a remote branch in interest of each tracked remote
repository.</para></item>
          <item><para>"git-branch -v -v" is a new way to get list of
names for branches and the "upstream" branch for them.</para></item>
          <item><para>git-config learned -e option to open an editor
to edit the config file directly.</para></item>
          <item><para>git-clone runs post-checkout hook when run
without --no-checkout. </para></item>
          <item><para>git-difftool is now part of the officially
supported command, primarily maintained by David
Aguilar.</para></item>
          <item><para>git-for-each-ref learned a new "upstream"
token.</para></item>
          <item><para>git-format-patch can be told to use attachment
with a new configuration, format.attach.</para></item>
          <item><para>git-format-patch can be told to produce deep or
shallow message threads.</para></item>
          <item><para>git-format-patch can be told to always add
sign-off with a configuration variable.</para></item>
          <item><para>git-format-patch learned format.headers
configuration to add extra header fields to the output.  This
behaviour is similar to the existing --add-header=&lt;header&gt;
option of the command.</para></item>
          <item><para>git-format-patch gives human readable names to
the attached files, when told to send patches as
attachments.</para></item>
          <item><para>git-grep learned to highlight the found
substrings in color.</para></item>
          <item><para>git-imap-send learned to work around
Thunderbird's inability to easily disable format=flowed with a new
configuration, imap.preformattedHTML.</para></item>
          <item><para>git-rebase can be told to rebase the series even
if your branch is a descendant of the commit you are rebasing onto
with --force-rebase option.</para></item>
          <item><para>git-rebase can be told to report diffstat with
the --stat option.</para></item>
          <item><para>Output from git-remote command has been vastly
improved.</para></item>
          <item><para>"git remote update --prune $remote" updates from
the named remote and then prunes stale tracking
branches.</para></item>
          <item><para>git-send-email learned --confirm option to
review the Cc: list before sending the messages out.</para></item>
        </items>

        <items name="Developers">
          <item><para>Test scripts can be run under
valgrind.</para></item>
          <item><para>Test scripts can be run with installed
git.</para></item>
          <item><para>Makefile learned 'coverage' option to run the
test suites with coverage tracking enabled.</para></item>
          <item><para>Building the manpages with docbook-xsl between
1.69.1 and 1.71.1 now requires setting DOCBOOK_SUPPRESS_SP to work
around a docbook-xsl bug. This workaround used to be enabled by
default, but causes problems with newer versions of docbook-xsl.  In
addition, there are a few more knobs you can tweak to work around
issues with various versions of the docbook-xsl package.  See comments
in Documentation/Makefile for details.</para></item>
          <item><para>Support for building and testing a subset of git
on a system without a working perl has been improved.</para></item>
        </items>

        <items name="Fixes since 1.6.2.5">
          <item><para>"git-apply" rejected a patch that swaps two files
(i.e. renames A to B and B to A at the same time).  May need to be
backported by cherry picking d8c81df and then 7fac0ee).</para></item>
          <item><para>The initial checkout did not read the attributes
from the .gitattribute file that is being checked out.</para></item>
          <item><para>git-gc spent excessive amount of time to decide if
an object appears in a locally existing pack (if needed, backport by
merging 69e020a).</para></item>
        </items>
      </change>

      <change from="1.6.2.4" to="1.6.2.5">
        <item><para>"git apply" mishandled if you fed a git generated
patch that renames file A to B and file B to A at the same
time.</para></item>
        <item><para>"git diff -c -p" (and "diff --cc") did not expect
to see submodule differences and instead refused to
work.</para></item>
        <item><para>"git grep -e '('" segfaulted, instead of
diagnosing a mismatched parentheses error.</para></item>
        <item><para>"git fetch" generated packs with offset-delta
encoding when both ends of the connection are capable of producing
one; this cannot be read by ancient git and the user should be able to
disable this by setting repack.usedeltabaseoffset configuration to
false.</para></item>
      </change>

      <change from="1.6.2.3" to="1.6.2.4">
        <item><para>The configuration parser had a buffer overflow
while parsing an overlong value.</para></item>
        <item><para>pruning reflog entries that are unreachable from
the tip of the ref during "git reflog prune" (hence "git gc") was very
inefficient.</para></item>
        <item><para>"git-add -p" lacked a way to say "q"uit to refuse
staging any hunks for the remaining paths.  You had to say "d" and
then ^C.</para></item>
        <item><para>"git-checkout &lt;tree-ish&gt; &lt;submodule&gt;"
did not update the index entry at the named path; it now
does.</para></item>
        <item><para>"git-fast-export" choked when seeing a tag that
does not point at commit.</para></item>
        <item><para>"git init" segfaulted when given an overlong
template location via the --template= option.</para></item>
        <item><para>"git-ls-tree" and "git-diff-tree" used a pathspec
correctly when deciding to descend into a subdirectory but they did
not match the individual paths correctly.  This caused pathspecs
"abc/d ab" to match "abc/0" ("abc/d" made them decide to descend into
the directory "abc/", and then "ab" incorrectly matched "abc/0" when
it shouldn't).</para></item>
        <item><para>"git-merge-recursive" was broken when a submodule
entry was involved in a criss-cross merge situation.</para></item>
      </change>

      <change from="1.6.2.2" to="1.6.2.3">
        <item><para>Setting an octal mode value to
core.sharedrepository configuration to restrict access to the
repository to group members did not work as advertised.</para></item>
        <item><para>A fairly large and trivial memory leak while
rev-list shows list of reachable objects has been identified and
plugged.</para></item>
        <item><para>"git-commit --interactive" did not abort when
underlying "git-add -i" signaled a failure.</para></item>
        <item><para>git-repack (invoked from git-gc) did not work as
nicely as it should in a repository that borrows objects from
neighbours via alternates mechanism especially when some packs are
marked with the ".keep" flag to prevent them from being
repacked.</para></item>
      </change>

      <change from="1.6.2.1" to="1.6.2.2">
        <item><para>A longstanding confusing description of what
--pickaxe option of git-diff does has been clarified in the
documentation.</para></item>
        <item><para>"git-blame -S" did not quite work near the commits
that were given on the command line correctly.</para></item>
        <item><para>"git diff --pickaxe-regexp" did not count
overlapping matches correctly.</para></item>
        <item><para>"git diff" did not feed files in work-tree
representation to external diff and textconv.</para></item>
        <item><para>"git-fetch" in a repository that was not cloned
from anywhere said it cannot find 'origin', which was hard to
understand for new people.</para></item>
        <item><para>"git-format-patch --numbered-files --stdout" did
not have to die of incompatible options; it now simply ignores
--numbered-files as no files are produced anyway.</para></item>
        <item><para>"git-ls-files --deleted" did not work well with
GIT_DIR&amp;GIT_WORK_TREE.</para></item>
        <item><para>"git-read-tree A B C..." without -m option has
been broken for a long time.</para></item>
        <item><para>git-send-email ignored --in-reply-to when
--no-thread was given.</para></item>
        <item><para>'git-submodule add' did not tolerate extra slashes
and ./ in the path it accepted from the command line; it now is more
lenient.</para></item>
        <item><para>git-svn misbehaved when the project contained a
path that began with two dashes.</para></item>
        <item><para>import-zips script (in contrib) did not compute
the common directory prefix correctly.</para></item>
        <item><para>miscompilation of negated enum constants by old
gcc (2.9) affected the codepaths to spawn subprocesses.</para></item>
      </change>

      <change from="1.6.2" to="1.6.2.1">
        <item><para>.gitignore learned to handle backslash as a
quoting mechanism for comment introduction character
"#".</para></item>
        <item><para>timestamp output in --date=relative mode used to
display timestamps that are long time ago in the default mode; it now
uses "N years M months ago", and "N years ago".</para></item>
        <item><para>git-add -i/-p now works with non-ASCII
pathnames.</para></item>
        <item><para>"git hash-object -w" did not read from the
configuration file from the correct .git directory.</para></item>
        <item><para>git-send-email learned to correctly handle
multiple Cc: addresses.</para></item>
      </change>

      <change from="1.6.1.3" to="1.6.2">
        <items name="Subsystems">
          <item><para>git-svn updates</para></item>
          <item><para>gitweb updates, including a new patch view and
RSS/Atom feed improvements</para></item>
          <item><para>(contrib/emacs) git.el now has commands for
checking out a branch, creating a branch, cherry-picking and reverting
commits; vc-git.el is not shipped with git anymore (it is part of
official Emacs)</para></item>
        </items>

        <items name="Performance">
          <item><para>pack-objects autodetects the number of CPUs
available and uses threaded version</para></item>
        </items>

        <items name="Usability">
          <item><para>automatic typo correction works on aliases as
well</para></item>
          <item><para>@{-1} is a way to refer to the last branch you
were on.  This is accepted not only where an object name is expected,
but anywhere a branch name is expected and acts as if you typed the
branch name. E.g. "git branch --track mybranch @{-1}", "git merge
@{-1}", and "git rev-parse --symbolic-full-name @{-1}" would work as
expected.</para></item>
          <item><para>When refs/remotes/origin/HEAD points at a remote
tracking branch that has been pruned away, many git operations issued
warning when they internally enumerated the refs.  We now warn only
when you say "origin" to refer to that pruned branch.</para></item>
          <item><para>The location of .mailmap file can be configured,
and its file format was enhanced to allow mapping an incorrect e-mail
field as well</para></item>
          <item><para>"git add -p" learned 'g'oto action to jump
directly to a hunk</para></item>
          <item><para>"git add -p" learned to find a hunk with given
text with '/'</para></item>
          <item><para>"git add -p" optionally can be told to work with
just the command letter without Enter</para></item>
          <item><para>when "git am" stops upon a patch that does not
apply, it shows the title of the offending patch</para></item>
          <item><para>"git am --directory=&lt;dir&gt;" and "git am
--reject" passes these options to underlying "git apply"</para></item>
          <item><para>"git am" learned --ignore-date
option</para></item>
          <item><para>"git blame" aligns author names better when they
are spelled in non US-ASCII encoding</para></item>
          <item><para>"git clone" now makes its best effort when
cloning from an empty repository to set up configuration variables to
refer to the remote repository</para></item>
          <item><para>"git checkout -" is a shorthand for "git
checkout @{-1}"</para></item>
          <item><para>"git cherry" defaults to whatever the current
branch is tracking (if exists) when the &lt;upstream&gt; argument is
not given</para></item>
          <item><para>"git cvsserver" can be told not to add extra
"via git-CVS emulator" to the commit log message it serves via
gitcvs.commitmsgannotation configuration</para></item>
          <item><para>"git cvsserver" learned to handle 'noop' command
some CVS clients seem to expect to work</para></item>
          <item><para>"git diff" learned a new option
--inter-hunk-context to coalesce close hunks together and show context
between them</para></item>
          <item><para>The definition of what constitutes a word for
"git diff --color-words" can be customized via gitattributes, command
line or a configuration</para></item>
          <item><para>"git diff" learned --patience to run "patience
diff" algorithm</para></item>
          <item><para>"git filter-branch" learned --prune-empty option
that discards commits that do not change the contents</para></item>
          <item><para>"git fsck" now checks loose objects in alternate
object stores, instead of misreporting them as missing</para></item>
          <item><para>"git gc --prune" was resurrected to allow "git
gc --no-prune" and giving non-default expiration period e.g. "git gc
--prune=now"</para></item>
          <item><para>"git grep -w" and "git grep" for fixed strings
have been optimized</para></item>
          <item><para>"git mergetool" learned -y(--no-prompt) option
to disable prompting</para></item>
          <item><para>"git rebase -i" can transplant a history down to
root to elsewhere with --root option</para></item>
          <item><para>"git reset --merge" is a new mode that works
similar to the way "git checkout" switches branches, taking the local
changes while switching to another commit.</para></item>
          <item><para>"git submodule update" learned --no-fetch
option</para></item>
          <item><para>"git tag" learned --contains that works the same
way as the same option from "git branch"</para></item>
        </items>
      </change>

      <change from="1.6.1.2" to="1.6.1.3">
        <item><para>"git diff --binary | git apply" pipeline did not
work well when a binary blob is changed to a symbolic
link</para></item>
        <item><para>Some combinations of -b/-w/--ignore-space-at-eol
to "git diff" did not work as expected</para></item>
        <item><para>"git grep" did not pass the -I (ignore binary)
option when calling out an external grep program</para></item>
        <item><para>"git log" and friends include HEAD to the set of
starting points when --all is given.  This makes a difference when you
are not on any branch.</para></item>
        <item><para>"git mv" to move an untracked file to overwrite a
tracked contents misbehaved</para></item>
        <item><para>"git merge -s octopus" with many potential merge
bases did not work correctly</para></item>
        <item><para>RPM binary package installed the html manpages in
a wrong place</para></item>
      </change>

      <change from="1.6.1.1" to="1.6.1.2">
        <item><para>The logic for rename detectin in internal diff
used by commands like "git diff" and "git blame" have been optimized
to avoid loading the same blob repeatedly</para></item>
        <item><para>We did not allow writing out a blob that is larger
than 2GB for no good reason</para></item>
        <item><para>"git format-patch -o $dir", when $dir is a
relative directory, used it as relative to the root of the work tree,
not relative to the current directory</para></item>
        <item><para>v1.6.1 introduced an optimization for "git push"
into a repository (A) that borrows its objects from another repository
(B) to avoid sending objects that are available in repository B, when
they are not yet used by repository A.  However the code on the "git
push" sender side was buggy and did not work when repository B had new
objects that are not known by the sender.  This caused pushing into a
"forked" repository served by v0.6.1 software using "git push" from
v1.6.1 sometimes did not work.  The bug was purely on the "git push"
sender side, and has been corrected.</para></item>
        <item><para>"git status -v" did not paint its diff output in
colour even when color.ui configuration was set</para></item>
        <item><para>"git ls-tree" learned --full-tree option to help
Porcelain scripts that want to always see the full path regardless of
the current working directory</para></item>
        <item><para>"git grep" incorrectly searched in work tree paths
even when they are marked as assume-unchanged.  It now searches in the
index entries.</para></item>
        <item><para>"git gc" with no grace period needlessly ejected
packed but unreachable objects in their loose form, only to delete
them right away</para></item>
      </change>

      <change from="1.6.1" to="1.6.1.1">
        <item><para>"git add frotz/nitfol" when "frotz" is a submodule
should have errored out, but it didn't</para></item>
        <item><para>"git apply" took file modes from the patch text
and updated the mode bits of the target tree even when the patch was
not about mode changes</para></item>
        <item><para>"git bisect view" on Cygwin did not launch
gitk</para></item>
        <item><para>"git checkout $tree" did not trigger an
error</para></item>
        <item><para>"git commit" tried to remove COMMIT_EDITMSG from
the work tree by mistake</para></item>
        <item><para>"git describe --all" complained when a commit is
described with a tag, which was nonsense</para></item>
        <item><para>"git diff --no-index --" did not trigger no-index
(aka "use git-diff as a replacement of diff on untracked files")
behaviour</para></item>
        <item><para>"git format-patch -1 HEAD" on a root commit failed
to produce patch text</para></item>
        <item><para>"git fsck branch" did not work as advertised;
instead it behaved the same way as "git fsck"</para></item>
        <item><para>"git log --pretty=format:%s" did not handle a
multi-line subject the same way as built-in log listers (i.e.
shortlog, --pretty=oneline, etc.)</para></item>
        <item><para>"git daemon", and "git merge-file" are more
careful when freopen fails and barf, instead of going on and writing
to unopened filehandle</para></item>
        <item><para>"git http-push" did not like some RFC 4918
compliant DAV server responses</para></item>
        <item><para>"git merge -s recursive" mistakenly overwritten an
untracked file in the work tree upon delete/modify
conflict</para></item>
        <item><para>"git merge -s recursive" didn't leave the index
unmerged for entries with rename/delete conflicted</para></item>
        <item><para>"git merge -s recursive" clobbered untracked files
in the work tree</para></item>
        <item><para>"git mv -k" with more than one errorneous paths
misbehaved</para></item>
        <item><para>"git read-tree -m -u" hence branch switching
incorrectly lost a subdirectory in rare cases</para></item>
        <item><para>"git rebase -i" issued an unnecessary error
message upon a user error of marking the first commit to be
"squash"ed.</para></item>
        <item><para>"git shortlog" did not format a commit message
with multi-line subject correctly.</para></item>
      </change>

      <change from="1.6.0" to="1.6.1">
        <items name="Updates since v1.6.0">
          <item><para>When some commands (e.g. "git log", "git diff")
spawn pager internally, we used to make the pager the parent process
of the git command that produces output.  This meant that the exit
status of the whole thing comes from the pager, not the underlying git
command.  We swapped the order of the processes around and you will
see the exit code from the command from now on.</para></item>
          <item><para>gitk can call out to git-gui to view "git blame"
output; git-gui in turn can run gitk from its blame
view.</para></item>
          <item><para>Various git-gui updates including updated
translations.</para></item>
          <item><para>Various gitweb updates from repo.or.cz
installation.</para></item>
          <item><para>Updates to emacs bindings.</para></item>
          <item><para>* A few test scripts used nonportable "grep"
that did not work well on some platforms, e.g. Solaris.</para></item>
          <item><para>Sample pre-auto-gc script has OS X
support.</para></item>
          <item><para>Makefile has support for (ancient) FreeBSD
4.9.</para></item>
          <item><para>Many operations that are lstat(3) heavy can be
told to pre-execute necessary lstat(3) in parallel before their main
operations, which potentially gives much improved performance for
cold-cache cases or in environments with weak metadata caching (e.g.
NFS).</para></item>
          <item><para>The underlying diff machinery to produce textual
output has been optimized, which would result in faster "git blame"
processing.</para></item>
          <item><para>Most of the test scripts (but not the ones that
try to run servers) can be run in parallel.</para></item>
          <item><para>Bash completion of refnames in a repository with
massive number of refs has been optimized.</para></item>
          <item><para>Cygwin port uses native stat/lstat
implementations when applicable, which leads to improved
performance.</para></item>
          <item><para>"git push" pays attention to alternate
repositories to avoid sending unnecessary objects.</para></item>
          <item><para>"git svn" can rebuild an out-of-date rev_map
file.</para></item>
          <item><para>When you mistype a command name, git helpfully
suggests what it guesses you might have meant to say.
help.autocorrect configuration can be set to a non-zero value to
accept the suggestion when git can uniquely guess.</para></item>
          <item><para>The packfile machinery hopefully is more robust
when dealing with corrupt packs if redundant objects involved in the
corruption are available elsewhere.</para></item>
          <item><para>"git add -N path..." adds the named paths as an
empty blob, so that subsequent "git diff" will show a diff as if they
are creation events.</para></item>
          <item><para>"git add" gained a built-in synonym for people
who want to say "stage changes" instead of "add contents to the
staging area" which amounts to the same thing.</para></item>
          <item><para>"git apply" learned --include=paths option,
similar to the existing --exclude=paths option.</para></item>
          <item><para>"git bisect" is careful about a user mistake and
suggests testing of merge base first when good is not a strict
ancestor of bad.</para></item>
          <item><para>"git bisect skip" can take a range of
commits.</para></item>
          <item><para>"git blame" re-encodes the commit metainfo to
UTF-8 from i18n.commitEncoding by default.</para></item>
          <item><para>"git check-attr --stdin" can check attributes
for multiple paths.</para></item>
          <item><para>"git checkout --track origin/hack" used to be a
syntax error.  It now DWIMs to create a corresponding local branch
"hack", i.e. acts as if you said "git checkout --track -b hack
origin/hack".</para></item>
          <item><para>"git checkout --ours/--theirs" can be used to
check out one side of a conflicting merge during conflict
resolution.</para></item>
          <item><para>"git checkout -m" can be used to recreate the
initial conflicted state during conflict resolution.</para></item>
          <item><para>"git cherry-pick" can also utilize rerere for
conflict resolution.</para></item>
          <item><para>"git clone" learned to be verbose with
-v</para></item>
          <item><para>"git commit --author=$name" can look up author
name from existing commits.</para></item>
          <item><para>output from "git commit" has been reworded in a
more concise and yet more informative way.</para></item>
          <item><para>"git count-objects" reports the on-disk
footprint for packfiles and their corresponding idx
files.</para></item>
          <item><para>"git daemon" learned
--max-connections=&lt;count&gt; option.</para></item>
          <item><para>"git daemon" exports REMOTE_ADDR to record
client address, so that spawned programs can act differently on
it.</para></item>
          <item><para>"git describe --tags" favours closer lightweight
tags than farther annotated tags now.</para></item>
          <item><para>"git diff" learned to mimic
--suppress-blank-empty from GNU diff via a configuration
option.</para></item>
          <item><para>"git diff" learned to put more sensible hunk
headers for Python, HTML and ObjC contents.</para></item>
          <item><para>"git diff" learned to vary the a/ vs b/ prefix
depending on what are being compared, controlled by
diff.mnemonicprefix configuration.</para></item>
          <item><para>"git diff" learned --dirstat-by-file to count
changed files, not number of lines, when summarizing the global
picture.</para></item>
          <item><para>"git diff" learned "textconv" filters --- a
binary or hard-to-read contents can be munged into human readable form
and the difference between the results of the conversion can be viewed
(obviously this cannot produce a patch that can be applied, so this is
disabled in format-patch among other things).</para></item>
          <item><para>"--cached" option to "git diff" has an easier to
remember synonym "--staged", to ask "what is the difference between
the given commit and the contents staged in the index?"</para></item>
          <item><para>"git for-each-ref" learned "refname:short" token
that gives an unambiguously abbreviated refname.</para></item>
          <item><para>Auto-numbering of the subject lines is the
default for "git format-patch" now.</para></item>
          <item><para>"git grep" learned to accept -z similar to GNU
grep.</para></item>
          <item><para>"git help" learned to use GIT_MAN_VIEWER
environment variable before using "man" program.</para></item>
          <item><para>"git imap-send" can optionally talk
SSL.</para></item>
          <item><para>"git index-pack" is more careful against disk
corruption while completing a thin pack.</para></item>
          <item><para>"git log --check" and "git log --exit-code"
passes their underlying diff status with their exit status
code.</para></item>
          <item><para>"git log" learned --simplify-merges, a milder
variant of --full-history; "gitk --simplify-merges" is easier to view
than with --full-history.</para></item>
          <item><para>"git log" learned "--source" to show what ref
each commit was reached from.</para></item>
          <item><para>"git log" also learned
"--simplify-by-decoration" to show the birds-eye-view of the topology
of the history.</para></item>
          <item><para>"git log --pretty=format:" learned "%d" format
element that inserts names of tags that point at the
commit.</para></item>
          <item><para>"git merge --squash" and "git merge --no-ff"
into an unborn branch are noticed as user errors.</para></item>
          <item><para>"git merge -s $strategy" can use a custom built
strategy if you have a command "git-merge-$strategy" on your
$PATH.</para></item>
          <item><para>"git pull" (and "git fetch") can be told to
operate "-v"erbosely or "-q"uietly.</para></item>
          <item><para>"git push" can be told to reject deletion of
refs with receive.denyDeletes configuration.</para></item>
          <item><para>"git rebase" honours pre-rebase hook; use
--no-verify to bypass it.</para></item>
          <item><para>"git rebase -p" uses interactive rebase
machinery now to preserve the merges.</para></item>
          <item><para>"git reflog expire branch" can be used in place
of "git reflog expire refs/heads/branch".</para></item>
          <item><para>"git remote show $remote" lists remote branches
one-per-line now.</para></item>
          <item><para>"git send-email" can be given revision range
instead of files and maildirs on the command line, and automatically
runs format-patch to generate patches for the given revision
range.</para></item>
          <item><para>"git submodule foreach" subcommand allows you to
iterate over checked out submodules.</para></item>
          <item><para>"git submodule sync" subcommands allows you to
update the origin URL recorded in submodule directories from the
toplevel .gitmodules file.</para></item>
          <item><para>"git svn branch" can create new branches on the
other end.</para></item>
          <item><para>"gitweb" can use more saner PATH_INFO based
URL.</para></item>
          <item><para>"git hash-object" learned to lie about the path
being hashed, so that correct gitattributes processing can be done
while hashing contents stored in a temporary file.</para></item>
          <item><para>various callers of git-merge-recursive avoid
forking it as an external process.</para></item>
          <item><para>Git class defined in "Git.pm" can be subclasses
a bit more easily.</para></item>
          <item><para>We used to link GNU regex library as a
compatibility layer for some platforms, but it turns out it is not
necessary on most of them.</para></item>
          <item><para>Some path handling routines used fixed number of
buffers used alternately but depending on the call depth, this
arrangement led to hard to track bugs.  This issue is being
addressed.</para></item>
        </items>

        <items name="Fixes since v1.6.0">
          <item><para>Porcelains implemented as shell scripts were
utterly confused when you entered to a subdirectory of a work tree
from sideways, following a symbolic link (this may need to be
backported to older releases later).</para></item>
          <item><para>Tracking symbolic links would work better on
filesystems whose lstat() returns incorrect st_size value for
them.</para></item>
          <item><para>"git add" and "git update-index" incorrectly
allowed adding S/F when S is a tracked symlink that points at a
directory D that has a path F in it (we still need to fix a similar
nonsense when S is a submodule and F is a path in it).</para></item>
          <item><para>"git am" after stopping at a broken patch lost
--whitespace, -C, -p and --3way options given from the command line
initially.</para></item>
          <item><para>"git diff --stdin" used to take two trees on a
line and compared them, but we dropped support for such a use case
long time ago.  This has been resurrected.</para></item>
          <item><para>"git filter-branch" failed to rewrite a tag name
with slashes in it.</para></item>
          <item><para>"git http-push" did not understand URI scheme
other than opaquelocktoken when acquiring a lock from the server (this
may need to be backported to older releases later).</para></item>
          <item><para>After "git rebase -p" stopped with conflicts
while replaying a merge, "git rebase --continue" did not work (may
need to be backported to older releases).</para></item>
          <item><para>"git revert" records relative to which parent a
revert was made when reverting a merge.  Together with new
documentation that explains issues around reverting a merge and
merging from the updated branch later, this hopefully will reduce user
confusion (this may need to be backported to older releases
later).</para></item>
          <item><para>"git rm --cached" used to allow an empty blob
that was added earlier to be removed without --force, even when the
file in the work tree has since been modified.</para></item>
          <item><para>"git push --tags --all $there" failed with
generic usage message without telling saying these two options are
incompatible.</para></item>
          <item><para>"git log --author/--committer" match used to
potentially match the timestamp part, exposing internal implementation
detail.  Also these did not work with --fixed-strings match at
all.</para></item>
          <item><para>"gitweb" did not mark non-ASCII characters
imported from external HTML fragments correctly.</para></item>
        </items>
      </change>

      <change from="1.5.x" to="1.6.x">
        <items name="User visible changes">
          <item><para>With the default Makefile settings, most of the
programs are now installed outside your $PATH, except for "git",
"gitk" and some server side programs that need to be accessible for
technical reasons.  Invoking a git subcommand as "git-xyzzy" from the
command line has been deprecated since early 2006 (and officially
announced in 1.5.4 release notes); use of them from your scripts after
adding output from "git --exec-path" to the $PATH is still supported
in this release, but users are again strongly encouraged to adjust
their scripts to use "git xyzzy" form, as we will stop installing
"git-xyzzy" hardlinks for built-in commands in later
releases.</para></item>
          <item><para>An earlier change to page "git status" output
was overwhelmingly unpopular and has been reverted.</para></item>
          <item><para>Source changes needed for porting to MinGW
environment are now all in the main git.git codebase.</para></item>
          <item><para>By default, packfiles created with this version
uses delta-base-offset encoding introduced in v1.4.4.  Pack idx files
are using version 2 that allows larger packs and added robustness
thanks to its CRC checking, introduced in v1.5.2 and v1.4.4.5.  If you
want to keep your repositories backwards compatible past these
versions, set repack.useDeltaBaseOffset to false or pack.indexVersion
to 1, respectively.</para></item>
          <item><para>We used to prevent sample hook scripts shipped
in templates/ from triggering by default by relying on the fact that
we install them as unexecutable, but on some filesystems, this
approach does not work. They are now shipped with ".sample" suffix.
If you want to activate any of these samples as-is, rename them to
drop the ".sample" suffix, instead of running "chmod +x" on them.  For
example, you can rename hooks/post-update.sample to hooks/post-update
to enable the sample hook that runs update-server-info, in order to
make repositories friendly to dumb protocols (i.e.
HTTP).</para></item>
          <item><para>GIT_CONFIG, which was only documented as
affecting "git config", but actually affected all git commands, now
only affects "git config". GIT_LOCAL_CONFIG, also only documented as
affecting "git config" and not different from GIT_CONFIG in a useful
way, is removed.</para></item>
          <item><para>The ".dotest" temporary area "git am" and "git
rebase" use is now moved inside the $GIT_DIR, to avoid mistakes of
adding it to the project by accident.</para></item>
          <item><para>An ancient merge strategy "stupid" has been
removed.</para></item>
        </items>

        <items name="Updates since v1.5.6">
          <item><para>git-p4 in contrib learned "allowSubmit"
configuration to control on which branch to allow "submit"
subcommand.</para></item>
          <item><para>git-gui learned to stage changes
per-line.</para></item>
          <item><para>Changes for MinGW port have been
merged.</para></item>
          <item><para>Sample hook scripts shipped in templates/ are
now suffixed with *.sample.</para></item>
          <item><para>perl's in-place edit (-i) does not work well
without backup files on Windows; some tests are rewritten to cope with
this.</para></item>
          <item><para>Updated howto/update-hook-example</para></item>
          <item><para>Got rid of usage of "git-foo" from the tutorial
and made typography more consistent.</para></item>
          <item><para>Disambiguating "--" between revs and paths is
finally documented.</para></item>
          <item><para>index-pack used too much memory when dealing
with a deep delta chain. This has been optimized.</para></item>
          <item><para>reduced excessive inlining to shrink size of the
"git" binary.</para></item>
          <item><para>verify-pack checks the object CRC when using
version 2 idx files.</para></item>
          <item><para>When an object is corrupt in a pack, the object
became unusable even when the same object is available in a loose
form,  We now try harder to fall back to these redundant objects when
able.  In particular, "git repack -a -f" can be used to fix such a
corruption as long as necessary objects are available.</para></item>
          <item><para>Performance of "git-blame -C -C" operation is
vastly improved.</para></item>
          <item><para>git-clone does not create refs in loose form
anymore (it behaves as if you immediately ran git-pack-refs after
cloning).  This will help repositories with insanely large number of
refs.</para></item>
          <item><para>core.fsyncobjectfiles configuration can be used
to ensure that the loose objects created will be fsync'ed (this is
only useful on filesystems that does not order data writes
properly).</para></item>
          <item><para>"git commit-tree" plumbing can make Octopus with
more than 16 parents. "git commit" has been capable of this for quite
some time.</para></item>
          <item><para>even more documentation pages are now accessible
via "man" and "git help".</para></item>
          <item><para>A new environment variable
GIT_CEILING_DIRECTORIES can be used to stop the discovery process of
the toplevel of working tree; this may be useful when you are working
in a slow network disk and are outside any working tree, as
bash-completion and "git help" may still need to run in these
places.</para></item>
          <item><para>By default, stash entries never expire.  Set
reflogexpire in [gc "refs/stash"] to a reasonable value to get
traditional auto-expiration behaviour back</para></item>
          <item><para>Longstanding latency issue with bash completion
script has been addressed.  This will need to be backmerged to 'maint'
later.</para></item>
          <item><para>pager.&lt;cmd&gt; configuration variable can be used
to enable/disable the default paging behaviour per
command.</para></item>
          <item><para>"git-add -i" has a new action 'e/dit' to allow
you edit the patch hunk manually.</para></item>
          <item><para>git-am records the original tip of the branch in
ORIG_HEAD before it starts applying patches.</para></item>
          <item><para>git-apply can handle a patch that touches the
same path more than once much better than before.</para></item>
          <item><para>git-apply can be told not to trust the line
counts recorded in the input patch but recount, with the new --recount
option.</para></item>
          <item><para>git-apply can be told to apply a patch to a path
deeper than what the patch records with --directory
option.</para></item>
          <item><para>git-archive can be told to omit certain paths
from its output using export-ignore attributes.</para></item>
          <item><para>git-archive uses the zlib default compression
level when creating zip archive.</para></item>
          <item><para>git-archive's command line options --exec and
--remote can take their parameters as separate command line arguments,
similar to other commands. IOW, both "--exec=path" and "--exec path"
are now supported.</para></item>
          <item><para>With -v option, git-branch describes the remote
tracking statistics similar to the way git-checkout reports by how
many commits your branch is ahead/behind.</para></item>
          <item><para>git-branch's --contains option used to always
require a commit parameter to limit the branches with; it now defaults
to list branches that contains HEAD if this parameter is
omitted.</para></item>
          <item><para>git-branch's --merged and --no-merged option
used to always limit the branches relative to the HEAD, but they can
now take an optional commit argument that is used in place of
HEAD.</para></item>
          <item><para>git-bundle can read the revision arguments from
the standard input.</para></item>
          <item><para>git-cherry-pick can replay a root commit
now.</para></item>
          <item><para>git-clone can clone from a remote whose URL
would be rewritten by configuration stored in $HOME/.gitconfig
now.</para></item>
          <item><para>"git-clone --mirror" is a handy way to set up a
bare mirror repository.</para></item>
          <item><para>git-cvsserver learned to respond to "cvs co
-c".</para></item>
          <item><para>git-diff --check now checks leftover merge
conflict markers.</para></item>
          <item><para>"git-diff -p" learned to grab a better hunk
header lines in BibTex, Pascal/Delphi, and Ruby files and also pays
attention to chapter and part boundary in TeX documents.</para></item>
          <item><para>When remote side used to have branch 'foo' and
git-fetch finds that now it has branch 'foo/bar', it refuses to lose
the existing remote tracking branch and its reflog.  The error message
has been improved to suggest pruning the remote if the user wants to
proceed and get the latest set of branches from the remote, including
such 'foo/bar'.</para></item>
          <item><para>fast-export learned to export and import marks
file; this can be used to interface with fast-import
incrementally.</para></item>
          <item><para>fast-import and fast-export learned to export
and import gitlinks.</para></item>
          <item><para>"gitk" left background process behind after
being asked to dig very deep history and the user killed the UI; the
process is killed when the UI goes away now.</para></item>
          <item><para>git-rebase records the original tip of branch in
ORIG_HEAD before it is rewound.</para></item>
          <item><para>"git rerere" can be told to update the index
with auto-reused resolution with rerere.autoupdate configuration
variable.</para></item>
          <item><para>git-rev-parse learned $commit^! and $commit^@
notations used in "log" family.  These notations are available in gitk
as well, because the gitk command internally uses rev-parse to
interpret its arguments.</para></item>
          <item><para>git-rev-list learned --children option to show
child commits it encountered during the traversal, instead of showing
parent commits.</para></item>
          <item><para>git-send-mail can talk not just over SSL but
over TLS now.</para></item>
          <item><para>git-shortlog honors custom output format
specified with "--pretty=format:".</para></item>
          <item><para>"git-stash save" learned --keep-index option.
This lets you stash away the local changes and bring the changes
staged in the index to your working tree for examination and
testing.</para></item>
          <item><para>git-stash also learned branch subcommand to
create a new branch out of stashed changes.</para></item>
          <item><para>git-status gives the remote tracking statistics
similar to the way git-checkout reports by how many commits your
branch is ahead/behind.</para></item>
          <item><para>"git-svn dcommit" is now aware of auto-props
setting the subversion user has.</para></item>
          <item><para>You can tell "git status -u" to even more
aggressively omit checking untracked files with
--untracked-files=no.</para></item>
          <item><para>Original SHA-1 value for "update-ref -d" is
optional now.</para></item>
          <item><para>Error codes from gitweb are made more
descriptive where possible, rather than "403 forbidden" as we used to
issue everywhere.</para></item>
          <item><para>git-merge has been reimplemented in
C.</para></item>
        </items>

        <items name="Fixes since v1.5.6">
          <item><para>All of the fixes in v1.5.6 maintenance series
are included in this release, unless otherwise noted.</para></item>
          <item><para>git-clone ignored its -u option; the fix needs
to be backported to 'maint';</para></item>
          <item><para>git-mv used to lose the distinction between
changes that are staged and that are only in the working tree, by
staging both in the index after moving such a path.</para></item>
          <item><para>"git-rebase -i -p" rewrote the parents to wrong
ones when amending (either edit or squash) was involved, and did not
work correctly when fast forwarding.</para></item>
        </items>
      </change>

      <change from="1.5.5" to="1.5.6">
        <items name="Updates since v1.5.5">
          <item><para>Comes with updated gitk and
git-gui.</para></item>
          <item><para>git will build on AIX better than before
now.</para></item>
          <item><para>core.ignorecase configuration variable can be
used to work better on filesystems that are not case
sensitive.</para></item>
          <item><para>"git init" now autodetects the case sensitivity
of the filesystem and sets core.ignorecase accordingly.</para></item>
          <item><para>cpio is no longer used; neither "curl" binary
(libcurl is still used).</para></item>
          <item><para>Many freestanding documentation pages have been
converted and made available to "git help" (aka "man
git&lt;something&gt;") as section 7 of the manual pages. This means
bookmarks to some HTML documentation files may need to be updated (eg
"tutorial.html" became "gittutorial.html").</para></item>
          <item><para>"git clone" was rewritten in C.  This will
hopefully help cloning a repository with insane number of
refs.</para></item>
          <item><para>"git rebase --onto $there $from $branch" used to
switch to the tip of $branch only to immediately reset back to $from,
smudging work tree files unnecessarily.  This has been
optimized.</para></item>
          <item><para>Object creation codepath in "git-svn" has been
optimized by enhancing plumbing commands git-cat-file and
git-hash-object.</para></item>
          <item><para>"git add -p" (and the "patch" subcommand of "git
add -i") can choose to apply (or not apply) mode changes independently
from contents changes.</para></item>
          <item><para>"git bisect help" gives longer and more helpful
usage information.</para></item>
          <item><para>"git bisect" does not use a special branch
"bisect" anymore; instead, it does its work on a detached
HEAD.</para></item>
          <item><para>"git branch" (and "git checkout -b") can be told
to set up branch.&lt;name&gt;.rebase automatically, so that later you
can say "git pull" and magically cause "git pull --rebase" to
happen.</para></item>
          <item><para>"git branch --merged" and "git branch
--no-merged" can be used to list branches that have already been
merged (or not yet merged) to the current branch.</para></item>
          <item><para>"git cherry-pick" and "git revert" can add a
sign-off.</para></item>
          <item><para>"git commit" mentions the author identity when
you are committing somebody else's changes.</para></item>
          <item><para>"git diff/log --dirstat" output is consistent
between binary and textual changes.</para></item>
          <item><para>"git filter-branch" rewrites signed tags by
demoting them to annotated.</para></item>
          <item><para>"git format-patch --no-binary" can produce a
patch that lack binary changes (i.e. cannot be used to propagate the
whole changes) meant only for reviewing.</para></item>
          <item><para>"git init --bare" is a synonym for "git --bare
init" now.</para></item>
          <item><para>"git gc --auto" honors a new pre-auto-gc hook to
temporarily disable it.</para></item>
          <item><para>"git log --pretty=tformat:&lt;custom format&gt;"
gives a LF after each entry, instead of giving a LF between each pair
of entries which is how "git log --pretty=format:&lt;custom
format&gt;" works.</para></item>
          <item><para>"git log" and friends learned the "--graph"
option to show the ancestry graph at the left margin of the
output.</para></item>
          <item><para>"git log" and friends can be told to use date
format that is different from the default via 'log.date' configuration
variable.</para></item>
          <item><para>"git send-email" now can send out messages
outside a git repository.</para></item>
          <item><para>"git send-email --compose" was made aware of
rfc2047 quoting.</para></item>
          <item><para>"git status" can optionally include output from
"git submodule summary".</para></item>
          <item><para>"git svn" learned --add-author-from option to
propagate the authorship by munging the commit log
message.</para></item>
          <item><para>new object creation and looking up in "git svn"
has been optimized.</para></item>
          <item><para>"gitweb" can read from a system-wide
configuration file.</para></item>
          <item><para>"git unpack-objects" and "git receive-pack" is
now more strict about detecting breakage in the objects they receive
over the wire.</para></item>
        </items>

        <items name="Fixes since v1.5.5">
          <item><para>All of the fixes in v1.5.5 maintenance series
are included in this release, unless otherwise noted.</para></item>
          <item><para>And there are too numerous small fixes to
otherwise note here ;-)</para></item>
        </items>
      </change>

      <change from="1.5.4" to="1.5.5">
        <items name="Updates since v1.5.4">
          <item><para>Comes with git-gui 0.10.1</para></item>
          <item><para>We shouldn't ask for BSD group ownership
semantics by setting g+s bit on directories on older BSD systems that
refuses chmod() by non root users.  BSD semantics is the default there
anyway.</para></item>
          <item><para>Bunch of portability improvement patches coming
from an effort to port to Solaris has been applied.</para></item>
          <item><para>On platforms with suboptimal qsort(3)
implementation, there is an option to use more reasonable substitute
we ship with our software.</para></item>
          <item><para>New configuration variable "pack.packsizelimit"
can be used in place of command line option
--max-pack-size.</para></item>
          <item><para>"git fetch" over the native git protocol used to
make a connection to find out the set of current remote refs and
another to actually download the pack data.  We now use only one
connection for these tasks.</para></item>
          <item><para>"git commit" does not run lstat(2) more than
necessary anymore.</para></item>
          <item><para>Bash completion script (in contrib) are aware of
more commands and options.</para></item>
          <item><para>You can be warned when core.autocrlf conversion
is applied in such a way that results in an irreversible
conversion.</para></item>
          <item><para>A catch-all "color.ui" configuration variable
can be used to enable coloring of all color-capable commands, instead
of individual ones such as "color.status" and
"color.branch".</para></item>
          <item><para>The commands refused to take absolute pathnames
where they require pathnames relative to the work tree or the current
subdirectory.  They now can take absolute pathnames in such a case as
long as the pathnames do not refer outside of the work tree.  E.g.
"git add $(pwd)/foo" now works.</para></item>
          <item><para>Error messages used to be sent to stderr, only
to get hidden, when $PAGER was in use.  They now are sent to stdout
along with the command output to be shown in the $PAGER.</para></item>
          <item><para>A pattern "foo/" in .gitignore file now matches
a directory "foo".  Pattern "foo" also matches as
before.</para></item>
          <item><para>bash completion's prompt helper function can
talk about operation in-progress (e.g. merge, rebase,
etc.).</para></item>
          <item><para>Configuration variables
"url.&lt;usethis&gt;.insteadof = &lt;otherurl&gt;" can be used to tell
"git-fetch" and "git-push" to use different URL than what is given
from the command line.</para></item>
          <item><para>"git add -i" behaves better even before you make
an initial commit.</para></item>
          <item><para>"git am" refused to run from a subdirectory
without a good reason.</para></item>
          <item><para>After "git apply --whitespace=fix" fixes
whitespace errors in a patch, a line before the fix can appear as a
context or preimage line in a later patch, causing the patch not to
apply.  The command now knows to see through whitespace fixes done to
context lines to successfully apply such a patch series.</para></item>
          <item><para>"git branch" (and "git checkout -b") to branch
from a local branch can optionally set "branch.&lt;name&gt;.merge" to
mark the new branch to build on the other local branch, when
"branch.autosetupmerge" is set to "always", or when passing the
command line option "--track" (this option was ignored when branching
from local branches).  By default, this does not happen when branching
from a local branch.</para></item>
          <item><para>"git checkout" to switch to a branch that has
"branch.&lt;name&gt;.merge" set (i.e. marked to build on another
branch) reports how much the branch and the other branch
diverged.</para></item>
          <item><para>When "git checkout" has to update a lot of
paths, it used to be silent for 4 seconds before it showed any
progress report.  It is now a bit more impatient and starts showing
progress report early.</para></item>
          <item><para>"git commit" learned a new hook
"prepare-commit-msg" that can inspect what is going to be committed
and prepare the commit log message template to be
edited.</para></item>
          <item><para>"git cvsimport" can now take more than one -M
options.</para></item>
          <item><para>"git describe" learned to limit the tags to be
used for naming with --match option.</para></item>
          <item><para>"git describe --contains" now barfs when the
named commit cannot be described.</para></item>
          <item><para>"git describe --exact-match" describes only
commits that are tagged.</para></item>
          <item><para>"git describe --long" describes a tagged commit
as $tag-0-$sha1, instead of just showing the exact
tagname.</para></item>
          <item><para>"git describe" warns when using a tag whose name
and path contradict with each other.</para></item>
          <item><para>"git diff" learned "--relative" option to limit
and output paths relative to the current directory when working in a
subdirectory.</para></item>
          <item><para>"git diff" learned "--dirstat" option to show
birds-eye-summary of changes more concisely than
"--diffstat".</para></item>
          <item><para>"git format-patch" learned --cover-letter option
to generate a cover letter template.</para></item>
          <item><para>"git gc" learned --quiet option.</para></item>
          <item><para>"git gc" now automatically prunes unreachable
objects that are two weeks old or older.</para></item>
          <item><para>"git gc --auto" can be disabled more easily by
just setting gc.auto to zero.  It also tolerates more packfiles by
default.</para></item>
          <item><para>"git grep" now knows "--name-only" is a synonym
for the "-l" option.</para></item>
          <item><para>"git help &lt;alias&gt;" now reports "'git
&lt;alias&gt;' is alias to &lt;what&gt;", instead of saying "No manual
entry for git-&lt;alias&gt;".</para></item>
          <item><para>"git help" can use different backends to show
manual pages and this can be configured using "man.viewer"
configuration.</para></item>
          <item><para>"gitk" does not restore window position from
$HOME/.gitk anymore (it still restores the size).</para></item>
          <item><para>"git log --grep=&lt;what&gt;" learned
"--fixed-strings" option to look for &lt;what&gt; without treating it
as a regular expression.</para></item>
          <item><para>"git gui" learned an auto-spell
checking.</para></item>
          <item><para>"git push &lt;somewhere&gt; HEAD" and "git push
&lt;somewhere&gt; +HEAD" works as expected; they push the current
branch (and only the current branch). In addition, HEAD can be written
as the value of "remote.&lt;there&gt;.push" configuration
variable.</para></item>
          <item><para>When the configuration variable "pack.threads"
is set to 0, "git repack" auto detects the number of CPUs and uses
that many threads.</para></item>
          <item><para>"git send-email" learned to prompt for passwords
interactively.</para></item>
          <item><para>"git send-email" learned an easier way to
suppress CC recipients.</para></item>
          <item><para>"git stash" learned "pop" command, that applies
the latest stash and removes it from the stash, and "drop" command to
discard the named stash entry.</para></item>
          <item><para>"git submodule" learned a new subcommand
"summary" to show the symmetric difference between the HEAD version
and the work tree version of the submodule commits.</para></item>
          <item><para>Various "git cvsimport", "git cvsexportcommit",
"git cvsserver", "git svn" and "git p4" improvements.</para></item>
          <item><para>Duplicated code between git-help and
git-instaweb that launches user's preferred browser has been
refactored.</para></item>
          <item><para>It is now easier to write test scripts that
records known breakages.</para></item>
          <item><para>"git checkout" is rewritten in C.</para></item>
          <item><para>"git remote" is rewritten in C.</para></item>
          <item><para>Two conflict hunks that are separated by a very
short span of common lines are now coalesced into one larger hunk, to
make the result easier to read.</para></item>
          <item><para>Run-command API's use of file descriptors is
documented clearer and is more consistent now.</para></item>
          <item><para>diff output can be sent to FILE * that is
different from stdout.  This will help reimplementing more things in
C.</para></item>
        </items>

        <items name="Fixes since v1.5.4">
          <item><para>All of the fixes in v1.5.4 maintenance series
are included in this release, unless otherwise noted.</para></item>
          <item><para>"git-http-push" did not allow deletion of remote
ref with the usual "push &lt;remote&gt; :&lt;branch&gt;"
syntax.</para></item>
          <item><para>"git-rebase --abort" did not go back to the
right location if "git-reset" was run during the "git-rebase"
session.</para></item>
          <item><para>"git imap-send" without setting imap.host did
not error out but segfaulted.</para></item>
        </items>
      </change>
    </notes>
  </program>
</programs>
