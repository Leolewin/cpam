<?xml version="1.0"?>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
<programs>
  <program name="gcc" version="4.4.6" revision="2">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}44</install-name>

    <sources>
      <source checksum="ab525d429ee4425050a554bc9247d6c4"
        checksum-type="md5" size="63135296"
        path="src/gcc-4.4.6.tar.bz2"/>
      <patch checksum="db69cde76922725ed3aadeb17ebf000b"
        checksum-type="md5" size="703"
        path="src/gcc-4.4.6.rh-java-nomulti.patch"/>
      <patch checksum="ad9fd9499ebaca41db19b06f885aadba"
        checksum-type="md5" size="665"
        path="src/gcc-4.4.6.fortran-nomulti.patch"/>
      <patch checksum="71a9c2edf859cf0acbaddc18bb60c964"
        checksum-type="md5" size="8593"
        path="src/gcc-4.4.6.debian-ada-no-deallocation-from-empty-storage-pools.patch"/>
      <patch checksum="8323acf2b4e166fdf3448460185eaa84"
        checksum-type="md5" size="35709"
        path="src/gcc-4.4.6.tww.patch"/>
      <patch checksum="74bf4f4dc4a1fc431dee7fdf201aa67b"
        checksum-type="md5" size="72229"
        path="src/gcc-4.4.6.oldflex-gengtype.patch"/>
      <patch checksum="7af787f01161e4d99d3fff64510b1a25"
        checksum-type="md5" size="1471"
        path="src/gcc-4.4.6.collect2_rtl.patch"/>
      <patch checksum="b0a999e3a4bc49a578937afe2e7c101f"
        checksum-type="md5" size="6656"
        path="src/gcc-4.4.6.manpages.patch"/>
      <patch checksum="9a4f509b51810512e8668a5b1a1c53bc"
        checksum-type="md5" size="2167"
        path="src/gcc-4.4.6.reorderstdcpp.patch"/>
      <patch checksum="94389d08d3b687b513137dba3177aed2"
        checksum-type="md5" size="772"
        path="src/gcc-4.4.6.aix_fc_softc.patch"/>
      <patch checksum="60aff294e391d14f34fb0daa510b0f44"
        checksum-type="md5" size="1993"
        path="src/gcc-4.4.6.complex_hacks.patch"/>
      <patch checksum="9929649954e69064ca7aba8ecea0febb"
        checksum-type="md5" size="957628"
        path="src/gcc-4.4.6.auto.patch"/>
      <source checksum="eed5cc158e74acb232b4cf7085f4fc28"
        checksum-type="md5" size="27792904"
        path="src/gnat-3.4.3-powerpc-ibm-aix5.1.0.0.tar.bz2"
        systype="*-aix*"/>
      <source checksum="8758b2db49ca202c9152bc00421c5158"
        checksum-type="md5" size="25134772"
        path="src/gnat-3.4.3-hppa1.1-hp-hpux11.00.tar.bz2"
        systype="hppa*-hpux11*"/>
      <source checksum="c3c92c495981d66d0a36a8b3110b7f5f"
        checksum-type="md5" size="25923021"
        path="src/gnat-3.4.3-mips-sgi-irix6.5.tar.bz2"
        systype="*-irix*"/>
      <source checksum="5266149c0295b0ea9afe6bc1af81cfca"
        checksum-type="md5" size="22260604"
        path="src/gnat-3.4.3-i686-redhat-linuxe4.tar.bz2"
        systype="i?86*-linux*"/>
      <source checksum="f3be9c3f31d1a87349f712c3cd139a0b"
        checksum-type="md5" size="23746797"
        path="src/gnat-3.4.3-x86_64-redhat-linuxe4.tar.bz2"
        systype="x86_64-redhat-linux*"/>
      <source checksum="ca932e8b99044e1c9e6a49fa3995f2e9"
        checksum-type="md5" size="27694501"
        path="src/gnat-3.4.3-alpha-dec-osf5.1.tar.bz2"
        systype="*-osf*"/>
      <source checksum="7cb0c2a3f65ecb20618e5aed404a40e3"
        checksum-type="md5" size="28673248"
        path="src/gnat-3.4.3-i386-pc-solaris2.10.tar.bz2"
        systype="i?86*-solaris*"/>
      <source checksum="f5b7c66a351ea9eb98992085d4112571"
        checksum-type="md5" size="22331869"
        path="src/gnat-3.4.3-sparc-sun-solaris2.6.tar.bz2"
        systype="sparc*-solaris*"/>
    </sources>

    <dependencies>
      <depend program="make" add-path="prepend"
        type="build">v==3.82</depend>
      <depend program="binutils" module="gcc-4.4.6"
        systype="*-aix7*|*-hpux*|*-irix*|*-linux*|i?86*-solaris*">v==2.21.1</depend>
      <depend var="GCC_RT" install-name="gcc44r"
        set-var-only="1"/>
      <depend program="m4" install-name="m414" add-path="prepend"
        type="build">v&gt;=1.4.15</depend>
      <depend program="zip" install-name="zip30" add-path="prepend"
        type="build">v&gt;=3.0</depend>
      <depend program="gmp" var="LIBGMP"
        install-name="libgmp43">v&gt;=4.3.2</depend>
      <depend program="mpfr" var="LIBMPFR"
        install-name="libmpfr30">v&gt;=3.0.1</depend>
    </dependencies>

    <validate>
      <depend program="binutils" module="gcc-4.4.6"
        systype="*-aix7*|*-hpux*|*-irix*|*-linux*|i?86*-solaris*">v==2.21.1</depend>
    </validate>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_dir_ver=4.4

case "${SB_SYSTYPE}" in
*aix5.1*)
  GCC_SYSTYPE=${SB_SYSTYPE}
  export gcc_cv_have_tls=no ;;
hppa*-hpux*)
  case "${SB_SYSTYPE}" in
  *-hpux11.31)
    GCC_SYSTYPE="hppa2.0-hp-hpux11.31" ;;
  *-hpux11.23)
    GCC_SYSTYPE="hppa2.0-hp-hpux11.23" ;;
  *-hpux11.11)
    GCC_SYSTYPE="hppa1.1-hp-hpux11.11" ;;
  *-hpux11.00)
    GCC_SYSTYPE="hppa1.1-hp-hpux11.00" ;;
  esac ;;
*-osf*)
  GCC_SYSTYPE="alpha-dec-osf5.1" ;;
x86_64*-linux*)
  GCC_SYSTYPE="x86_64-unknown-linux-gnu" ;;
*-linux*)
  GCC_SYSTYPE="i686-pc-linux-gnu" ;;
*)
  GCC_SYSTYPE=${SB_SYSTYPE} ;;
esac

_gnat_dir="${SB_BUILD_BASE}/gnat"
]]>
    </script-header>

    <configure>
<![CDATA[
echo ${_gcc_dir_ver} > gcc/DIR-VER

test -d ${SB_BUILD_PREFIX}-objdir && rm -rf ${BUILD_PREFIX}-objdir
mkdir ${SB_BUILD_PREFIX}-objdir

# prep Ada
case "${SB_SYSTYPE}" in
*-aix*)
  (rm -rf ${_gnat_dir}/lib/gcc/powerpc-ibm-aix5.1.0.0/3.4.3/include
  cd ${_gnat_dir}/libexec/gcc/powerpc-ibm-aix5.1.0.0/3.4.3/install-tools

  ${SB_PATH_SED} -i -e "\
s!/opt/build/gnat!${_gnat_dir}!g;" \
  ${_gnat_dir}/libexec/gcc/powerpc-ibm-aix5.1.0.0/3.4.3/install-tools/mkheaders

  SHELL=/bin/sh sh mkheaders) ;;

hppa*-hpux11*)
  (rm -rf ${_gnat_dir}/lib/gcc/hppa1.1-hp-hpux11.00/3.4.3/include
  cd ${_gnat_dir}/libexec/gcc/hppa1.1-hp-hpux11.00/3.4.3/install-tools

  ${SB_PATH_SED} -i -e "\
s!/opt/build/gnat!${_gnat_dir}!g;" \
  ${_gnat_dir}/libexec/gcc/hppa1.1-hp-hpux11.00/3.4.3/install-tools/mkheaders

  SHELL=/bin/sh sh mkheaders) ;;

*-irix*)
  (rm -rf ${_gnat_dir}/lib/gcc/mips-sgi-irix6.5/3.4.3/include
  cd ${_gnat_dir}/libexec/gcc/mips-sgi-irix6.5/3.4.3/install-tools

  ${SB_PATH_SED} -i -e "\
s!/opt/build/gnat!${_gnat_dir}!g;" \
  ${_gnat_dir}/libexec/gcc/mips-sgi-irix6.5/3.4.3/install-tools/mkheaders

  SHELL=/bin/sh sh mkheaders) ;;

x86_64-redhat-linux*)
  (rm -rf ${_gnat_dir}/lib/gcc/x86_64-unknown-linux-gnu/3.4.3/include
  cd ${_gnat_dir}/libexec/gcc/x86_64-unknown-linux-gnu/3.4.3/install-tools

  ${SB_PATH_SED} -i -e "\
s!/opt/build/gnat!${_gnat_dir}!g;" \
  ${_gnat_dir}/libexec/gcc/x86_64-unknown-linux-gnu/3.4.3/install-tools/mkheaders

  SHELL=/bin/sh sh mkheaders) ;;

i?86*-linux*)
  (rm -rf ${_gnat_dir}/lib/gcc/i686-pc-linux-gnu/3.4.3/include
  cd ${_gnat_dir}/libexec/gcc/i686-pc-linux-gnu/3.4.3/install-tools

  ${SB_PATH_SED} -i -e "\
s!/opt/build/gnat!${_gnat_dir}!g;" \
  ${_gnat_dir}/libexec/gcc/i686-pc-linux-gnu/3.4.3/install-tools/mkheaders

  SHELL=/bin/sh sh mkheaders) ;;

*-osf*)
  (rm -rf ${_gnat_dir}/lib/gcc/alpha-dec-osf5.1/3.4.3/include
  cd ${_gnat_dir}/libexec/gcc/alpha-dec-osf5.1/3.4.3/install-tools

  ${SB_PATH_SED} -i -e "\
s!/opt/build/gnat!${_gnat_dir}!g;" \
  ${_gnat_dir}/libexec/gcc/alpha-dec-osf5.1/3.4.3/install-tools/mkheaders

  SHELL=/bin/sh sh mkheaders) ;;

i?86*-solaris*)
  (rm -rf ${_gnat_dir}/lib/gcc/i386-pc-solaris2.10/3.4.3/include
  cd ${_gnat_dir}/libexec/gcc/i386-pc-solaris2.10/3.4.3/install-tools

  ${SB_PATH_SED} -i -e "\
s!/opt/build/gnat!${_gnat_dir}!g;" \
  ${_gnat_dir}/libexec/gcc/i386-pc-solaris2.10/3.4.3/install-tools/mkheaders

  SHELL=/bin/sh sh mkheaders) ;;
*-solaris*)
  (rm -rf ${_gnat_dir}/lib/gcc/sparc-sun-solaris2.6/3.4.3/include
  cd ${_gnat_dir}/libexec/gcc/sparc-sun-solaris2.6/3.4.3/install-tools

  ${SB_PATH_SED} -i -e "\
s!/opt/build/gnat!${_gnat_dir}!g;" \
  ${_gnat_dir}/libexec/gcc/sparc-sun-solaris2.6/3.4.3/install-tools/mkheaders

  SHELL=/bin/sh sh mkheaders) ;;
esac

# for Ada
case "${SB_SYSTYPE}" in
*-aix*|hppa*-hpux11*|*-irix*|*-redhat-linux*|*-osf*|*-solaris*)
  export PATH=${_gnat_dir}/bin:$PATH ;;
esac

cd ${SB_BUILD_PREFIX}-objdir
case "${SB_SYSTYPE}" in
*-aix7*)
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure \
  --enable-nls --with-included-gettext --enable-shared --enable-threads \
  --with-local-prefix=${INSTALL_PREFIX} \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,-brtl -Wl,-blibpath:${SB_VAR_LIBGMP_LIB}:/usr/lib" \
  --with-mpfr-ldflags="-Wl,-brtl -Wl,-blibpath:${SB_VAR_LIBMPFR_LIB}:/usr/lib" \
  --enable-languages="ada,c,c++,fortran" --datadir=${_datadir} \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --prefix=${SB_INSTALL_PREFIX} ;;
*-aix*)
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure \
  --enable-nls --with-included-gettext --enable-shared --enable-threads \
  --with-local-prefix=${INSTALL_PREFIX} \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,-brtl -Wl,-blibpath:${SB_VAR_LIBGMP_LIB}:/usr/lib" \
  --with-mpfr-ldflags="-Wl,-brtl -Wl,-blibpath:${SB_VAR_LIBMPFR_LIB}:/usr/lib" \
  --enable-languages="ada,c,c++,fortran" --datadir=${_datadir} \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --prefix=${SB_INSTALL_PREFIX} ;;
ia64*-hpux*)
  CC=cc ${SB_BUILD_PREFIX}/configure \
  --with-included-gettext --enable-shared \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,+b,${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-Wl,+b,${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="c,c++,fortran" --datadir=${_datadir} \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${INSTALL_PREFIX} ;;
*-hpux11.31)
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure \
  --with-included-gettext --enable-shared \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,+s,+b,${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-Wl,+s,+b,${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran,java" --datadir=${_datadir} \
  --with-x --enable-java-awt=xlib \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --build=${GCC_SYSTYPE} \
  --host=${GCC_SYSTYPE} --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${INSTALL_PREFIX} ;;
*-hpux11.23)
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure \
  --with-included-gettext --enable-shared \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,+s,+b,${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-Wl,+s,+b,${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran,java" --datadir=${_datadir} \
  --with-x --enable-java-awt=xlib \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --build=${GCC_SYSTYPE} \
  --host=${GCC_SYSTYPE} --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${INSTALL_PREFIX} ;;
*-hpux11*)
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure \
  --with-included-gettext --enable-shared \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,+s,+b,${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-Wl,+s,+b,${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran,java" --datadir=${_datadir} \
  --with-x --enable-java-awt=xlib \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --build=${GCC_SYSTYPE} \
  --host=${GCC_SYSTYPE} --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${INSTALL_PREFIX} ;;
*-irix*)
  # must first increase number of command-line arguments
  # $ systune -r -i
  # systune-> ncargs 204800
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure \
  --with-included-gettext --enable-shared \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,-rpath,${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-Wl,-rpath,${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran" --datadir=${_datadir} \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --with-local-prefix=${INSTALL_PREFIX} \
  --prefix=${SB_INSTALL_PREFIX} ;;
x86_64*-linux*)
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure --with-included-gettext \
  --enable-libgcj --enable-__cxa_atexit \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --with-gnu-ld --with-ld="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/ld" \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,-rpath,${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-Wl,-rpath,${SB_VAR_LIBMPFR_LIB}" \
  --disable-multilib --enable-languages="c" --datadir=${_datadir} \
  --enable-languages="ada,c,c++,fortran,java" --datadir=${_datadir} \
  --with-x --x-libraries=/usr/X11R6/lib64 --enable-java-awt=xlib \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --with-local-prefix=${SB_INSTALL_PREFIX} \
  --disable-multilib \
  --prefix=${SB_INSTALL_PREFIX} ;;
i?86*-linux*)
  CC=gcc \
  LDFLAGS="-Wl,-rpath,${SB_VAR_LIBGMP_LIB}:${SB_VAR_LIBMPFR_LIB}" \
  ${SHELL} ${SB_BUILD_PREFIX}/configure --with-included-gettext \
  --enable-libgcj --enable-__cxa_atexit \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --with-gnu-ld --with-ld="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/ld" \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,-rpath,${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-Wl,-rpath,${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran,java" --datadir=${_datadir} \
  --with-x --enable-java-awt=xlib \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${SB_INSTALL_PREFIX} ;;
*-osf*)
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure \
  --enable-nls --with-included-gettext \
  --build=${GCC_SYSTYPE} \
  --enable-shared --enable-threads --host=${GCC_SYSTYPE} \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-Wl,-rpath,${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-Wl,-rpath,${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran" --datadir=${_datadir} \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${INSTALL_PREFIX} ;;
i?86*-solaris*)
  (cd ${SB_BUILD_PREFIX} &&
  ${SB_PATH_SED} -i -e "\
s!-fno-asynchronous-unwind-tables!!" gcc/config/i386/t-crtstuff)

  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure --enable-nls \
  --with-included-gettext --enable-shared --enable-libgcj \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-R${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-R${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran,java" --datadir=${_datadir} \
  --with-x --enable-java-awt=xlib \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --with-gnu-as --with-as="${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin/as" \
  --enable-threads --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${INSTALL_PREFIX} ;;
*-solaris2.6)
  # disable libjava due to lack of robust POSIX threads library.
  # the thread manager will not work reliably.
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure --enable-nls \
  --with-included-gettext --enable-shared --disable-multilib \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-R${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-R${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran" --datadir=${_datadir} \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --disable-threads --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${INSTALL_PREFIX} ;;
*-solaris*)
  CC=gcc ${SHELL} ${SB_BUILD_PREFIX}/configure --enable-nls \
  --with-included-gettext --enable-shared --enable-libgcj \
  --with-gmp=${SB_VAR_LIBGMP} --with-mpfr=${SB_VAR_LIBMPFR} \
  --with-gmp-ldflags="-R${SB_VAR_LIBGMP_LIB}" \
  --with-mpfr-ldflags="-R${SB_VAR_LIBMPFR_LIB}" \
  --enable-languages="ada,c,c++,fortran,java" --datadir=${_datadir} \
  --with-x --enable-java-awt=xlib \
  --with-gxx-include-dir="${SB_INSTALL_PREFIX}/include/c++" \
  --enable-threads --with-local-prefix=${SB_INSTALL_PREFIX} \
  --prefix=${INSTALL_PREFIX} ;;
esac
]]>
    </configure>

    <build>
<![CDATA[
cd ${SB_BUILD_PREFIX}-objdir

# for Ada
case "${SB_SYSTYPE}" in
*-aix7*)
  export PATH=${SB_INSTALL_PREFIX}/powerpc-ibm-aix7.1.0.0/bin:${_gnat_dir}/bin:$PATH ;;
*-aix*|hppa*-hpux11*|*-irix*|*-redhat-linux*|*-osf*|*-solaris*)
  export PATH=${_gnat_dir}/bin:$PATH ;;
esac

case "${SB_SYSTYPE}" in
*-aix*)
  gmake ADA_CFLAGS="-g -O1" ;;
ia64*-hpux*)
# Avoid out of memory error by building stage1 gcc with cc -N
  gmake LDFLAGS="-N -Wl,+as,mpas" ;;
*-hpux11.00|*-hpux11.11)
  gmake BOOT_CFLAGS="-O2 -g -march=1.1" \
STAGE1_CFLAGS="-g -fkeep-inline-functions -O";;
*-hpux11*)
  gmake STAGE1_CFLAGS="-g -fkeep-inline-functions -O";;
*-irix*)
  # GNU as supports COMDAT group but IRIX ld does not
  export gcc_cv_as_comdat_group=no
  export gcc_cv_as_comdat_group_percent=no
  gmake ;;
*-osf*)
  gmake BOOT_CFLAGS="-O2 -g -mcpu=ev4" ;;
i?86*-solaris*)
  # GNU as supports COMDAT group but Solaris ld does not
  export gcc_cv_as_comdat_group=no
  export gcc_cv_as_comdat_group_percent=no
  gmake ;;
*-solaris2.6)
  gmake ;;
*)
  gmake ;;
esac
]]>
    </build>

    <test auto-include="0">
      <dependencies replace="0">
        <depend program="dejagnu" var="DEJAGNU"
          install-name="dejagnu14"
          add-path="prepend">v&gt;=1.4.4</depend>
        <depend program="expect" install-name="expect54"
          add-path="prepend">v&gt;=5.43</depend>
      </dependencies>
<![CDATA[
_dejagnu_datadir="${SB_VAR_DEJAGNU}/share"

(cd ${SB_BUILD_PREFIX}-objdir

DEJAGNULIBS=${_dejagnu_datadir} gmake -k check)
]]>
    </test>

    <install>
<![CDATA[
set -x

# Makefile sed function
func_sed_makefile ()
{
  __path_to_file=$1
  __ldflags=$2
  __installdir=$3
  ${SB_PATH_SED} -i -e "\
s!^toolexeclibdir = .*!\
toolexeclibdir = ${__installdir}!; \
s!^LIBGOMP_LDFLAGS =.*!\
LIBGOMP_LDFLAGS = ${__ldflags}!; \
s!^LIBGFORTRAN_LDFLAGS =.*!\
LIBGFORTRAN_LDFLAGS = ${__ldflags}!; \
s!^LIBSSP_LDFLAGS =.*!\
LIBSSP_LDFLAGS = ${__ldflags}!; \
s!^LIBFFI_LDFLAGS =.*!\
LIBFFI_LDFLAGS = ${__ldflags}!;" \
  ${__path_to_file}
}

# Fixup libjava
func_fixup_libjava ()
{
  __path_to_libjava=$1
  __ldflags=$2
  __installdir=$3
  ${SB_PATH_SED} -i -e "\
s!^toolexeclibdir = .*!\
toolexeclibdir = ${__installdir}!; \
s!^dbexecdir = .*!\
dbexecdir = ${__installdir}/gcj!; \
s!^LIBGCJ_LDFLAGS =.*!\
LIBGCJ_LDFLAGS = ${__ldflags}!;\
s!^LIBGIJ_LDFLAGS =.*!\
LIBGIJ_LDFLAGS = ${__ldflags}!;\
s!^LIBGCJ_TOOLS_LDFLAGS =.*!\
LIBGCJ_TOOLS_LDFLAGS = ${__ldflags}!;" \
  ${__path_to_libjava}/Makefile 

  # don't relink to libstdc++ in build directory
  ${SB_PATH_SED} -i -e "\
/^CXX =/ s! -L${SB_BUILD_PREFIX}-objdir/[^ ][^ ]*!!g; \
/^CXXCPP =/ s! -L${SB_BUILD_PREFIX}-objdir/[^ ][^ ]*!!g;" \
  ${__path_to_libjava}/Makefile 
  ${SB_PATH_SED} -i -e "\
/^CC=/ s! -L${SB_BUILD_PREFIX}-objdir/[^ ][^ ]*!!g;" \
  ${__path_to_libjava}/libtool

  rm -f ${__path_to_libjava}/gnu/classpath/natSystemProperties.*o \
${__path_to_libjava}/prims.*o ${__path_to_libjava}/*.la
}

case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-Wl,-blibpath:" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b," ;;
*-hpux*)
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*|*-linux*|*-osf*)
  CC_LD_RT="-Wl,-rpath," ;;
*-solaris*)
  CC_LD_RT="-R" ;;
esac

# for Ada
case "${SB_SYSTYPE}" in
*-aix*|hppa*-hpux*|*-irix*|*-redhat-linux*|*-osf*|*-solaris*)
  export PATH=${_gnat_dir}/bin:$PATH ;;
esac

(cd ${SB_BUILD_PREFIX}-objdir
gmake install

# Rebuild libada
case "${SB_SYSTYPE}" in
hppa*-hpux*)
  ${SB_PATH_SED} -i -e "\
s#^LIBADA_RPATH_DIR =.*#LIBADA_RPATH_DIR = ${SB_INSTALL_PREFIX}/lib#;\
s#^LIBADA_RPATH_PREFIX =.*#LIBADA_RPATH_PREFIX = ${CC_LD_RT}#" \
  ${SB_BUILD_PREFIX}-objdir/gcc/ada/gcc-interface/Makefile ;;
*-irix*)
  ${SB_PATH_SED} -i -e "\
s#^LIBADA_RPATH_DIR =.*#LIBADA_RPATH_DIR = ${SB_INSTALL_PREFIX}/lib32#;\
s#^LIBADA_RPATH_PREFIX =.*#LIBADA_RPATH_PREFIX = ${CC_LD_RT}#" \
  ${SB_BUILD_PREFIX}-objdir/gcc/ada/gcc-interface/Makefile ;;
*-linux*|*-osf*|*-solaris*)
  ${SB_PATH_SED} -i -e "\
s#^LIBADA_RPATH_DIR =.*#LIBADA_RPATH_DIR = ${SB_INSTALL_PREFIX}/lib#;\
s#^LIBADA_RPATH_PREFIX =.*#LIBADA_RPATH_PREFIX = ${CC_LD_RT}#" \
  ${SB_BUILD_PREFIX}-objdir/gcc/ada/gcc-interface/Makefile ;;
esac

# if we're not building multilib on x86_64 point to lib not lib64 
case "${SB_SYSTYPE}" in
x86_64*linux*)
  ${SB_PATH_SED} -i -e "\
s#^RPATH_LIBDIR =.*#RPATH_LIBDIR = \$(LIBADA_RPATH_DIR)#" \
${SB_BUILD_PREFIX}-objdir/gcc/ada/gcc-interface/Makefile  ;;
esac

rm -f ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libada/stamp-libada \
${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/*/libada/stamp-libada \
gcc/ada/stamp-*
rm -f ${SB_BUILD_PREFIX}-objdir/gcc/ada/*.o \
${SB_BUILD_PREFIX}-objdir/gcc/ada/rts/*.o \
${SB_BUILD_PREFIX}-objdir/gcc/ada/rts_*/*.o \
${SB_BUILD_PREFIX}-objdir/gcc/ada/rts/*.so \
${SB_BUILD_PREFIX}-objdir/gcc/ada/rts_*/*.so
(gmake -C ${SB_BUILD_PREFIX}-objdir all-target-libada)
(gmake -C ${SB_BUILD_PREFIX}-objdir install-target-libada)

case "${SB_SYSTYPE}" in
x86_64*-linux*)
  mv ${SB_INSTALL_PREFIX}/lib64/* ${SB_INSTALL_PREFIX}/lib
  rmdir ${SB_INSTALL_PREFIX}/lib64 ;;
esac

# relink some libraries to set correct runtime path
case "${SB_SYSTYPE}" in
*-aix*)
  # non-pthread library
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install  \
LDFLAGS="-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib:/usr/lib")

  # pthread library
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/pthread/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
LDFLAGS="-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/pthread:/usr/lib")

  for _arch in power powerpc ppc64; do
    [ ! -d "${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/${_arch}" ] && continue

    # non-pthread libraries
    (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/${_arch}/libstdc++-v3/src
    rm libstdc++.la
    gmake install \
LDFLAGS="-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/${_arch}:/usr/lib")

    # pthread libraries
    (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/pthread/${_arch}/libstdc++-v3/src
    rm libstdc++.la
    gmake install \
 LDFLAGS="-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/pthread/${_arch}:/usr/lib")
  done

(cd ${SB_BUILD_PREFIX}-objdir

func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
  "-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib:/usr/lib" \
  "${SB_INSTALL_PREFIX}/lib"

func_sed_makefile "${GCC_SYSTYPE}/pthread/libgomp/Makefile" \
  "-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/pthread:/usr/lib" \
  "${SB_INSTALL_PREFIX}/lib/pthread"

func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
  "-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib:/usr/lib" \
  "${SB_INSTALL_PREFIX}/lib"

func_sed_makefile "${GCC_SYSTYPE}/pthread/libgfortran/Makefile" \
  "-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/pthread:/usr/lib" \
  "${SB_INSTALL_PREFIX}/lib/pthread"

  for _arch in power powerpc ppc64; do
    [ ! -d "${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/${_arch}" ] && continue

    func_sed_makefile "${GCC_SYSTYPE}/${_arch}/libgomp/Makefile" \
      "-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/${_arch}:/usr/lib" \
      "${SB_INSTALL_PREFIX}/lib/${_arch}"

    func_sed_makefile "${GCC_SYSTYPE}/pthread/${_arch}/libgomp/Makefile" \
      "-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/pthread/${_arch}:/usr/lib" \
      "${SB_INSTALL_PREFIX}/lib/pthread/${_arch}"

    func_sed_makefile "${GCC_SYSTYPE}/${_arch}/libgfortran/Makefile" \
      "-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/${_arch}:/usr/lib" \
      "${SB_INSTALL_PREFIX}/lib/${_arch}"

    func_sed_makefile "${GCC_SYSTYPE}/pthread/${_arch}/libgfortran/Makefile" \
      "-Wl,-blibpath:${SB_INSTALL_PREFIX}/lib/pthread/${_arch}:/usr/lib" \
      "${SB_INSTALL_PREFIX}/lib/pthread/${_arch}"
  done

  rm -f ${GCC_SYSTYPE}/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/power/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/powerpc/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/ppc64/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/pthread/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/pthread/power/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/pthread/powerpc/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/pthread/ppc64/libgomp/libgomp.la
  (gmake all-target-libgomp install-target-libgomp)

  rm -f ${GCC_SYSTYPE}/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/power/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/powerpc/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/ppc64/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/pthread/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/pthread/power/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/pthread/powerpc/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/pthread/ppc64/libgfortran/libgfortran.la
  (gmake all-target-libgfortran install-target-libgfortran))
  ;;
ia64*-hpux*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-Wl,+b,${SB_INSTALL_PREFIX}/lib" \
    toolexeclibdir="${SB_INSTALL_PREFIX}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/hpux64/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-Wl,+b,${SB_INSTALL_PREFIX}/lib/hpux64" \
    toolexeclibdir="${SB_INSTALL_PREFIX}/lib/hpux64")
  (cd ${SB_BUILD_PREFIX}-objdir
   func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
     "-Wl,+b,${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"

   func_sed_makefile "${GCC_SYSTYPE}/hpux64/libgfortran/Makefile" \
     "-Wl,+b,${SB_INSTALL_PREFIX}/lib/hpux64" \
     "${SB_INSTALL_PREFIX}/lib/hpux64"

   rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la \
   ${GCC_SYSTYPE}/hpux64/libgfortran/libgfortran.la
   (gmake all-target-libgfortran install-target-libgfortran)

   func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
     "-Wl,+b,${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"

   func_sed_makefile "${GCC_SYSTYPE}/hpux64/libssp/Makefile" \
     "-Wl,+b,${SB_INSTALL_PREFIX}/lib/hpux64" \
     "${SB_INSTALL_PREFIX}/lib/hpux64"

   rm ${GCC_SYSTYPE}/libssp/libssp.la \
   ${GCC_SYSTYPE}/hpux64/libssp/libssp.la
   (gmake all-target-libssp install-target-libssp)

   func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
     "-Wl,+b,${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"

   func_sed_makefile "${GCC_SYSTYPE}/hpux64/libgomp/Makefile" \
     "-Wl,+b,${SB_INSTALL_PREFIX}/lib/hpux64" \
     "${SB_INSTALL_PREFIX}/lib/hpux64"

   rm ${GCC_SYSTYPE}/libgomp/libgomp.la \
   ${GCC_SYSTYPE}/hpux64/libgomp/libgomp.la
   (gmake all-target-libgomp install-target-libgomp))
  ;;
*-hpux*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
   rm libstdc++.la
   gmake install LDFLAGS="-Wl,+s -L${SB_INSTALL_PREFIX}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir
   func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
     "-Wl,+s -L${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"
   rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
   (gmake all-target-libgfortran install-target-libgfortran)
   func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
     "-Wl,+s -L${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"
   rm ${GCC_SYSTYPE}/libffi/libffi.la
   (gmake all-target-libffi install-target-libffi)
   func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
     "-Wl,+s -L${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"
   rm ${GCC_SYSTYPE}/libssp/libssp.la
   (gmake all-target-libssp install-target-libssp)

   func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
     "-Wl,+s -L${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"
   rm ${GCC_SYSTYPE}/libgomp/libgomp.la
   (gmake all-target-libgomp install-target-libgomp)

   func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
     "-Wl,+s -L${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"
   ${SB_PATH_SED} -i -e 's|-L\$(here)/.libs||g' \
     -e "s|^lib_gnu_awt_xlib_la_LDFLAGS =.*|\
lib_gnu_awt_xlib_la_LDFLAGS = ${SB_INSTALL_PREFIX}/lib/libstdc++.la \\\|g" \
     ${GCC_SYSTYPE}/libjava/Makefile
   (gmake all-target-libjava)
   (gmake -C ${GCC_SYSTYPE}/libjava install-toolexeclibLTLIBRARIES)
   (gmake install-target-libjava))
  ;;
*-irix*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-Wl,-rpath,${SB_INSTALL_PREFIX}/lib32" \
    toolexeclibdir="${SB_INSTALL_PREFIX}/lib32")
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/32/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
    toolexeclibdir="${SB_INSTALL_PREFIX}/lib")
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/64/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-Wl,-rpath,${SB_INSTALL_PREFIX}/lib64" \
    toolexeclibdir="${SB_INSTALL_PREFIX}/lib64")

  (cd ${SB_BUILD_PREFIX}-objdir
   func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib32" \
     "${SB_INSTALL_PREFIX}/lib32"
   func_sed_makefile "${GCC_SYSTYPE}/32/libgfortran/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"
   func_sed_makefile "${GCC_SYSTYPE}/64/libgfortran/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib64" \
     "${SB_INSTALL_PREFIX}/lib64"

   rm -f ${GCC_SYSTYPE}/libgfortran/libgfortran.la
   rm -f ${GCC_SYSTYPE}/32/libgfortran/libgfortran.la
   rm -f ${GCC_SYSTYPE}/64/libgfortran/libgfortran.la
   (gmake all-target-libgfortran install-target-libgfortran)

   func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib32" \
     "${SB_INSTALL_PREFIX}/lib32"
   func_sed_makefile "${GCC_SYSTYPE}/32/libssp/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"
   func_sed_makefile "${GCC_SYSTYPE}/64/libssp/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib64" \
     "${SB_INSTALL_PREFIX}/lib64"

   rm -f ${GCC_SYSTYPE}/libssp/libssp.la
   rm -f ${GCC_SYSTYPE}/32/libssp/libssp.la
   rm -f ${GCC_SYSTYPE}/64/libssp/libssp.la
   (gmake all-target-libssp install-target-libssp)

   func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib32" \
     "${SB_INSTALL_PREFIX}/lib32"
   func_sed_makefile "${GCC_SYSTYPE}/32/libgomp/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
     "${SB_INSTALL_PREFIX}/lib"
   func_sed_makefile "${GCC_SYSTYPE}/64/libgomp/Makefile" \
     "-Wl,-rpath,${SB_INSTALL_PREFIX}/lib64" \
     "${SB_INSTALL_PREFIX}/lib64"

   rm -f ${GCC_SYSTYPE}/libgomp/libgomp.la
   rm -f ${GCC_SYSTYPE}/32/libgomp/libgomp.la
   rm -f ${GCC_SYSTYPE}/64/libgomp/libgomp.la
   (gmake all-target-libgomp install-target-libgomp))
  ;;
*-linux*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
 LDFLAGS="-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
        toolexeclibdir="${SB_INSTALL_PREFIX}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  (gmake all-target-libjava install-target-libjava))

  case "${SB_SYSTYPE}" in
  x86_64*-linux*)
    (cd ${SB_INSTALL_PREFIX}
     rm -rf lib64
     ln -s ./lib lib64) ;;
  esac
  ;;
*-osf*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
 LDFLAGS="-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
        toolexeclibdir="${SB_INSTALL_PREFIX}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libssp/libssp.la
  (gmake all-target-libssp install-target-libssp)

  func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
"-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libffi/libffi.la
  (gmake all-target-libffi install-target-libffi)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la
  (gmake all-target-libgomp install-target-libgomp)

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-Wl,-rpath,${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  (gmake all-target-libgfortran install-target-libgfortran))
  ;;
i?86*-solaris*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
 LDFLAGS="-R${SB_INSTALL_PREFIX}/lib" \
        toolexeclibdir="${SB_INSTALL_PREFIX}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/amd64/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
 LDFLAGS="-R${SB_INSTALL_PREFIX}/lib/amd64" \
        toolexeclibdir="${SB_INSTALL_PREFIX}/lib/amd64")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libssp/libssp.la
  func_sed_makefile "${GCC_SYSTYPE}/amd64/libssp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib/amd64" \
"${SB_INSTALL_PREFIX}/lib/amd64"
  rm ${GCC_SYSTYPE}/amd64/libssp/libssp.la
  (gmake all-target-libssp install-target-libssp)

  func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libffi/libffi.la
  func_sed_makefile "${GCC_SYSTYPE}/amd64/libffi/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib/amd64" \
"${SB_INSTALL_PREFIX}/lib/amd64"
  rm ${GCC_SYSTYPE}/amd64/libffi/libffi.la
  (gmake all-target-libffi install-target-libffi)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la
  func_sed_makefile "${GCC_SYSTYPE}/amd64/libgomp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib/amd64" \
"${SB_INSTALL_PREFIX}/lib/amd64"
  rm ${GCC_SYSTYPE}/amd64/libgomp/libgomp.la
  (gmake all-target-libgomp install-target-libgomp)

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  func_sed_makefile "${GCC_SYSTYPE}/amd64/libgfortran/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib/amd64" \
"${SB_INSTALL_PREFIX}/lib/amd64"
  rm ${GCC_SYSTYPE}/amd64/libgfortran/libgfortran.la
  (gmake all-target-libgfortran install-target-libgfortran)

   func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  (gmake all-target-libjava install-target-libjava)
 func_fixup_libjava "${GCC_SYSTYPE}/amd64/libjava" \
"-R${SB_INSTALL_PREFIX}/lib/amd64" \
"${SB_INSTALL_PREFIX}/lib/amd64"
  (gmake all-target-libjava install-target-libjava))
  ;;
*-solaris2.6)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
 LDFLAGS="-R${SB_INSTALL_PREFIX}/lib" \
        toolexeclibdir="${SB_INSTALL_PREFIX}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libssp/libssp.la
  (gmake all-target-libssp install-target-libssp)

  func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libffi/libffi.la
  (gmake all-target-libffi install-target-libffi)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la
  (gmake all-target-libgomp install-target-libgomp)

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  (gmake all-target-libgfortran install-target-libgfortran))
  ;;
*-solaris*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
 LDFLAGS="-R${SB_INSTALL_PREFIX}/lib" \
        toolexeclibdir="${SB_INSTALL_PREFIX}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/sparcv9/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
 LDFLAGS="-R${SB_INSTALL_PREFIX}/lib/sparcv9" \
        toolexeclibdir="${SB_INSTALL_PREFIX}/lib/sparcv9")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libssp/libssp.la
  func_sed_makefile "${GCC_SYSTYPE}/sparcv9/libssp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib/sparcv9" \
"${SB_INSTALL_PREFIX}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/sparcv9/libssp/libssp.la
  (gmake all-target-libssp install-target-libssp)

  func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libffi/libffi.la
  func_sed_makefile "${GCC_SYSTYPE}/sparcv9/libffi/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib/sparcv9" \
"${SB_INSTALL_PREFIX}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/sparcv9/libffi/libffi.la
  (gmake all-target-libffi install-target-libffi)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la
  func_sed_makefile "${GCC_SYSTYPE}/sparcv9/libgomp/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib/sparcv9" \
"${SB_INSTALL_PREFIX}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/sparcv9/libgomp/libgomp.la
  (gmake all-target-libgomp install-target-libgomp)

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  func_sed_makefile "${GCC_SYSTYPE}/sparcv9/libgfortran/Makefile" \
"-R${SB_INSTALL_PREFIX}/lib/sparcv9" \
"${SB_INSTALL_PREFIX}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/sparcv9/libgfortran/libgfortran.la
  (gmake all-target-libgfortran install-target-libgfortran)

   func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
"-R${SB_INSTALL_PREFIX}/lib" \
"${SB_INSTALL_PREFIX}/lib"
  (gmake all-target-libjava install-target-libjava)
 func_fixup_libjava "${GCC_SYSTYPE}/sparcv9/libjava" \
"-R${SB_INSTALL_PREFIX}/lib/sparcv9" \
"${SB_INSTALL_PREFIX}/lib/sparcv9"
  (gmake all-target-libjava install-target-libjava))
  ;;
esac
)

if [ -f ${SB_INSTALL_PREFIX}/lib/pkgconfig/libgcj-4.4.pc ]; then
  ${SB_PATH_SED} -i "\
s!-L\(\${libdir}\)!-L\1 ${CC_LD_RT}\1!;" \
${SB_INSTALL_PREFIX}/lib/pkgconfig/libgcj-4.4.pc
fi

# fix paths in .la
${SB_PATH_SED} -i -e "\
s!/lib/../lib64!/lib64!g; \
s!-L/lib64 !!g; \
s!-L/usr/lib64 !!g; \
s!-L/lib !!g; \
s!-L/usr/lib !!g; \
s!-L${SB_BUILD_PREFIX}[^ ][^ ]* !!g; \
s!-L${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/bin !!g; \
s!-L${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}/lib !!g;" \
$(find ${SB_INSTALL_PREFIX} -name \*.la)

case "${SB_SYSTYPE}" in
*-aix*|*-solaris*)
  find ${SB_INSTALL_PREFIX} -name \*.la | while read _la; do
    ${SB_PATH_SED} -i -e "\
s!-L${SB_INSTALL_PREFIX}/lib/gcc/${GCC_SYSTYPE}/${_gcc_dir_ver}/\.\./\.\./\.\.!-L${SB_INSTALL_PREFIX}/lib!g" ${_la}
  done
  ;;
esac

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/texinfo
${SB_PATH_INSTALL} -m 644 -o root -g 0 gcc/doc/bugreport.texi \
gcc/doc/collect2.texi gcc/doc/compat.texi gcc/doc/configfiles.texi \
gcc/doc/configterms.texi gcc/doc/contrib.texi \
gcc/doc/contribute.texi gcc/doc/cppenv.texi gcc/doc/cppinternals.texi \
gcc/doc/cppopts.texi gcc/doc/cpp.texi gcc/doc/c-tree.texi \
gcc/doc/extend.texi gcc/doc/fragments.texi gcc/doc/frontends.texi \
gcc/doc/gcc.texi gcc/doc/gccint.texi gcc/doc/gcov.texi \
gcc/doc/gnu.texi gcc/doc/gty.texi gcc/doc/headerdirs.texi \
gcc/doc/hostconfig.texi gcc/doc/include/fdl.texi \
gcc/doc/include/funding.texi gcc/doc/include/gcc-common.texi \
gcc/doc/include/gpl.texi gcc/doc/install.texi \
gcc/doc/interface.texi gcc/doc/languages.texi \
gcc/doc/makefile.texi gcc/doc/md.texi \
gcc/doc/passes.texi gcc/doc/portability.texi gcc/doc/rtl.texi \
gcc/doc/service.texi gcc/doc/sourcebuild.texi gcc/doc/standards.texi \
gcc/doc/tm.texi gcc/doc/trouble.texi gcc/fortran/intrinsic.texi \
gcc/fortran/invoke.texi gcc/fortran/gfortran.texi gcc/java/gcj.texi \
${_docdir}/texinfo

# create runtime library
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${SB_VAR_GCC_RT}
(cd ${SB_INSTALL_PREFIX}
 gtar cf - lib | (cd ${SB_VAR_GCC_RT}; gtar xpf -))

rm -rf ${SB_VAR_GCC_RT}/lib/charset.alias \
${SB_VAR_GCC_RT}/lib/gcc  ${SB_VAR_GCC_RT}/lib/security \
${SB_VAR_GCC_RT}/lib/32 ${SB_VAR_GCC_RT}/lib/64


# Rebuild libada runtime libs
(case "${SB_SYSTYPE}" in
 hppa*-hpux11*)
   ${SB_PATH_SED} -i -e "\
s#^LIBADA_RPATH_DIR =.*#LIBADA_RPATH_DIR = ${SB_VAR_GCC_RT}/lib#;\
s#^LIBADA_RPATH_PREFIX =.*#LIBADA_RPATH_PREFIX = ${CC_LD_RT}#" \
   ${SB_BUILD_PREFIX}-objdir/gcc/ada/gcc-interface/Makefile ;;
 *-irix*)
   ${SB_PATH_SED} -i -e "\
s#^LIBADA_RPATH_DIR =.*#LIBADA_RPATH_DIR = ${SB_VAR_GCC_RT}/lib32#;\
s#^LIBADA_RPATH_PREFIX =.*#LIBADA_RPATH_PREFIX = ${CC_LD_RT}#" \
   ${SB_BUILD_PREFIX}-objdir/gcc/ada/gcc-interface/Makefile ;;
 *-linux*|*-osf*|*-solaris*)
   ${SB_PATH_SED} -i -e "\
s#^LIBADA_RPATH_DIR =.*#LIBADA_RPATH_DIR = ${SB_VAR_GCC_RT}/lib#;\
s#^LIBADA_RPATH_PREFIX =.*#LIBADA_RPATH_PREFIX = ${CC_LD_RT}#" \
   ${SB_BUILD_PREFIX}-objdir/gcc/ada/gcc-interface/Makefile ;;
 esac

rm -f ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libada/stamp-libada \
${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/*/libada/stamp-libada \
gcc/ada/stamp-*
rm -f ${SB_BUILD_PREFIX}-objdir/gcc/ada/*.o \
${SB_BUILD_PREFIX}-objdir/gcc/ada/rts/*.o \
${SB_BUILD_PREFIX}-objdir/gcc/ada/rts_*/*.o \
${SB_BUILD_PREFIX}-objdir/gcc/ada/rts/*.so \
${SB_BUILD_PREFIX}-objdir/gcc/ada/rts_*/*.so
(gmake -C ${SB_BUILD_PREFIX}-objdir all-target-libada))

# relink some libraries in runtime directory on AIX and HP-UX to
# set correct runtime path
case "${SB_SYSTYPE}" in
*-aix*)
  # non-pthread library
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
   rm libstdc++.la
   gmake install \
     LDFLAGS="-Wl,-blibpath:${SB_VAR_GCC_RT}/lib:/usr/lib" \
     toolexeclibdir="${SB_VAR_GCC_RT}/lib")

  # pthread library
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/pthread/libstdc++-v3/src
   rm libstdc++.la
   gmake install \
     LDFLAGS="-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/pthread:/usr/lib" \
     toolexeclibdir="${SB_VAR_GCC_RT}/lib/pthread")

  for _arch in power powerpc ppc64; do
    [ ! -d "${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/${_arch}" ] && continue

    # non-pthread libraries
    (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/${_arch}/libstdc++-v3/src
    rm libstdc++.la
    gmake install \
      LDFLAGS="-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/${_arch}:/usr/lib" \
      toolexeclibdir="${SB_VAR_GCC_RT}/lib/${_arch}")

    # pthread libraries
    (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/pthread/${_arch}/libstdc++-v3/src
    rm libstdc++.la
    gmake install \
      LDFLAGS="-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/pthread/${_arch}:/usr/lib" \
      toolexeclibdir="${SB_VAR_GCC_RT}/lib/pthread/${_arch}")
  done

  (cd ${SB_BUILD_PREFIX}-objdir

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-Wl,-blibpath:${SB_VAR_GCC_RT}/lib:/usr/lib" \
"${SB_VAR_GCC_RT}/lib"

  func_sed_makefile "${GCC_SYSTYPE}/pthread/libgomp/Makefile" \
"-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/pthread:/usr/lib" \
"${SB_VAR_GCC_RT}/lib/pthread"

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-Wl,-blibpath:${SB_VAR_GCC_RT}/lib:/usr/lib" \
"${SB_VAR_GCC_RT}/lib"

  func_sed_makefile "${GCC_SYSTYPE}/pthread/libgfortran/Makefile" \
"-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/pthread:/usr/lib" \
"${SB_VAR_GCC_RT}/lib/pthread"

  for _arch in power powerpc ppc64; do
    [ ! -d "${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/${_arch}" ] && continue

    func_sed_makefile "${GCC_SYSTYPE}/${_arch}/libgomp/Makefile" \
"-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/${_arch}:/usr/lib" \
"${SB_VAR_GCC_RT}/lib/${_arch}"

    func_sed_makefile "${GCC_SYSTYPE}/pthread/${_arch}/libgomp/Makefile" \
"-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/pthread/${_arch}:/usr/lib" \
"${SB_VAR_GCC_RT}/lib/pthread/${_arch}"

    func_sed_makefile "${GCC_SYSTYPE}/${_arch}/libgfortran/Makefile" \
"-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/${_arch}:/usr/lib" \
"${SB_VAR_GCC_RT}/lib/${_arch}"

    func_sed_makefile "${GCC_SYSTYPE}/pthread/${_arch}/libgfortran/Makefile" \
"-Wl,-blibpath:${SB_VAR_GCC_RT}/lib/pthread/${_arch}:/usr/lib" \
"${SB_VAR_GCC_RT}/lib/pthread/${_arch}"
  done
  rm -f ${GCC_SYSTYPE}/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/power/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/powerpc/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/ppc64/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/pthread/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/pthread/power/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/pthread/powerpc/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/pthread/ppc64/libgomp/libgomp.la
  (gmake all-target-libgomp install-target-libgomp)

  rm -f ${GCC_SYSTYPE}/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/power/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/powerpc/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/ppc64/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/pthread/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/pthread/power/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/pthread/powerpc/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/pthread/ppc64/libgfortran/libgfortran.la
  (gmake all-target-libgfortran install-target-libgfortran))
  ;;
ia64*-hpux*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
   rm libstdc++.la
   gmake install LDFLAGS="-Wl,+b,${SB_VAR_GCC_RT}/lib" \
     toolexeclibdir="${SB_VAR_GCC_RT}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/hpux64/libstdc++-v3/src
   rm libstdc++.la
   gmake install LDFLAGS="-Wl,+b,${SB_VAR_GCC_RT}/lib/hpux64" \
     toolexeclibdir="${SB_VAR_GCC_RT}/lib/hpux64")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-Wl,+b,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  func_sed_makefile "${GCC_SYSTYPE}/hpux64/libgfortran/Makefile" \
"-Wl,+b,${SB_VAR_GCC_RT}/lib/hpux64" \
"${SB_VAR_GCC_RT}/lib/hpux64"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/hpux64/libgfortran/libgfortran.la
  (gmake all-target-libgfortran)
  (cd ${GCC_SYSTYPE}/libgfortran
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/hpux64/libgfortran
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-Wl,+b,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  func_sed_makefile "${GCC_SYSTYPE}/hpux64/libssp/Makefile" \
"-Wl,+b,${SB_VAR_GCC_RT}/lib/hpux64" \
"${SB_VAR_GCC_RT}/lib/hpux64"
  rm ${GCC_SYSTYPE}/libssp/libssp.la \
  ${GCC_SYSTYPE}/hpux64/libssp/libssp.la
  (gmake all-target-libssp)
  (cd ${GCC_SYSTYPE}/libssp
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/hpux64/libssp
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-Wl,+b,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  func_sed_makefile "${GCC_SYSTYPE}/hpux64/libgomp/Makefile" \
"-Wl,+b,${SB_VAR_GCC_RT}/lib/hpux64" \
"${SB_VAR_GCC_RT}/lib/hpux64"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/hpux64/libgomp/libgomp.la
  (gmake all-target-libgomp)
  (gmake -C ${GCC_SYSTYPE}/libgomp install-toolexeclibLTLIBRARIES)
  (gmake -C ${GCC_SYSTYPE}/hpux64/libgomp install-toolexeclibLTLIBRARIES))
  ;;
*-hpux11*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake LDFLAGS="-Wl,+s -L${SB_VAR_GCC_RT}/lib" \
        toolexeclibdir="${SB_VAR_GCC_RT}/lib"
  gmake install-toolexeclibLTLIBRARIES \
        LDFLAGS="-Wl,+s -L${SB_VAR_GCC_RT}/lib" \
        toolexeclibdir="${SB_VAR_GCC_RT}/lib")
  (cd ${SB_BUILD_PREFIX}-objdir
   func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
     "-Wl,+s -L${SB_VAR_GCC_RT}/lib" \
     "${SB_VAR_GCC_RT}/lib"
   rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
   (gmake all-target-libgfortran)
   (gmake -C ${GCC_SYSTYPE}/libgfortran install-toolexeclibLTLIBRARIES)
   func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
     "-Wl,+s -L${SB_VAR_GCC_RT}/lib" \
     "${SB_VAR_GCC_RT}/lib"
   rm ${GCC_SYSTYPE}/libffi/libffi.la
   (gmake all-target-libffi)
   (gmake -C ${GCC_SYSTYPE}/libffi install-toolexeclibLTLIBRARIES)
   func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
     "-Wl,+s -L${SB_VAR_GCC_RT}/lib" \
     "${SB_VAR_GCC_RT}/lib"
   rm ${GCC_SYSTYPE}/libssp/libssp.la
   (gmake all-target-libssp)
   (gmake -C ${GCC_SYSTYPE}/libssp install-toolexeclibLTLIBRARIES)

   func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
     "-Wl,+s -L${SB_VAR_GCC_RT}/lib" \
     "${SB_VAR_GCC_RT}/lib"
   rm ${GCC_SYSTYPE}/libgomp/libgomp.la
   (gmake all-target-libgomp)
   (gmake -C ${GCC_SYSTYPE}/libgomp install-toolexeclibLTLIBRARIES)

   func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
     "-Wl,+s -L${SB_VAR_GCC_RT}/lib" \
     "${SB_VAR_GCC_RT}/lib"
   ${SB_PATH_SED} -i -e 's|-L\$(here)/.libs||g' \
     -e "s|^lib_gnu_awt_xlib_la_LDFLAGS =.*|\
lib_gnu_awt_xlib_la_LDFLAGS = ${SB_VAR_GCC_RT}/lib/libstdc++.la \\\|g" \
     ${GCC_SYSTYPE}/libjava/Makefile
   (gmake all-target-libjava)
   (gmake -C ${GCC_SYSTYPE}/libjava install-toolexeclibLTLIBRARIES \
    install-dbexecLTLIBRARIES install-dbexecDATA))

  (cd ${SB_BUILD_PREFIX}-objdir/gcc/ada/rts
   ${SB_PATH_INSTALL} -o root -g 0 libgnat-4.4.sl \
     libgnarl-4.4.sl ${SB_VAR_GCC_RT}/lib
   ${SB_PATH_LN} -s libgnat-4.4.sl ${SB_VAR_GCC_RT}/lib/libgnat.sl
   ${SB_PATH_LN} -s libgnarl-4.4.sl ${SB_VAR_GCC_RT}/lib/libgnarl.sl)
  ;;
*-irix*)
  # copy libgcc_s from lib32 and lib64 directories
  (cd ${SB_INSTALL_PREFIX}/lib32
   ${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${SB_VAR_GCC_RT}/lib32
   gtar cf - libgcc_s* | (cd ${SB_VAR_GCC_RT}/lib32; gtar xpf - ))
  (cd ${SB_INSTALL_PREFIX}/lib64
   ${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${SB_VAR_GCC_RT}/lib64
   gtar cf - libgcc_s* | (cd ${SB_VAR_GCC_RT}/lib64; gtar xpf - ))

  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install LDFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT}/lib32" \
        toolexeclibdir="${SB_VAR_GCC_RT}/lib32")
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/32/libstdc++-v3/src
  rm libstdc++.la
  gmake install LDFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
    toolexeclibdir="${SB_VAR_GCC_RT}/lib")
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/64/libstdc++-v3/src
  rm libstdc++.la
  gmake install LDFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT}/lib64" \
    toolexeclibdir="${SB_VAR_GCC_RT}/lib64")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib32" \
"${SB_VAR_GCC_RT}/lib32"
  func_sed_makefile "${GCC_SYSTYPE}/32/libgfortran/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  func_sed_makefile "${GCC_SYSTYPE}/64/libgfortran/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib64" \
"${SB_VAR_GCC_RT}/lib64"

  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  rm -f ${GCC_SYSTYPE}/32/libgfortran/libgfortran.la
  rm -f ${GCC_SYSTYPE}/64/libgfortran/libgfortran.la
  (gmake all-target-libgfortran)
  (gmake -C ${GCC_SYSTYPE}/libgfortran install-toolexeclibLTLIBRARIES)
  (gmake -C ${GCC_SYSTYPE}/32/libgfortran install-toolexeclibLTLIBRARIES)
  (gmake -C ${GCC_SYSTYPE}/64/libgfortran install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib32" \
"${SB_VAR_GCC_RT}/lib32"
  func_sed_makefile "${GCC_SYSTYPE}/32/libssp/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  func_sed_makefile "${GCC_SYSTYPE}/64/libssp/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib64" \
"${SB_VAR_GCC_RT}/lib64"

  rm -f ${GCC_SYSTYPE}/libssp/libssp.la
  rm -f ${GCC_SYSTYPE}/32/libssp/libssp.la
  rm -f ${GCC_SYSTYPE}/64/libssp/libssp.la
  (gmake all-target-libssp)
  (gmake -C ${GCC_SYSTYPE}/libssp install-toolexeclibLTLIBRARIES)
  (gmake -C ${GCC_SYSTYPE}/32/libssp install-toolexeclibLTLIBRARIES)
  (gmake -C ${GCC_SYSTYPE}/64/libssp install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib32" \
"${SB_VAR_GCC_RT}/lib32"
  func_sed_makefile "${GCC_SYSTYPE}/32/libgomp/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  func_sed_makefile "${GCC_SYSTYPE}/64/libgomp/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib64" \
"${SB_VAR_GCC_RT}/lib64"

  rm -f ${GCC_SYSTYPE}/libgomp/libgomp.la
  rm -f ${GCC_SYSTYPE}/32/libgomp/libgomp.la
  rm -f ${GCC_SYSTYPE}/64/libgomp/libgomp.la
  (gmake all-target-libgomp)
  (gmake -C ${GCC_SYSTYPE}/libgomp install-toolexeclibLTLIBRARIES)
  (gmake -C ${GCC_SYSTYPE}/32/libgomp install-toolexeclibLTLIBRARIES)
  (gmake -C ${GCC_SYSTYPE}/64/libgomp install-toolexeclibLTLIBRARIES)

  func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib32" \
"${SB_VAR_GCC_RT}/lib32"
  func_fixup_libjava "${GCC_SYSTYPE}/32/libjava" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  func_fixup_libjava "${GCC_SYSTYPE}/64/libjava" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib64" \
"${SB_VAR_GCC_RT}/lib64"
  (gmake all-target-libjava)
  (gmake -C ${GCC_SYSTYPE}/libjava install-toolexeclibLTLIBRARIES \
     install-dbexecLTLIBRARIES install-dbexecDATA)
  (gmake -C ${GCC_SYSTYPE}/32/libjava install-toolexeclibLTLIBRARIES \
     install-dbexecLTLIBRARIES install-dbexecDATA)
  (gmake -C ${GCC_SYSTYPE}/64/libjava install-toolexeclibLTLIBRARIES \
     install-dbexecLTLIBRARIES install-dbexecDATA))

  (cd ${SB_BUILD_PREFIX}-objdir/gcc/ada/rts
   ${SB_PATH_INSTALL} -o root -g 0 libgnat-4.4.so \
     libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib32
   ${SB_PATH_LN} -s libgnat-4.4.so ${SB_VAR_GCC_RT}/lib32/libgnat.so
   ${SB_PATH_LN} -s libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib32/libgnarl.so)
  ;;
*-linux*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install LDFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
    toolexeclibdir="${SB_VAR_GCC_RT}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir
   func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
     "-R${SB_VAR_GCC_RT}/lib" "${SB_VAR_GCC_RT}/lib"
  (gmake all-target-libjava)
  (cd ${GCC_SYSTYPE}/libjava
   gmake install-toolexeclibLTLIBRARIES install-dbexecDATA \
     install-dbexecLTLIBRARIES))

  (cd ${SB_BUILD_PREFIX}-objdir/gcc/ada/rts
   ${SB_PATH_INSTALL} -o root -g 0 libgnat-4.4.so \
   libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib
   ${SB_PATH_LN} -s libgnat-4.4.so ${SB_VAR_GCC_RT}/lib/libgnat.so
   ${SB_PATH_LN} -s libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib/libgnarl.so)

  case "${SB_SYSTYPE}" in
  x86_64*-linux*)
    (cd ${SB_VAR_GCC_RT}
     rm -rf lib64
     ln -s ./lib lib64) ;;
  esac
  ;;
*-osf*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
    toolexeclibdir="${SB_VAR_GCC_RT}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libffi/libffi.la
  (gmake all-target-libffi)
  (cd ${GCC_SYSTYPE}/libffi
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la
  (gmake all-target-libgomp)
  (cd ${GCC_SYSTYPE}/libgomp
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  (gmake all-target-libgfortran)
  (cd ${GCC_SYSTYPE}/libgfortran
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-Wl,-rpath,${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libssp/libssp.la
  (gmake all-target-libssp)
  (cd ${GCC_SYSTYPE}/libssp
  gmake install-toolexeclibLTLIBRARIES))

  (cd ${SB_BUILD_PREFIX}-objdir/gcc/ada/rts
  ${SB_PATH_INSTALL} -o root -g 0 libgnat-4.4.so \
libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib
  ${SB_PATH_LN} -s libgnat-4.4.so ${SB_VAR_GCC_RT}/lib/libgnat.so
  ${SB_PATH_LN} -s libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib/libgnarl.so)
  ;;
i?86*-solaris*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-R${SB_VAR_GCC_RT}/lib" \
    toolexeclibdir="${SB_VAR_GCC_RT}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/amd64/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-R${SB_VAR_GCC_RT}/lib/amd64" \
    toolexeclibdir="${SB_VAR_GCC_RT}/lib/amd64")

  (cd ${SB_BUILD_PREFIX}-objdir
   func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libffi/libffi.la
  func_sed_makefile "${GCC_SYSTYPE}/amd64/libffi/Makefile" \
"-R${SB_VAR_GCC_RT}/lib/amd64" \
"${SB_VAR_GCC_RT}/lib/amd64"
  rm ${GCC_SYSTYPE}/libffi/libffi.la \
  ${GCC_SYSTYPE}/amd64/libffi/libffi.la
  (gmake all-target-libffi)
  (cd ${GCC_SYSTYPE}/libffi
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/amd64/libffi
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la
  func_sed_makefile "${GCC_SYSTYPE}/amd64/libgomp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib/amd64" \
"${SB_VAR_GCC_RT}/lib/amd64"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/amd64/libgomp/libgomp.la
  (gmake all-target-libgomp)
  (cd ${GCC_SYSTYPE}/libgomp
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/amd64/libgomp
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  func_sed_makefile "${GCC_SYSTYPE}/amd64/libgfortran/Makefile" \
"-R${SB_VAR_GCC_RT}/lib/amd64" \
"${SB_VAR_GCC_RT}/lib/amd64"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/amd64/libgfortran/libgfortran.la
  (gmake all-target-libgfortran)
  (cd ${GCC_SYSTYPE}/libgfortran
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/amd64/libgfortran
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libssp/libssp.la
  func_sed_makefile "${GCC_SYSTYPE}/amd64/libssp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib/amd64" \
"${SB_VAR_GCC_RT}/lib/amd64"
  rm ${GCC_SYSTYPE}/libssp/libssp.la \
  ${GCC_SYSTYPE}/amd64/libssp/libssp.la
  (cd ${GCC_SYSTYPE}/libssp
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/amd64/libssp
  gmake install-toolexeclibLTLIBRARIES)

   func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
 func_fixup_libjava "${GCC_SYSTYPE}/amd64/libjava" \
"-R${SB_VAR_GCC_RT}/lib/amd64" \
"${SB_VAR_GCC_RT}/lib/amd64"
  rm ${GCC_SYSTYPE}/libjava/*.la \
  ${GCC_SYSTYPE}/amd64/libjava/*.la
  (gmake all-target-libjava)
  (cd ${GCC_SYSTYPE}/amd64/libjava
  gmake install-toolexeclibLTLIBRARIES install-dbexecDATA \
    install-dbexecLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/libjava
  gmake install-toolexeclibLTLIBRARIES install-dbexecDATA \
    install-dbexecLTLIBRARIES))

  (cd ${SB_BUILD_PREFIX}-objdir/gcc/ada/rts
  ${SB_PATH_INSTALL} -o root -g 0 libgnat-4.4.so \
libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib
  ${SB_PATH_LN} -s libgnat-4.4.so ${SB_VAR_GCC_RT}/lib/libgnat.so
  ${SB_PATH_LN} -s libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib/libgnarl.so)
  ;;
*-solaris2.6)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
  rm libstdc++.la
  gmake install \
    LDFLAGS="-R${SB_VAR_GCC_RT}/lib" \
    toolexeclibdir="${SB_VAR_GCC_RT}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir
  func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libffi/libffi.la
  (gmake all-target-libffi)
  (cd ${GCC_SYSTYPE}/libffi
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la
  (gmake all-target-libgomp)
  (cd ${GCC_SYSTYPE}/libgomp
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  (gmake all-target-libgfortran)
  (cd ${GCC_SYSTYPE}/libgfortran
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libssp/libssp.la
  (gmake all-target-libssp)
  (cd ${GCC_SYSTYPE}/libssp
   gmake install-toolexeclibLTLIBRARIES))

  (cd ${SB_BUILD_PREFIX}-objdir/gcc/ada/rts
  ${SB_PATH_INSTALL} -o root -g 0 libgnat-4.4.so \
libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib
  ${SB_PATH_LN} -s libgnat-4.4.so ${SB_VAR_GCC_RT}/lib/libgnat.so
  ${SB_PATH_LN} -s libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib/libgnarl.so)
  ;;
*-solaris*)
  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/libstdc++-v3/src
   rm libstdc++.la
   gmake install LDFLAGS="-R${SB_VAR_GCC_RT}/lib" \
     toolexeclibdir="${SB_VAR_GCC_RT}/lib")

  (cd ${SB_BUILD_PREFIX}-objdir/${GCC_SYSTYPE}/sparcv9/libstdc++-v3/src
   rm libstdc++.la
   gmake install LDFLAGS="-R${SB_VAR_GCC_RT}/lib/sparcv9" \
     toolexeclibdir="${SB_VAR_GCC_RT}/lib/sparcv9")

  (cd ${SB_BUILD_PREFIX}-objdir
   func_sed_makefile "${GCC_SYSTYPE}/libffi/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libffi/libffi.la
  func_sed_makefile "${GCC_SYSTYPE}/sparcv9/libffi/Makefile" \
"-R${SB_VAR_GCC_RT}/lib/sparcv9" \
"${SB_VAR_GCC_RT}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/libffi/libffi.la \
  ${GCC_SYSTYPE}/sparcv9/libffi/libffi.la
  (gmake all-target-libffi)
  (cd ${GCC_SYSTYPE}/libffi
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/sparcv9/libffi
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgomp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la
  func_sed_makefile "${GCC_SYSTYPE}/sparcv9/libgomp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib/sparcv9" \
"${SB_VAR_GCC_RT}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/libgomp/libgomp.la \
  ${GCC_SYSTYPE}/sparcv9/libgomp/libgomp.la
  (gmake all-target-libgomp)
  (cd ${GCC_SYSTYPE}/libgomp
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/sparcv9/libgomp
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libgfortran/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la
  func_sed_makefile "${GCC_SYSTYPE}/sparcv9/libgfortran/Makefile" \
"-R${SB_VAR_GCC_RT}/lib/sparcv9" \
"${SB_VAR_GCC_RT}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/libgfortran/libgfortran.la \
  ${GCC_SYSTYPE}/sparcv9/libgfortran/libgfortran.la
  (gmake all-target-libgfortran)
  (cd ${GCC_SYSTYPE}/libgfortran
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/sparcv9/libgfortran
  gmake install-toolexeclibLTLIBRARIES)

  func_sed_makefile "${GCC_SYSTYPE}/libssp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
  rm ${GCC_SYSTYPE}/libssp/libssp.la
  func_sed_makefile "${GCC_SYSTYPE}/sparcv9/libssp/Makefile" \
"-R${SB_VAR_GCC_RT}/lib/sparcv9" \
"${SB_VAR_GCC_RT}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/libssp/libssp.la \
  ${GCC_SYSTYPE}/sparcv9/libssp/libssp.la
  (cd ${GCC_SYSTYPE}/libssp
  gmake install-toolexeclibLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/sparcv9/libssp
  gmake install-toolexeclibLTLIBRARIES)

   func_fixup_libjava "${GCC_SYSTYPE}/libjava" \
"-R${SB_VAR_GCC_RT}/lib" \
"${SB_VAR_GCC_RT}/lib"
 func_fixup_libjava "${GCC_SYSTYPE}/sparcv9/libjava" \
"-R${SB_VAR_GCC_RT}/lib/sparcv9" \
"${SB_VAR_GCC_RT}/lib/sparcv9"
  rm ${GCC_SYSTYPE}/libjava/*.la \
  ${GCC_SYSTYPE}/sparcv9/libjava/*.la
  (gmake all-target-libjava)
  (cd ${GCC_SYSTYPE}/libjava
  gmake install-toolexeclibLTLIBRARIES install-dbexecDATA \
    install-dbexecLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/sparcv9/libjava
  gmake install-toolexeclibLTLIBRARIES install-dbexecDATA \
    install-dbexecLTLIBRARIES)
  (cd ${GCC_SYSTYPE}/libjava
  gmake install-toolexeclibLTLIBRARIES install-dbexecDATA \
    install-dbexecLTLIBRARIES))

  (cd ${SB_BUILD_PREFIX}-objdir/gcc/ada/rts
  ${SB_PATH_INSTALL} -o root -g 0 libgnat-4.4.so \
libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib
  ${SB_PATH_LN} -s libgnat-4.4.so ${SB_VAR_GCC_RT}/lib/libgnat.so
  ${SB_PATH_LN} -s libgnarl-4.4.so ${SB_VAR_GCC_RT}/lib/libgnarl.so)
  ;;
esac

${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}/lib/gcc

if [ -f ${SB_VAR_GCC_RT}/lib/pkgconfig/libgcj-4.4.pc ]; then
  ${SB_PATH_SED} -i "\
s!^libdir=.*!libdir=${SB_VAR_GCC_RT}/lib!" \
${SB_VAR_GCC_RT}/lib/pkgconfig/libgcj-4.4.pc
fi

case "${SB_SYSTYPE}" in
*-aix*)
  find ${SB_VAR_GCC_RT} -name \*.la | while read _la; do
    ${SB_PATH_SED} -i -e "\
s!old_library=.*!old_library=''!; \
s!-L${SB_BUILD_PREFIX}[^ ][^ ]* !!g; \
s!-L[^ ][^ ]*/bin !!g; \
s!${SB_INSTALL_PREFIX}/lib/gcc[^ ][^ ]* !!; \
s!${SB_INSTALL_PREFIX}/lib!${SB_VAR_GCC_RT}/lib!g;" ${_la}
  done
  ;;
*)
  # no static libraries
  find ${SB_VAR_GCC_RT} -name \*.a -exec rm {} \;

  # make sure every .la has a .so or .sl
  find ${SB_VAR_GCC_RT} -name \*.la | while read _la; do
    _so=${_la%%la}so
    _sl=${_la%%la}sl
    _a=${_la%%la}a

    [ ! -f ${_a} -a ! -f ${_so} -a ! -f ${_sl} ] && rm -f ${_la}
  done

  find ${SB_VAR_GCC_RT} -name \*.la | while read _la; do
    ${SB_PATH_SED} -i -e "\
s!old_library=.*!old_library=''!; \
s!-L/lib/../lib64 !!g; \
s!-L/usr/lib/../lib64 !!g; \
s!-L${SB_BUILD_PREFIX}[^ ][^ ]* !!g; \
s!-L[^ ][^ ]*/bin !!g; \
s!${SB_INSTALL_PREFIX}/lib/gcc[^ ][^ ]* !!; \
s!${SB_INSTALL_PREFIX}/lib!${SB_VAR_GCC_RT}/lib!g;" ${_la}
  done

  case "${SB_SYSTYPE}" in
  *-linux*)
    # fix libdir path in .la files
    find ${SB_INSTALL_PREFIX} -name \*.la | while read _la; do
      ${SB_PATH_SED} -i -e "\
s!^libdir=.*!libdir='${SB_INSTALL_PREFIX}/lib'!" ${_la}
    done

    find ${SB_VAR_GCC_RT} -name \*.la | while read _la; do
      ${SB_PATH_SED} -i -e "\
s!-L${SB_INSTALL_PREFIX}/${GCC_SYSTYPE}[^ ][^ ]* !!; \
s!^libdir=.*!libdir='${SB_VAR_GCC_RT}/lib'!" ${_la}
    done
    ;;
  esac
  ;;
esac

# add runtime search path for libstdc++ when linking
_specs="${SB_INSTALL_PREFIX}/lib/gcc/${GCC_SYSTYPE}/${_gcc_dir_ver}/specs"
case "${SB_SYSTYPE}" in
ia64*-hpux*)
  ${SB_INSTALL_PREFIX}/bin/gcc -dumpspecs >${_specs}

  ${SB_PATH_SED} -i -e "\
/link_command:/ {
i\\
*rpath:
i\\
-L${SB_VAR_GCC_RT}/lib
i\\

i\\
*rpath64:
i\\
-L${SB_VAR_GCC_RT}/lib/hpux64
i\\

}
s/%{static:}/%{static:} %{!mlp64:%(rpath)} %{mlp64:%(rpath64)}/" \
  ${_specs} ;;
*-hpux*)
  ${SB_INSTALL_PREFIX}/bin/gcc -dumpspecs >${_specs}

  ${SB_PATH_SED} -i -e "/link_command:/ {
i\\
*rpath:
i\\
-L${SB_VAR_GCC_RT}/lib
i\\

}" -e "s/%{static:}/%{static:} %(rpath)/" ${_specs} ;;
*-irix*)
  ${SB_INSTALL_PREFIX}/bin/gcc -dumpspecs >${_specs}

  ${SB_PATH_SED} -i -e "/link_command:/ {
i\\
*rpath:
i\\
-rpath ${SB_VAR_GCC_RT}/lib32
i\\

i\\
*rpath32:
i\\
-rpath ${SB_VAR_GCC_RT}/lib
i\\

i\\
*rpath64:
i\\
-rpath ${SB_VAR_GCC_RT}/lib64
i\\

}" -e "s/%(link_gcc_c_sequence)/\
%{!mabi=32:%{!mabi=64:%(rpath)}} %{mabi=32:%(rpath32)} %{mabi=64:%(rpath64)} %(link_gcc_c_sequence)/" \
  ${_specs} ;;
x86_64*-linux*)
  ${SB_INSTALL_PREFIX}/bin/gcc -dumpspecs >${_specs}

  ${SB_PATH_SED} -i -e "\
/link_command:/ {
i\\
*rpath:
i\\
-rpath ${SB_VAR_GCC_RT}/lib
i\\

}
s/%(link_gcc_c_sequence)/%{!m32:%(rpath)} %(link_gcc_c_sequence)/" \
  ${_specs} ;;
*-linux*)
  ${SB_INSTALL_PREFIX}/bin/gcc -dumpspecs >${_specs}

  ${SB_PATH_SED} -i -e "\
/link_command:/ {
i\\
*rpath:
i\\
-rpath ${SB_VAR_GCC_RT}/lib
i\\

}
s/%(link_gcc_c_sequence)/%(rpath) %(link_gcc_c_sequence)/" \
  ${_specs} ;;
i?86*-solaris*)
  ${SB_INSTALL_PREFIX}/bin/gcc -dumpspecs >${_specs}

  ${SB_PATH_SED} -i -e "/link_command:/ {
i\\
*rpath:
i\\
-R${SB_VAR_GCC_RT}/lib
i\\

i\\
*rpath64:
i\\
-R${SB_VAR_GCC_RT}/lib/amd64
i\\

}" -e "s/%(link_gcc_c_sequence)/\
%{!m64:%(rpath)} %{m64:%(rpath64)} %(link_gcc_c_sequence)/" \
  ${_specs} ;;
*-solaris2.6*)
  ${SB_INSTALL_PREFIX}/bin/gcc -dumpspecs >${_specs}

  ${SB_PATH_SED} -i -e "/link_command:/ {
i\\
*rpath:
i\\
-R${SB_VAR_GCC_RT}/lib
i\\

}" -e "s/%(link_gcc_c_sequence)/\
%(rpath) %(link_gcc_c_sequence)/" ${_specs} ;;
*-solaris*)
  ${SB_INSTALL_PREFIX}/bin/gcc -dumpspecs >${_specs}

  ${SB_PATH_SED} -i -e "/link_command:/ {
i\\
*rpath:
i\\
-R${SB_VAR_GCC_RT}/lib
i\\

i\\
*rpath64:
i\\
-R${SB_VAR_GCC_RT}/lib/sparcv9
i\\

}" -e "s/%(link_gcc_c_sequence)/\
%{!m64:%(rpath)} %{m64:%(rpath64)} %(link_gcc_c_sequence)/" \
  ${_specs} ;;
esac


case "${SB_SYSTYPE}" in
hppa*-hpux11*)
  rm -f ${SB_VAR_GCC_RT}/lib/libffi.* \
  ${SB_INSTALL_PREFIX}/lib/libffi.* \
  ${SB_INSTALL_PREFIX}/lib/gcc/${GCC_SYSTYPE}/${_gcc_dir_ver}/include/ffi*.h ;;
esac
]]>
    </install>

    <uninstall>
      <remove-db-entry program="binutils"
        module="gcc-4.4.6">v==2.21.1</remove-db-entry>
    </uninstall>

    <purge>
<![CDATA[
rm -rf ${SB_BUILD_PREFIX} ${BUILD_PREFIX}-objdir ${_gnat_dir}
]]>
    </purge>

    <notes>
      <change from="4.3.x" to="4.4.x">
        <items name="Caveats">
          <item><para>__builtin_stdarg_start has been completely
removed from GCC. Support for &lt;varargs.h&gt; had been deprecated
since GCC 4.0. Use __builtin_va_start as a replacement.</para></item>
          <item><para>Some of the errors issued by the C++ front end
that could be downgraded to warnings in previous releases by using
-fpermissive are now warnings by default. They can be converted into
errors by using -pedantic-errors.</para></item>
          <item><para>Use of the cpp assertion extension will now emit
a warning when -Wdeprecated or -pedantic is used. This extension has
been deprecated for many years, but never warned about.</para></item>
          <item><para>Packed bit-fields of type char were not properly
bit-packed on many targets prior to GCC 4.4. On these targets, the fix
in GCC 4.4 causes an ABI change. For example there is no longer a
4-bit padding between field a and b in this structure:</para>
          <screen>
struct foo
{
  char a:4;
  char b:8;
} __attribute__ ((packed));
          </screen>
          <para>There is a new warning to help identify
fields that are affected:</para>
          <screen>
foo.c:5: note: Offset of packed bit-field 'b' has changed in GCC 4.4
          </screen>
          <para>The warning can be disabled with
-Wno-packed-bitfield-compat.</para></item>
          <item><para>On ARM EABI targets, the C++ mangling of the
va_list type has been changed to conform to the current revision of
the EABI. This does not affect the libstdc++ library included with
GCC.</para></item>
          <item><para>The SCOUNT and POS bits of the MIPS DSP control
register are now treated as global. Previous versions of GCC treated
these fields as call-clobbered instead.</para></item>
          <item><para>The MIPS port no longer recognizes the h asm
constraint. It was necessary to remove this constraint in order to
avoid generating unpredictable code sequences.</para>
          <para>One of the main uses of the h constraint was to
extract the high part of a multiplication on 64-bit targets. For
example:</para>
          <screen>
asm ("dmultu\t%1,%2" : "=h" (result) : "r" (x), "r" (y));
          </screen>
          <para>You can now achieve the same effect using 128-bit
types:</para>
          <screen>
typedef unsigned int uint128_t __attribute__((mode(TI)));
result = ((uint128_t) x * y) &gt;&gt; 64;
          </screen>
          <para>The second sequence is better in many ways. For
example, if x and y are constants, the compiler can perform the
multiplication at compile time. If x and y are not constants, the
compiler can schedule the runtime multiplication better than it can
schedule an asm statement.</para></item>
          <item><para>Support for a number of older systems and
recently unmaintained or untested target ports of GCC has been
declared obsolete in GCC 4.4. Unless there is activity to revive them,
the next release of GCC will have their sources permanently
removed.</para>
          <para>The following ports for individual systems on
particular architectures have been obsoleted:</para>
          <unorderedlist>
            <item><para>Generic a.out on IA32 and m68k
(i[34567]86-*-aout*, m68k-*-aout*)</para></item>
            <item><para>Generic COFF on ARM, H8300, IA32, m68k and
SH (arm-*-coff*, armel-*-coff*, h8300-*-*, i[34567]86-*-coff*,
m68k-*-coff*, sh-*-*). This does not affect other more specific
targets using the COFF object format on those architectures, or the
more specific H8300 and SH targets (h8300-*-rtems*, h8300-*-elf*,
sh-*-elf*, sh-*-symbianelf*, sh-*-linux*, sh-*-netbsdelf*,
sh-*-rtems*, sh-wrs-vxworks).</para></item>
            <item><para>2BSD on PDP-11 (pdp11-*-bsd)</para></item>
            <item><para>AIX 4.1 and 4.2 on PowerPC
(rs6000-ibm-aix4.[12]*, powerpc-ibm-aix4.[12]*)</para></item>
            <item><para>Tuning support for Itanium1 (Merced)
variants. Note that code tuned for Itanium2 should also run correctly
on Itanium1.</para></item>
          </unorderedlist></item>
          <item><para>The protoize and unprotoize utilities have been
obsoleted and will be removed in GCC 4.5. These utilities have not
been installed by default since GCC 3.0.</para></item>
          <item><para>Support has been removed for all the
configurations obsoleted in GCC 4.3.</para></item>
          <item><para>Unknown -Wno-* options are now silently ignored
by GCC if no other diagnostics are issued. If other diagnostics are
issued, then GCC warns about the unknown options.</para></item>
          <item><para>More information on porting to GCC 4.4 from
previous versions of GCC can be found in the porting guide for this
release.</para></item>
        </items>

        <items name="General Optimizer Improvements">
          <item><para>A new command-line switch -findirect-inlining
has been added. When turned on it allows the inliner to also inline
indirect calls that are discovered to have known targets at compile
time thanks to previous inlining.</para></item>
          <item><para>A new command-line switch
-ftree-switch-conversion has been added. This new pass turns simple
initializations of scalar variables in switch statements into
initializations from a static array, given that all the values are
known at compile time and the ratio between the new array size and the
original switch branches does not exceed the parameter --param
switch-conversion-max-branch-ratio (default is eight).</para></item>
          <item><para>A new command-line switch
-ftree-builtin-call-dce has been added. This optimization eliminates
unnecessary calls to certain builtin functions when the return value
is not used, in cases where the calls can not be eliminated entirely
because the function may set errno. This optimization is on by default
at -O2 and above.</para></item>
          <item><para>A new command-line switch -fconserve-stack
directs the compiler to minimize stack usage even if it makes the
generated code slower. This affects inlining decisions.</para></item>
          <item><para>When the assembler supports it, the compiler
will now emit unwind information using assembler .cfi directives. This
makes it possible to use such directives in inline assembler code. The
new option -fno-dwarf2-cfi-asm directs the compiler to not use .cfi
directives.</para></item>
          <item><para>The Graphite branch has been merged. This merge
has brought in a new framework for loop optimizations based on a
polyhedral intermediate representation. These optimizations apply to
all the languages supported by GCC. The following new code
transformations are available in GCC 4.4:</para>
          <unorderedlist>
            <item><para>-floop-interchange performs loop interchange
transformations on loops. Interchanging two nested loops switches the
inner and outer loops. For example, given a loop like:</para>
            <screen>
DO J = 1, M
  DO I = 1, N
    A(J, I) = A(J, I) * C
  ENDDO
ENDDO
            </screen>
            <para>loop interchange will transform the loop as if
the user had written:</para>
            <screen>
DO I = 1, N
  DO J = 1, M
    A(J, I) = A(J, I) * C
  ENDDO
ENDDO
            </screen>
            <para>which can be beneficial when N is larger than
the caches, because in Fortran, the elements of an array are stored in
memory contiguously by column, and the original loop iterates over
rows, potentially creating at each access a cache miss.</para></item>
            <item><para>-floop-strip-mine performs loop strip mining
transformations on loops. Strip mining splits a loop into two nested
loops. The outer loop has strides equal to the strip size and the
inner loop has strides of the original loop within a strip. For
example, given a loop like:</para>
            <screen>
DO I = 1, N
  A(I) = A(I) + C
ENDDO
            </screen>
            <para>loop strip mining will transform the loop as if
the user had written:</para>
            <screen>
DO II = 1, N, 4
  DO I = II, min (II + 3, N)
    A(I) = A(I) + C
  ENDDO
ENDDO
            </screen></item>
            <item><para>-floop-block performs loop blocking
transformations on loops. Blocking strip mines each loop in the loop
nest such that the memory accesses of the element loops fit inside
caches. For example, given a loop like:</para>
            <screen>
DO I = 1, N
  DO J = 1, M
    A(J, I) = B(I) + C(J)
  ENDDO
ENDDO
            </screen>
            <para>loop blocking will transform the loop as if the user
had written:</para>
            <screen>
DO II = 1, N, 64
  DO JJ = 1, M, 64
    DO I = II, min (II + 63, N)
      DO J = JJ, min (JJ + 63, M)
        A(J, I) = B(I) + C(J)
      ENDDO
    ENDDO
  ENDDO
ENDDO
            </screen>
            <para>which can be beneficial when M is larger than the
caches, because the innermost loop will iterate over a smaller amount
of data that can be kept in the caches.</para></item>
          </unorderedlist></item>
          <item><para>A new register allocator has replaced the old
one. It is called integrated register allocator (IRA) because
coalescing, register live range splitting, and hard register
preferencing are done on-the-fly during coloring. It also has better
integration with the reload pass. IRA is a regional register allocator
which uses modern Chaitin-Briggs coloring instead of Chow's priority
coloring used in the old register allocator. More info about IRA
internals and options can be found in the GCC manuals.</para></item>
          <item><para>A new instruction scheduler and software
pipeliner, based on the selective scheduling approach, has been added.
The new pass performs instruction unification, register renaming,
substitution through register copies, and speculation during
scheduling. The software pipeliner is able to pipeline non-countable
loops. The new pass is targeted at scheduling-eager in-order
platforms. In GCC 4.4 it is available for the Intel Itanium platform
working by default as the second scheduling pass (after register
allocation) at the -O3 optimization level.</para></item>
          <item><para>When using -fprofile-generate with a
multi-threaded program, the profile counts may be slightly wrong due
to race conditions. The new -fprofile-correction option directs the
compiler to apply heuristics to smooth out the inconsistencies. By
default the compiler will give an error message when it finds an
inconsistent profile.</para></item>
          <item><para>The new -fprofile-dir=PATH option permits
setting the directory where profile data files are stored when using
-fprofile-generate and friends, and the directory used when reading
profile data files using -fprofile-use and friends.</para></item>
        </items>

        <items name="New warning options">
          <item><para>The new -Wframe-larger-than=NUMBER option
directs GCC to emit a warning if any stack frame is larger than NUMBER
bytes. This may be used to help ensure that code fits within a limited
amount of stack space.</para></item>
          <item><para>The new -Wno-mudflap option disables warnings
about constructs which can not be instrumented when using
-fmudflap.</para></item>
        </items>

        <items name="New Languages and Language specific improvements">
          <item><para>Version 3.0 of the OpenMP specification is now
supported for the C, C++, and Fortran compilers.</para></item>
          <item><para>New character data types, per TR 19769: New
character types in C, are now supported for the C compiler in
-std=gnu99 mode, as __CHAR16_TYPE__ and __CHAR32_TYPE__, and for the
C++ compiler in -std=c++0x and -std=gnu++0x modes, as char16_t and
char32_t too.</para></item>
          <item><para>C family</para>
          <unorderedlist>
            <item><para>A new optimize attribute was added to allow
programmers to change the optimization level and particular
optimization options for an individual function. You can also change
the optimization options via the GCC optimize pragma for functions
defined after the pragma. The GCC push_options pragma and the GCC
pop_options pragma allow you temporarily save and restore the options
used. The GCC reset_options pragma restores the options to what was
specified on the command line.</para></item>
            <item><para>Uninitialized warnings do not require
enabling optimization anymore, that is, -Wuninitialized can be used
together with -O0. Nonetheless, the warnings given by -Wuninitialized
will probably be more accurate if optimization is
enabled.</para></item>
            <item><para>-Wparentheses now warns about expressions
such as (!x | y) and (!x &amp; y). Using explicit parentheses, such as
in ((!x) | y), silences this warning.</para></item>
            <item><para>-Wsequence-point now warns within if,
while,do while and for conditions, and within for begin/end
expressions.</para></item>
            <item><para>A new option -dU is available to dump
definitions of preprocessor macros that are tested or
expanded.</para></item>
          </unorderedlist></item>
          <item><para>C++</para>
          <unorderedlist>
            <item><para>Improved experimental support for the
upcoming ISO C++ standard, C++0x. Including support for auto, inline
namespaces, generalized initializer lists, defaulted and deleted
functions, new character types, and scoped enums.</para></item>
            <item><para>Those errors that may be downgraded to
warnings to build legacy code now mention -fpermissive when
-fdiagnostics-show-option is enabled.</para></item>
            <item><para>-Wconversion now warns if the result of a
static_cast to enumeral type is unspecified because the value is
outside the range of the enumeral type.</para></item>
            <item><para>-Wuninitialized now warns if a non-static
reference or non-static const member appears in a class without
constructors.</para></item>
            <item><para>G++ now properly implements
value-initialization, so objects with an initializer of () and an
implicitly defined default constructor will be zero-initialized before
the default constructor is called.</para></item>
          </unorderedlist></item>
          <item><para>Runtime Library (libstdc++)</para>
          <unorderedlist>
            <item><para>Improved experimental support for the
upcoming ISO C++ standard, C++0x, including:</para>
            <unorderedlist>
              <item><para>Support for &lt;chrono&gt;,
&lt;condition_variable&gt;, &lt;cstdatomic&gt;, &lt;forward_list&gt;,
&lt;initializer_list&gt;, &lt;mutex&gt;, &lt;ratio&gt;,
&lt;system_error&gt;, and &lt;thread&gt;.</para></item>
              <item><para>unique_ptr, &lt;algorithm&gt; additions,
exception propagation, and support for the new character types in
&lt;string&gt; and &lt;limits&gt;.</para></item>
              <item><para>Existing facilities now exploit
initializer lists, defaulted and deleted functions, and the newly
implemented core C++0x features.</para></item>
              <item><para>Some standard containers are more
efficient together with stateful allocators, i.e., no allocator is
constructed on the fly at element construction time.</para></item>
            </unorderedlist></item>
            <item><para>Experimental support for non-standard
pointer types in containers.</para></item>
            <item><para>The long standing libstdc++/30928 has been
fixed for targets running glibc 2.10 or later.</para></item>
            <item><para>As usual, many small and larger bug fixes,
in particular quite a few corner cases in
&lt;locale&gt;.</para></item>
          </unorderedlist></item>
          <item><para>Fortran</para>
          <unorderedlist>
            <item><para>GNU Fortran now employs libcpp directly
instead of using cc1 as an external preprocessor. The -cpp option was
added to allow manual invocation of the preprocessor without relying
on filename extensions. * The -Warray-temporaries option warns about
array temporaries generated by the compiler, as an aid to
optimization.</para></item>
            <item><para>The -fcheck-array-temporaries option has
been added, printing a notification at run time, when an array
temporary had to be created for an function argument. Contrary to
-Warray-temporaries the warning is only printed if the array is
noncontiguous.</para></item>
            <item><para>Improved generation of DWARF debugging
symbols</para></item>
            <item><para>If using an intrinsic not part of the
selected standard (via -std= and -fall-intrinsics) gfortran will now
treat it as if this procedure were declared EXTERNAL and try to link
to a user-supplied procedure. -Wintrinsics-std will warn whenever this
happens. The now-useless option -Wnonstd-intrinsic was
removed.</para></item>
            <item><para>The flag -falign-commons has been added to
control the alignment of variables in COMMON blocks, which is enabled
by default in line with previous GCC version. Using -fno-align-commons
one can force commons to be contiguous in memory as required by the
Fortran standard, however, this slows down the memory access. The
option -Walign-commons, which is enabled by default, warns when
padding bytes were added for alignment. The proper solution is to sort
the common objects by decreasing storage size, which avoids the
alignment problems.</para></item>
            <item><para>Fortran 2003 support has been
extended:</para>
            <unorderedlist>
              <item><para>Wide characters (ISO 10646, UCS-4,
kind=4) and UTF-8 I/O is now supported (except internal reads
from/writes to wide strings). -fbackslash now supports also \unnnn and
\Unnnnnnnn to enter Unicode characters.</para></item>
              <item><para>Asynchronous I/O (implemented as
synchronous I/O) and the decimal=, size=, sign=, pad=, blank=, and
delim= specifiers are now supported in I/O statements.</para></item>
              <item><para>Support for Fortran 2003 structure
constructors and for array constructor with typespec has been
added.</para></item>
              <item><para>Procedure Pointers (but not yet as
component in derived types and as function results) are now
supported.</para></item>
              <item><para>Abstract types, type extension, and
type-bound procedures (both PROCEDURE and GENERIC but not as
operators). Note: As CLASS/polymorphyic types are not implemented,
type-bound procedures with PASS accept as non-standard extension TYPE
arguments.</para></item>
            </unorderedlist></item>
            <item><para>Fortran 2008 support has been
added:</para>
            <unorderedlist>
              <item><para>The -std=f2008 option and support for
the file extensions .f2008 and .F2008 has been added.</para></item>
              <item><para>The g0 format descriptor is now
supported.</para></item>
              <item><para>The Fortran 2008 mathematical intrinsics
ASINH, ACOSH, ATANH, ERF, ERFC, GAMMA, LOG_GAMMA, BESSEL_*, HYPOT, and
ERFC_SCALED are now available (some of them existed as GNU extension
before). Note: The hyperbolic functions are not yet supporting complex
arguments and the three- argument version of BESSEL_*N is not
available.</para></item>
              <item><para>The bit intrinsics LEADZ and TRAILZ have
been added.</para></item>
            </unorderedlist></item>
          </unorderedlist></item>
          <item><para>Ada</para>
          <unorderedlist>
            <item><para>The Ada runtime now supports multilibs on
many platforms including x86_64, SPARC and PowerPC. Their build is
enabled by default.</para></item>
          </unorderedlist></item>
        </items>

        <items name="New Targets and Target Specific Improvements">
          <item><para>ARM</para>
          <unorderedlist>
            <item><para>GCC now supports optimizing for the
Cortex-A9, Cortex-R4 and Cortex-R4F processors and has many other
improvements to optimization for ARM processors.</para></item>
            <item><para>GCC now supports the VFPv3 variant with 16
double-precision registers with -mfpu=vfpv3-d16. The option -mfpu=vfp3
has been renamed to -mfpu=vfpv3.</para></item>
            <item><para>GCC now supports the -mfix-cortex-m3-ldrd
option to work around an erratum on Cortex-M3
processors.</para></item>
            <item><para>GCC now supports the __sync_* atomic
operations for ARM EABI GNU/Linux.</para></item>
            <item><para>The section anchors optimization is now
enabled by default when optimizing for ARM.</para></item>
            <item><para>GCC now uses a new EABI-compatible profiling
interface for EABI targets. This requires a function __gnu_mcount_nc,
which is provided by GNU libc versions 2.8 and later.</para></item>
          </unorderedlist></item>
          <item><para>AVR</para>
          <unorderedlist>
            <item><para>The -mno-tablejump option has been
deprecated because it has the same effect as the -fno-jump-tables
option.</para></item>
            <item><para>Added support for these new AVR
devices:</para>
            <unorderedlist>
              <item><para>ATA6289</para></item>
              <item><para>ATtiny13A</para></item>
              <item><para>ATtiny87</para></item>
              <item><para>ATtiny167</para></item>
              <item><para>ATtiny327</para></item>
              <item><para>ATmega8C1</para></item>
              <item><para>ATmega16C1</para></item>
              <item><para>ATmega32C1</para></item>
              <item><para>ATmega8M1</para></item>
              <item><para>ATmega16M1</para></item>
              <item><para>ATmega32M1</para></item>
              <item><para>ATmega32U4</para></item>
              <item><para>ATmega16HVB</para></item>
              <item><para>ATmega4HVD</para></item>
              <item><para>ATmega8HVD</para></item>
              <item><para>ATmega64C1</para></item>
              <item><para>ATmega64M1</para></item>
              <item><para>ATmega16U4</para></item>
              <item><para>ATmega32U6</para></item>
              <item><para>ATmega128RFA1</para></item>
              <item><para>AT90PWM81</para></item>
              <item><para>AT90SCR100</para></item>
              <item><para>M3000F</para></item>
              <item><para>M3000S</para></item>
              <item><para>M3001B</para></item>
            </unorderedlist></item>
          </unorderedlist></item>
          <item><para>IA-32/x86-64</para>
          <unorderedlist>
            <item><para>Support for Intel AES built-in functions and
code generation is available via -maes.</para></item>
            <item><para>Support for Intel PCLMUL built-in function
and code generation is available via -mpclmul.</para></item>
            <item><para>Support for Intel AVX built-in functions and
code generation is available via -mavx.</para></item>
            <item><para>Automatically align the stack for local
variables with alignment requirement.</para></item>
            <item><para>GCC can now utilize the SVML library for
vectorizing calls to a set of C99 functions if -mveclibabi=svml is
specified and you link to an SVML ABI compatible
library.</para></item>
            <item><para>On x86-64, the ABI has been changed in the
following cases to conform to the x86-64 ABI:</para>
            <unorderedlist>
              <item><para>Passing/returning structures with
flexible array member:</para>
              <screen>
struct foo
  {
    int i;
    int flex[];
  };
              </screen></item>
              <item><para>Passing/returning structures with
complex float member:</para>
              <screen>
struct foo
  {
    int i;
    __complex__ float f;
  };
              </screen></item>
              <item><para>Passing/returning unions with long
double member:</para>
              <screen>
union foo
  {
    int x;
    long double ld;
  };
              </screen></item>
            </unorderedlist>
            <para>Code built with previous versions of GCC that
uses any of these is not compatible with code built with GCC 4.4.0 or
later.</para></item>
            <item><para>A new target attribute was added to allow
programmers to change the target options like -msse2 or -march=k8 for
an individual function. You can also change the target options via the
GCC target pragma for functions defined after the
pragma.</para></item>
            <item><para>GCC can now be configured with options
--with-arch-32, --with-arch-64, --with-cpu-32, --with-cpu-64,
--with-tune-32 and --with-tune-64 to control the default optimization
separately for 32-bit and 64-bit modes.</para></item>
          </unorderedlist></item>
          <item><para>IA-32/IA64</para>
          <unorderedlist>
            <item><para>Support for __float128 (TFmode) IEEE quad
type and corresponding TCmode IEEE complex quad type is available via
the soft-fp library on IA-32/IA64 targets. This includes basic
arithmetic operations (addition, subtraction, negation, multiplication
and division) on __float128 real and TCmode complex values, the full
set of IEEE comparisons between __float128 values, conversions to and
from float, double and long double floating point types, as well as
conversions to and from signed or unsigned integer, signed or unsigned
long integer and signed or unsigned quad (TImode, IA64 only) integer
types. Additionally, all operations generate the full set of IEEE
exceptions and support the full set of IEEE rounding
modes.</para></item>
          </unorderedlist></item>
          <item><para>M68K/ColdFire</para>
          <unorderedlist>
            <item><para>GCC now supports instruction scheduling for
ColdFire V1, V3 and V4 processors. (Scheduling support for ColdFire V2
processors was added in GCC 4.3.)</para></item>
            <item><para>GCC now supports the -mxgot option to
support programs requiring many GOT entries on ColdFire.</para></item>
            <item><para>The m68k-*-linux-gnu target now builds
multilibs by default.</para></item>
          </unorderedlist></item>
          <item><para>MIPS</para>
          <unorderedlist>
            <item><para>MIPS Technologies have extended the original
MIPS SVR4 ABI to include support for procedure linkage tables (PLTs)
and copy relocations. These extensions allow GNU/Linux executables to
use a significantly more efficient code model than the one defined by
the original ABI.</para>
            <para>GCC support for this code model is available via
a new command-line option, -mplt. There is also a new configure-time
option, --with-mips-plt, to make -mplt the default.</para>
            <para>The new code model requires support from the
assembler, the linker, and the runtime C library. This support is
available in binutils 2.19 and GLIBC 2.9.</para></item>
            <item><para>GCC can now generate MIPS16 code for 32-bit
GNU/Linux executables and 32-bit GNU/Linux shared libraries. This
feature requires GNU binutils 2.19 or above.</para></item>
            <item><para>Support for RMI's XLR processor is now
available through the -march=xlr and -mtune=xlr options.</para></item>
            <item><para>64-bit targets can now perform 128-bit
multiplications inline, instead of relying on a libgcc
function.</para></item>
            <item><para>Native GNU/Linux toolchains now support
-march=native and -mtune=native, which select the host
processor.</para></item>
            <item><para>GCC now supports the R10K, R12K, R14K and
R16K processors. The canonical -march= and -mtune= names for these
processors are r10000, r12000, r14000 and r16000
respectively.</para></item>
            <item><para>GCC can now work around the side effects of
speculative execution on R10K processors. Please see the documentation
of the -mr10k-cache-barrier option for details.</para></item>
            <item><para>Support for the MIPS64 Release 2 instruction
set has been added. The option -march=mips64r2 enables generation of
these instructions.</para></item>
            <item><para>GCC now supports Cavium Networks' Octeon
processor. This support is available through the -march=octeon and
-mtune=octeon options.</para></item>
            <item><para>GCC now supports STMicroelectronics'
Loongson 2E/2F processors. The canonical -march= and -mtune= names for
these processors are loongson2e and loongson2f.</para></item>
          </unorderedlist></item>
          <item><para>picochip</para>
          <unorderedlist>
            <item><para>Picochip is a 16-bit processor. A typical
picoChip contains over 250 small cores, each with small amounts of
memory. There are three processor variants (STAN, MEM and CTRL) with
different instruction sets and memory configurations and they can be
chosen using the -mae option.</para></item>
            <item><para>This port is intended to be a "C" only
port.</para></item>
          </unorderedlist></item>
          <item><para>Power Architecture and PowerPC</para>
          <unorderedlist>
            <item><para>GCC now supports the e300c2, e300c3 and
e500mc processors.</para></item>
            <item><para>GCC now supports Xilinx processors with a
single-precision FPU.</para></item>
            <item><para>Decimal floating point is now supported for
e500 processors.</para></item>
          </unorderedlist></item>
          <item><para>S/390, zSeries and System z9/z10</para>
          <unorderedlist>
            <item><para>Support for the IBM System z10 EC/BC
processor has been added. When using the -march=z10 option, the
compiler will generate code making use of instructions provided by the
General-Instruction-Extension Facility and the Execute-Extension
Facility.</para></item>
          </unorderedlist></item>
          <item><para>VxWorks</para>
          <unorderedlist>
            <item><para>GCC now supports the thread-local storage
mechanism used on VxWorks.</para></item>
          </unorderedlist></item>
          <item><para>Xtensa</para>
          <unorderedlist>
            <item><para>GCC now supports thread-local storage (TLS)
for Xtensa processor configurations that include the Thread Pointer
option. TLS also requires support from the assembler and linker; this
support is provided in the GNU binutils beginning with version
2.19.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <note type="compilation">
        <para>A separate runtime directory is available containing the
shared GCC libraries, <command>${SB_INSTALL_PREFIX}r</command>. The normal
GCC installation in <command>${SB_INSTALL_PREFIX}</command> also
contains the shared libraries. The shared libraries in the runtime
path can be linked against to avoid the dependency on the full GCC
installation.</para>
        <para>The GCC specs file has been modified on HP-UX, IRIX,
Redhat Linux, and Solaris to automatically add the runtime search path
to executables and binaries during the link stage. The specs file was 
not modified on AIX and Tru64 UNIX because the -blibpath/-rpath linker 
option is not additive.</para>
        <para>The Ada compiler is available for AIX 5.x, HP-UX 11.x,
IRIX 6.5, Redhat Linux, Solaris, and Tru64 UNIX 4.0D. The GCJ java
compiler is available for Redhat Linux, Solaris 7+, HP-UX11/PA and
Tru64 UNIX 5.1. All supported platforms contain the C, C++, and
Fortran compilers.</para>
        <para>The C++ library used with this release of GCC is
incompatible with C++ libraries built with versions of GCC prior to
3.4.3.</para>
        <para>GCC can generate 64-bit binaries under IRIX 6.5 using
the ``<command>-mabi=64</command>'' command-line switch, under Solaris
7+/SPARC using the ``<command>-m64</command>'' command-line switch,
and under AIX 5.x using the ``<command>-maix64</command>''
command-line switch.</para>
      </note>

      <note type="configuration">
        <para>The script used to fix up the system headers for use
with GCC is available in the installation directory,
"<command>${SB_INSTALL_PREFIX}/lib/gcc/[arch]/4.2.3/install-tools</command>".
To execute it, first make a backup of the existing include directory
and then run the "<command>mkheaders</command>" script:</para>
        <screen>
# /bin/sh
# cd ${SB_INSTALL_PREFIX}/libexec/gcc/[arch]/4.4.6/install-tools
# SHELL=/bin/sh sh mkheaders
        </screen>

        <para>The "<command>[arch]</command>" name corresponds to the
GNU system name for the host (e.g.
<command>hppa2.0-hp-hpux11.23</command>,
"<command>sparc-sun-solaris2.10</command>).</para>
      </note>

      <platform name="Redhat Enterprise Linux/AMD64">
        <para>GCC was built with --disable-multilib to disable support
for 32 and 64-bit GCC libraries (libgcc, libstdc++, etc.). The
${SB_INSTALL_PREFIX}/lib path contains 64-bit libraries. Generating
32-bit binaries/libraries is not possible.</para>
      </platform>
    </notes>

    <changelog>
      <change date="2012 April 29" revision="2"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Added
debian-ada-no-deallocation-from-empty-storage-pools.patch from Debian
to allow building ada with gcc-4.6</para></item>
      </change>
    </changelog>
  </program>
</programs>
