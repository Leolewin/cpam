<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="qt" version="3.3.8" revision="9">
    <build-name>${SB_PROG_NAME}-x11-free-${SB_PROG_VER}</build-name>

    <install-name>lib${SB_PROG_NAME}33</install-name>

    <sources>
      <source checksum="cf3c43a7dfde5bfb76f8001102fe6e85"
        checksum-type="md5" size="14360483"
        path="src/qt-x11-free-3.3.8.tar.bz2"/>
      <patch checksum="8c12711c50ffa4a9ce7456f16a5526dc"
        checksum-type="md5" size="3021"
        path="src/qt-x11-free-3.3.8.CVE-2007-0242.patch"/>
      <patch checksum="40a3b9cf65a5e5c583aa65ee718b3344"
        checksum-type="md5" size="7125"
        path="src/qt-x11-free-3.3.8.CVE-2007-3388.patch"/>
      <patch checksum="a636189fa933b7cb043bd5205d6db8b2"
        checksum-type="md5" size="496"
        path="src/qt-x11-free-3.3.8.CVE-2007-4137.patch"/>
      <patch checksum="61ee18f6ea2c680e35347c06ca14c6e5"
        checksum-type="md5" size="755"
        path="src/qt-x11-free-3.3.8.fc-uic.patch"/>
      <patch checksum="7671da83f74123adb30be8003b3fea2f"
        checksum-type="md5" size="2645"
        path="src/qt-x11-free-3.3.8.qt-copy-dragobject-dont-prefer-unknown.patch"/>
      <patch checksum="0ef9fc714ef2c0353931dcf169dc8a16"
        checksum-type="md5" size="875"
        path="src/qt-x11-free-3.3.8.qt-copy-fix-kmenu-width.diff"/>
      <patch checksum="065c4c96722bc412f21580405b01cdab"
        checksum-type="md5" size="1778"
        path="src/qt-x11-free-3.3.8.qt-copy-qclipboard_hack_80072.patch"/>
      <patch checksum="028dd59302bcb4aacd36cefe0140cd6e"
        checksum-type="md5" size="826"
        path="src/qt-x11-free-3.3.8.qt-copy-khotkeys_input_84434.patch"/>
      <patch checksum="55613aabd88c13dc63adeefebea89581"
        checksum-type="md5" size="4423"
        path="src/qt-x11-free-3.3.8.qt-copy-xinerama-aware-qpopup.patch"/>
      <patch checksum="9987e63306ea0ecc71964b956eba6d4d"
        checksum-type="md5" size="612"
        path="src/qt-x11-free-3.3.8.qt-copy-fix-qprocess.diff"/>
      <patch checksum="bc6f9ecafdaf681fdea7fa882c5e8af5"
        checksum-type="md5" size="996"
        path="src/qt-x11-free-3.3.8.aix61.patch"/>
      <patch checksum="a3cb144785bbe97253462256ba9bdd86"
        checksum-type="md5" size="936"
        path="src/qt-x11-free-3.3.8.gentoo-hppa.patch"/>
      <patch checksum="e34df95425ef7eb568bdf81d3720ffc3"
        checksum-type="md5" size="773"
        path="src/qt-x11-free-3.3.8.tru64gcc42.patch"/>
      <patch checksum="3c7a8753aebcd6f71943a0cf9a74b914"
        checksum-type="md5" size="64614"
        path="src/qt-x11-free-3.3.8.tww.patch"/>
      <patch checksum="03821e53467b190b5c844798250e1812"
        checksum-type="md5" size="3177"
        path="src/qt-x11-free-3.3.8.hpux1131.patch"/>
      <patch checksum="f7ab3d664ad0ceb9aff16d04397d4619"
        checksum-type="md5" size="762"
        path="src/qt-x11-free-3.3.8.png14.patch"/>
      <patch checksum="2cadf6d803722fe9e5110e0728d86035"
        checksum-type="md5" size="660"
        path="src/qt-x11-free-3.3.8.gcc42.patch"/>
      <patch checksum="8d2b44a5eacc90010ba44a652bbaa7db"
        checksum-type="md5" size="884"
        path="src/qt-x11-free-3.3.8.debian-gcc46.patch"/>
    </sources>

    <dependencies>
      <depend program="bison" install-name="bison24"
        add-path="prepend" type="build">v&gt;=2.4.3</depend>
      <depend program="flex" install-name="flex25" add-path="prepend"
        type="build">v&gt;=2.5.35</depend>
      <depend program="expat" var="LIBEXPAT"
        install-name="libexpat20">v&gt;=2.0.1</depend>
      <depend program="fcpackage" var="FCPACKAGE"
        install-name="fcpackage28">v&gt;=2.8</depend>
      <depend program="freetype" var="LIBTTF"
        install-name="libttf24">v&gt;=2.4.6</depend>
      <depend program="jpeg" var="JPEG"
        install-name="libjpeg8">v&gt;=8b</depend>
      <depend program="libmng" var="LIBMNG"
        install-name="libmng10">v&gt;=1.0.10</depend>
      <depend program="libpng" var="LIBPNG"
        install-name="libpng14">v&gt;=1.4.4</depend>
      <depend program="zlib" var="LIBZ"
        install-name="libz12">v&gt;=1.2.5</depend>
      <depend program="perl" add-path="prepend"
        type="build">v==5.12.2</depend>
    </dependencies>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
    </script-header>

    <module name="default">
      <validate>
        <depend program="qt" module="nothread">v==3.3.8</depend>
        <depend program="qt" module="static-thread">v==3.3.8</depend>
        <depend program="qt" module="static-nothread">v==3.3.8</depend>
        <depend program="qt" module="gcc44">v==3.3.8</depend>
        <depend program="qt" module="gcc44-nothread">v==3.3.8</depend>
        <depend program="qt"
          module="gcc44-static-thread">v==3.3.8</depend>
        <depend program="qt"
          module="gcc44-static-nothread">v==3.3.8</depend>
        <depend program="qt" module="sip-2.6.7">v==3.3.8</depend>
        <depend program="qt" module="sip-2.7.2">v==3.3.8</depend>
        <depend program="qt" module="PyQt-2.6.7">v==3.3.8</depend>
        <depend program="qt" module="PyQt-2.7.2">v==3.3.8</depend>
      </validate>

      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix[67]*)
  PLATFORM="aix-xlc" ARGS="-sm -thread -no-largefile -no-xcursor" ;;
*-aix5*)
  PLATFORM="aix-xlc" ARGS="-sm -thread -no-largefile" ;;
ia64*-hpux*)
  PLATFORM="hpuxi-acc-32" ARGS="-sm -thread " ;;
*-hpux11.[01]*)
  PLATFORM="hpux-acc" ARGS="-sm -thread -no-ipv6 " ;;
*-hpux*)
  PLATFORM="hpux-acc" ARGS="-sm -thread " ;;
*-irix*)
  PLATFORM="irix-cc" ARGS="-sm -thread" ;;
x86_64*-linuxe4)
  PLATFORM="linux-g++-64" ARGS="-sm -no-exceptions -thread -xinerama \
-xcursor -xrandr" ;;
x86_64*-linux*)
  PLATFORM="rhel5-g++-64" ARGS="-sm -no-exceptions -thread -xinerama \
-xcursor -xrandr" ;;
i?86*-linuxe4)
  PLATFORM="linux-g++" ARGS="-sm -no-exceptions -thread -xinerama \
-xcursor -xrandr" ;;
i?86*-linux*)
  PLATFORM="rhel5-g++" ARGS="-sm -no-exceptions -thread -xinerama" ;;
*-osf*)
  PLATFORM="tru64-cxx" ARGS="-sm -thread" ;;
i?86*-solaris*)
  PLATFORM="solarisx86-cc"
  ARGS="${ARGS+${ARGS}} -sm -thread" ;;
*-solaris*)
  PLATFORM="solaris-cc"
  ARGS="${ARGS+${ARGS}} -sm -thread" ;;
esac

case "${SB_SYSTYPE}" in
hppa*-hpux11.[23]*)
  # remove +DAportable
  ${SB_PATH_SED} -i -e "\
s! +DAportable!!" mkspecs/hpux-acc/qmake.conf
  ;;
x86_64-redhat-linuxe[56]|x86_64*-suse*)
  # Look for OpenGL etc. in /usr/lib64 instead of /usr/lib
  ${SB_PATH_SED} -i -e "\
s! /usr/lib /lib! /usr/lib64 /lib64!;" config.tests/*/*.test
  ;;
*-solaris2.10)
  # remove -R/usr/openwin/lib
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS		=.*!QMAKE_LFLAGS		=!; \
" mkspecs/${PLATFORM}/qmake.conf
  ;;
esac

# Change for Studio 12
case "${SB_SYSTYPE}" in
*-solaris2.9|*-solaris2.1?)
${SB_PATH_SED} -i -e "\
s!-xarch=v8plusa!-m32 -xarch=sparcvis!;" \
mkspecs/${PLATFORM}/qmake.conf ;;
esac

# don't waste time creating Makefiles in examples/tutorial directories
${SB_PATH_FIND} ${SB_BUILD_PREFIX}/examples \
${SB_BUILD_PREFIX}/tools/designer/examples \
${SB_BUILD_PREFIX}/tutorial -name \*.pro -exec rm {} \;

QTDIR=$(pwd) EXTRA_LFLAGS="${QMAKE_LFLAGS+${QMAKE_LFLAGS}}" \
EXTRA_CFLAGS="${QMAKE_CFLAGS+${QMAKE_CFLAGS}}" \
./configure -verbose -release -shared -qt-gif -system-zlib \
-system-libmng -system-libpng -system-libjpeg -stl \
${ARGS+${ARGS}} -platform ${PLATFORM} \
${SB_VAR_JPEG+-I${SB_VAR_JPEG_INC}} \
${SB_VAR_LIBMNG+-I${SB_VAR_LIBMNG_INC}} \
${SB_VAR_LIBPNG+-I${SB_VAR_LIBPNG_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} \
${SB_VAR_FCPACKAGE+-I${SB_VAR_FCPACKAGE_INC}} \
${SB_VAR_LIBTTF+-I${SB_VAR_LIBTTF_INC}} \
${SB_VAR_LIBTTF+-I${SB_VAR_LIBTTF_INC}/freetype2} \
${SB_VAR_JPEG+-L${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBMNG+-L${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_LIBPNG+-L${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_FCPACKAGE+-L${SB_VAR_FCPACKAGE_LIB} -lfontconfig} \
${SB_VAR_LIBTTF+-L${SB_VAR_LIBTTF_LIB}} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB} -lexpat} \
${SB_VAR_JPEG+-R${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBMNG+-R${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_LIBPNG+-R${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+-R${SB_VAR_LIBZ_LIB}} \
${SB_VAR_FCPACKAGE+-R${SB_VAR_FCPACKAGE_LIB}} \
${SB_VAR_LIBTTF+-R${SB_VAR_LIBTTF_LIB}} \
${SB_VAR_LIBEXPAT+-R${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_GCC_RT+-R${SB_VAR_GCC_RT_LIB}} \
-qt-imgfmt-png -qt-imgfmt-jpeg -qt-imgfmt-mng -xft -xrender \
-docdir ${_docdir} -datadir ${_datadir} \
-headerdir ${_includedir} -libdir ${_libdir} -prefix ${SB_INSTALL_PREFIX}

# Don't link against libraries for plugins
case "${SB_SYSTYPE}" in
*-aix*)
  for _plugin in cppeditor dlg glade kdevdlg rc wizards; do
    ${SB_PATH_SED} -i -e "\
s!^LIBS     =.*!LIBS     =!" \
    tools/designer/plugins/${_plugin}/Makefile
  done
esac
]]>
      </configure>

      <build>
<![CDATA[
LD_LIBRARY_PATH="${SB_BUILD_PREFIX}/lib" \
LIBPATH="${SB_BUILD_PREFIX}/lib" \
SHLIB_PATH="${SB_BUILD_PREFIX}/lib" \
DOTQTDIR=${SB_BUILD_PREFIX} \
QTDIR=$(pwd) gmake
]]>
      </build>

      <install>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix4*)
  CC_LD_RT="-Wl,-blibpath:" ;;
*-aix*)
  CC_LD_RT="-blibpath:" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b," ;;
*-hpux*)
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*|*-osf*)
  CC_LD_RT="-rpath " ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-solaris*)
  CC_LD_RT="-R" ;;
esac

QTDIR=$(pwd) gmake install


${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${SB_INSTALL_PREFIX}/man/man1 ${SB_INSTALL_PREFIX}/man/man3

${SB_PATH_INSTALL} -m 644 -o root -g 0 doc/man/man1/* \
${SB_INSTALL_PREFIX}/man/man1
${SB_PATH_FIND} doc/man/man3 -type f -print | while read _man; do
  ${SB_PATH_INSTALL} -m 644 -o root -g 0 ${_man} \
  ${SB_INSTALL_PREFIX}/man/man3
done

# IRIX inst package manager doesn't like '(' and ')' in filenames
mv ${_datadir}/templates/Dialog_with_Buttons_\(Bottom\).ui \
${_datadir}/templates/Dialog_with_Buttons_Buttom.ui
mv ${_datadir}/templates/Dialog_with_Buttons_\(Right\).ui \
${_datadir}/templates/Dialog_with_Buttons_Right.ui

# rebuild libraries so RPATH is correct
${SB_PATH_SED} -i -e "\
s!^QMAKE_LIBDIR_QT=.*!QMAKE_LIBDIR_QT=${_libdir}!" \
${SB_BUILD_PREFIX}/.qmake.cache

(cd ${SB_BUILD_PREFIX}/src
rm -f ${_libdir}/libqt*
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake qt.pro
QTDIR=${SB_BUILD_PREFIX} gmake install)
(cd ${SB_BUILD_PREFIX}/tools/designer/uilib
rm -f ${_libdir}/libqui*
${SB_PATH_SED} -i -e "\
s!^DESTDIR.*!DESTDIR = ${_libdir}/!" uilib.pro
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake uilib.pro
QTDIR=${SB_BUILD_PREFIX} gmake install)
(cd ${SB_BUILD_PREFIX}/tools/designer/editor
rm -f ${_libdir}/libeditor*
${SB_PATH_SED} -i -e "\
s!^DESTDIR.*!DESTDIR = ${_libdir}/!" editor.pro
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake editor.pro
QTDIR=${SB_BUILD_PREFIX} gmake install)

# rebuild binaries so RPATH is correct
(rm bin/assistant
cd ${SB_BUILD_PREFIX}/tools/assistant
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake assistant.pro
QTDIR=${SB_BUILD_PREFIX} gmake install)
(rm bin/designer bin/uic plugins/designer/lib*.s[lo]
cd ${SB_BUILD_PREFIX}/tools/designer/app
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake app.pro
${SB_PATH_SED} -i -e "\
s! ${CC_LD_RT}${SB_BUILD_BASE}[^ ][^ ]*!!g" Makefile
QTDIR=${SB_BUILD_PREFIX} gmake install
cd ${SB_BUILD_PREFIX}/tools/designer/uic
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake uic.pro
${SB_PATH_SED} -i -e "\
s! ${CC_LD_RT}${SB_BUILD_BASE}[^ ][^ ]*!!g" Makefile
QTDIR=${SB_BUILD_PREFIX} gmake install

for _plugin in cppeditor dlg glade kdevdlg rc wizards; do
  cd ${SB_BUILD_PREFIX}/tools/designer/plugins/${_plugin}
  QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake ${_plugin}.pro
  case "${SB_SYSTYPE}" in
  *-aix*)
    ${SB_PATH_SED} -i -e "\
s! ${CC_LD_RT}[^ ][^ ]*plugins/designer!!; \
s!^LIBS     =.*!LIBS     =!" Makefile ;;
  *)
    ${SB_PATH_SED} -i -e "\
s! ${CC_LD_RT}[^ ][^ ]*plugins/designer!!" Makefile ;;
  esac
  QTDIR=${SB_BUILD_PREFIX} gmake
done)

(rm bin/linguist bin/lrelease bin/lupdate bin/qm2ts
cd ${SB_BUILD_PREFIX}/tools/linguist/linguist
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake linguist.pro
${SB_PATH_SED} -i -e "\
s! ${CC_LD_RT}${SB_BUILD_BASE}[^ ][^ ]*!!g" Makefile
QTDIR=${SB_BUILD_PREFIX} gmake install
cd ${SB_BUILD_PREFIX}/tools/linguist/lrelease
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake lrelease.pro
QTDIR=${SB_BUILD_PREFIX} gmake install
cd ${SB_BUILD_PREFIX}/tools/linguist/lupdate
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake lupdate.pro
QTDIR=${SB_BUILD_PREFIX} gmake install
cd ${SB_BUILD_PREFIX}/tools/linguist/qm2ts
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake qm2ts.pro
QTDIR=${SB_BUILD_PREFIX} gmake install)
(rm bin/qtconfig
cd ${SB_BUILD_PREFIX}/tools/qtconfig
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake qtconfig.pro
QTDIR=${SB_BUILD_PREFIX} gmake install)

${SB_PATH_INSTALL} -m 755 -o root -g 0 bin/assistant bin/designer \
bin/uic bin/linguist bin/lrelease bin/lupdate bin/qm2ts \
bin/qtconfig ${SB_INSTALL_PREFIX}/bin
${SB_PATH_INSTALL} -m 755 -o root -g 0 plugins/designer/lib*.s[lo] \
${SB_INSTALL_PREFIX}/plugins/designer

# fix qt-mt.pc file
case "${SB_SYSTYPE}" in
*-hpux10*)
  ${SB_PATH_SED} -i -e "\
  s!^prefix=.*!prefix=${SB_INSTALL_PREFIX}!; \
  s!^libdir=.*!libdir=${_libdir}!; \
  s!^includedir=.*!includedir=${_includedir}!; \
  s!-L${SB_INSTALL_PREFIX}/lib!-L\${libdir}!; \
  s!-I${SB_INSTALL_PREFIX}/include!-I\${includedir}!; \
  s!Libs: -L\([^ ][^ ]*\)!Libs: -L\1 ${CC_LD_RT}\1!;" \
  ${_libdir}/pkgconfig/qt.pc
  rm ${_libdir}/qt.pc ;;
*)
  ${SB_PATH_SED} -i -e "\
  s!^prefix=.*!prefix=${SB_INSTALL_PREFIX}!; \
  s!^libdir=.*!libdir=${_libdir}!; \
  s!^includedir=.*!includedir=${_includedir}!; \
  s!-L${SB_INSTALL_PREFIX}/lib!-L\${libdir}!; \
  s!-I${SB_INSTALL_PREFIX}/include!-I\${includedir}!; \
  s!Libs: -L\([^ ][^ ]*\)!Libs: -L\1 ${CC_LD_RT}\1!; \
  s!-l/qt-mt.pc!-lqt-mt!;" ${_libdir}/pkgconfig/qt-mt.pc
  rm ${_libdir}/qt-mt.pc ;;
esac

# remove build prefix from .prl files
${SB_PATH_FIND} ${_libdir} -name \*.prl | while read _prl; do
  ${SB_PATH_SED} -i -e "\
s!-L${SB_BUILD_PREFIX}/lib !!g" ${_prl}
done

${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}
]]>
      </install>
    </module>

    <module name="PyQt-2.6.7">
      <build-name>PyQt-x11-gpl-3.18.1</build-name>

      <sources>
        <source checksum="f1d120495d1aaf393819e988c0a7bb7e"
          checksum-type="md5" size="819441"
          path="src/PyQt-x11-gpl-3.18.1.tar.gz"/>
        <patch checksum="22a582a8bca4fe3d4aa1070edac535cf"
          checksum-type="md5" size="1161"
          path="src/PyQt-x11-gpl-3.18.1.tww.patch"/>
      </sources>

      <dependencies>
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
        <depend program="expat" var="LIBEXPAT"
          install-name="libexpat20">v&gt;=2.0.1</depend>
        <depend program="fcpackage" var="FCPACKAGE"
          install-name="fcpackage28">v&gt;=2.8</depend>
        <depend program="jpeg" var="JPEG"
          install-name="libjpeg8">v&gt;=8b</depend>
        <depend program="libmng" var="LIBMNG"
          install-name="libmng10">v&gt;=1.0.10</depend>
        <depend program="libpng" var="LIBPNG"
          install-name="libpng14">v&gt;=1.4.4</depend>
        <depend program="qscintilla" var="LIBQSCINTILLA"
          install-name="libqscintilla17"
          module="gcc44">v&gt;=1.71</depend>
        <depend program="qt" var="LIBQT" install-name="libqt33"
          module="gcc44">v&gt;=3.3.8</depend>
        <depend program="zlib" var="LIBZ"
          install-name="libz12">v==1.2.5</depend>
        <depend program="python" var="PYTHON" install-name="python26"
          add-path="prepend">v&gt;=2.6.7</depend>
        <depend program="qt" module="sip-2.6.7">v==3.3.8</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_pysubdir="python26"

_install_prefix="${SB_INSTALL_PREFIX_LIB}/${_pysubdir}"
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-Wl,-blibpath:"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib"
  PLATFORM="aix-g++" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b,"
  PLATFORM="hpuxi-g++-32" ;;
*-hpux*)
  CC_LD_RT="-Wl,+b,"
  PLATFORM="hpux-g++" ;;
*-irix*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="irix-g++" ;;
x86_64*-linuxe4)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="linux-g++-64"

  ;;
x86_64*-linux*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="rhel5-g++-64" ;;
i?86*-linuxe4)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="linux-g++"

  ;;
i?86*-linux*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="rhel5-g++" ;;
*-osf*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="tru64-g++" ;;
i?86*-solaris*)
  CC_LD_RT="-Wl,-R,"
  PLATFORM="solarisx86-g++"

  ;;
*-solaris*)
  CC_LD_RT="-Wl,-R,"
  PLATFORM=solaris-g++

  ;;
esac


# Allow executables to run during configure stage
case "${SB_SYSTYPE}" in
ia64*-hpux*)
  export LD_LIBRARY_PATH=${SB_VAR_GCC_RT_LIB} ;;
*-aix*)
  export LIBPATH=${SB_VAR_GCC_RT_LIB} ;;
esac

QTDIR=${_qtdir:-${SB_VAR_LIBQT}} QMAKESPEC=${PLATFORM} \
PYTHONPATH=${_install_prefix} \
${SB_VAR_PYTHON}/bin/python configure.py \
-w -b ${_install_prefix}/bin -d ${_install_prefix} \
-n ${SB_VAR_LIBQSCINTILLA_INC} \
-o ${_libqscintilla_lib:-${SB_VAR_LIBQSCINTILLA_LIB}/${_gcc_subdir}} \
-v ${_install_prefix}/share -y qt-mt \
INCDIR_QT=${_qt_inc:-${SB_VAR_LIBQT_INC}/${_gcc_subdir}} \
LIBDIR_QT=${_qt_lib:-${SB_VAR_LIBQT_LIB}/${_gcc_subdir}}

# set runtime path to Qt library dependencies and GCC runtime path
find ${SB_BUILD_PREFIX} -name Makefile | while read _makefile; do
  ${SB_PATH_SED} -i -e "\
s|-L\(${_libqscintilla_lib:-${SB_VAR_LIBQSCINTILLA_LIB}/${_gcc_subdir}}\)|\
-L\1 ${CC_LD_RT}\1|; \
s|^\(LFLAGS.*\)|\1 ${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB}} \
${SB_VAR_FCPACKAGE+${CC_LD_RT}${SB_VAR_FCPACKAGE_LIB}} \
${SB_VAR_LIBEXPAT+${CC_LD_RT}${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBMNG+${CC_LD_RT}${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_JPEG+${CC_LD_RT}${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBPNG+${CC_LD_RT}${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} \
${SB_VAR_GCC_RT+${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} \
${LDFLAGS+${LDFLAGS}}|;" \
  ${_makefile}
done

case "${SB_SYSTYPE}" in
*-aix*)
  find ${SB_BUILD_PREFIX}/qt* -name Makefile | while read _makefile; do
    ${SB_PATH_SED} -i -e "\
s|^LINK = g++|LINK = ${SB_VAR_PYTHON}/lib/python2.6/config/ld_so_aix \
g++ -Wl,-bI:${SB_VAR_PYTHON}/lib/python2.6/config/python.exp|;" \
    ${_makefile}
  done

  ${SB_PATH_SED} -i -e "\
s|^\(LFLAGS.*\)|\1 -Wl,-bbigtoc|;" qt/Makefile ;;
esac
]]>
      </configure>

      <uninstall>
<![CDATA[
rm -rf ${_install_prefix}/bin/pyuic \
${_install_prefix}/bin/pylupdate \
${_install_prefix}/qt* \
${_install_prefix}/pyqtconfig.py \
${_install_prefix}/share/qt*

rmdir ${_install_prefix}/bin || :
rmdir ${_install_prefix}/include || :
rmdir ${_install_prefix}/share || :
rmdir ${_install_prefix} || :
]]>
      </uninstall>
    </module>

    <module name="gcc44-static-nothread">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
      </dependencies>

      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix[67]*)
  PLATFORM="aix-g++" ARGS="-sm -no-largefile -no-xcursor"
  QMAKE_LFLAGS="-Wl,-brtl -Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib" ;;
*-aix*)
  PLATFORM="aix-g++" ARGS="-sm -no-largefile"
  QMAKE_LFLAGS="-Wl,-brtl -Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib" ;;
ia64*-hpux*)
  PLATFORM="hpuxi-g++-32" ARGS="-sm"
  QMAKE_LFLAGS="-Wl,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-hpux11.[01]*)
  PLATFORM="hpux-g++" ARGS="-sm -no-ipv6"
  QMAKE_LFLAGS="-Wl,+s,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-hpux*)
  PLATFORM="hpux-g++" ARGS="-sm"
  QMAKE_LFLAGS="-Wl,+s,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-irix*)
  PLATFORM="irix-g++" ARGS="-sm"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
x86_64*-linuxe4)
  PLATFORM="linux-g++-64" ARGS="-sm -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
x86_64*-linux*)
  PLATFORM="rhel5-g++-64" ARGS="-sm -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-linuxe4)
  PLATFORM="linux-g++" ARGS="-sm -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-linux*)
  PLATFORM="rhel5-g++" ARGS="-sm -xinerama"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
*-osf*)
  PLATFORM="tru64-g++" ARGS="-sm"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-solaris*)
  PLATFORM="solarisx86-g++" ARGS="-sm"
  QMAKE_LFLAGS="-R${SB_VAR_GCC_RT_LIB}" ;;
*-solaris*)
  PLATFORM="solaris-g++" ARGS="-sm"
  QMAKE_LFLAGS="-R${SB_VAR_GCC_RT_LIB}" ;;
esac

# allow tests to find GCC runtime path
for _pro in endian/endiantest.pro ipv6/ipv6test.pro \
largefile/largefiletest.pro ptrsize/ptrsizetest.pro \
stl/stltest.pro; do
  cat >>config.tests/unix/${_pro} <<_EOT_
QMAKE_LFLAGS += \$\$QMAKE_RPATH${SB_VAR_GCC_RT_LIB}
_EOT_
done

# don't waste time creating Makefiles in examples/tutorial directories
${SB_PATH_FIND} ${SB_BUILD_PREFIX}/examples \
${SB_BUILD_PREFIX}/tools/designer/examples \
${SB_BUILD_PREFIX}/tutorial -name \*.pro -exec rm {} \;

# ensure qmake finds gcc runtime libraries
case "${SB_SYSTYPE}" in
*-aix*)
  export LIBPATH="${SB_VAR_GCC_RT_LIB}" ;;
ia64*-hpux*)
  export LD_LIBRARY_PATH="${SB_VAR_GCC_RT_LIB}" ;;
x86_64-redhat-linuxe[56]|x86_64*-suse*)
  # Look for OpenGL etc. in /usr/lib64 instead of /usr/lib
  ${SB_PATH_SED} -i -e "\
s! /usr/lib /lib! /usr/lib64 /lib64!;" config.tests/*/*.test
  ;;
esac

QTDIR=$(pwd) EXTRA_LFLAGS="${QMAKE_LFLAGS+${QMAKE_LFLAGS}}" \
./configure -verbose -release -static -qt-gif -system-zlib \
-system-libmng -system-libpng -system-libjpeg -stl \
${ARGS+${ARGS}} -platform ${PLATFORM} \
-I${SB_VAR_JPEG_INC} -I${SB_VAR_LIBMNG_INC} \
-I${SB_VAR_LIBPNG_INC} -I${SB_VAR_LIBZ_INC} \
-I${SB_VAR_FCPACKAGE_INC} -I${SB_VAR_LIBTTF_INC} \
-I${SB_VAR_LIBTTF_INC}/freetype2 \
-L${SB_VAR_JPEG_LIB} -L${SB_VAR_LIBMNG_LIB} -L${SB_VAR_LIBPNG_LIB} \
-L${SB_VAR_LIBZ_LIB} -L${SB_VAR_LIBTTF_LIB} \
-L${SB_VAR_FCPACKAGE_LIB} -lfontconfig -L${SB_VAR_LIBEXPAT_LIB} -lexpat \
-R${SB_VAR_JPEG_LIB}:${SB_VAR_LIBMNG_LIB}:${SB_VAR_LIBPNG_LIB}:\
${SB_VAR_LIBZ_LIB}:${SB_VAR_LIBEXPAT_LIB}:${SB_VAR_LIBTTF_LIB}:\
${SB_VAR_FCPACKAGE_LIB}${SB_VAR_GCC_RT+:${SB_VAR_GCC_RT_LIB}} \
-qt-imgfmt-png -qt-imgfmt-jpeg -qt-imgfmt-mng -xft -xrender \
-no-exceptions -bindir ${SB_INSTALL_PREFIX}/bin/${_gcc_subdir} \
-datadir ${_datadir} -headerdir ${SB_INSTALL_PREFIX}/include/${_gcc_subdir} \
-libdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} \
-plugindir ${SB_INSTALL_PREFIX}/plugins/${_gcc_subdir}

# rebuild qmake with correct blibpath
case "${SB_SYSTYPE}" in
*-aix*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,-brtl \
-Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib!;" qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
ia64*-hpux*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,+b,${SB_VAR_GCC_RT_LIB}!;" \
  qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
esac
]]>
      </configure>

      <build>
<![CDATA[
LD_LIBRARY_PATH="${SB_BUILD_PREFIX}/lib" \
LIBPATH="${SB_BUILD_PREFIX}/lib" \
SHLIB_PATH="${SB_BUILD_PREFIX}/lib" \
DOTQTDIR=${SB_BUILD_PREFIX} \
QTDIR=$(pwd) gmake src-qmake src-moc sub-src
]]>
      </build>

      <install>
<![CDATA[
${SB_PATH_INSTALL} -m 644 -o root -g 0 lib/libqt.a \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}
]]>
      </install>

      <uninstall>
<![CDATA[
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqt.a

rmdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} || :
]]>
      </uninstall>
    </module>

    <module name="gcc44-static-thread">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
      </dependencies>

      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix[67]*)
  PLATFORM="aix-g++" ARGS="-sm -thread -no-largefile -no-xcursor"
  QMAKE_LFLAGS="-Wl,-brtl -Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib" ;;
*-aix*)
  PLATFORM="aix-g++" ARGS="-sm -thread -no-largefile"
  QMAKE_LFLAGS="-Wl,-brtl -Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib" ;;
ia64*-hpux*)
  PLATFORM="hpuxi-g++-32" ARGS="-sm -thread"
  QMAKE_LFLAGS="-Wl,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-hpux11.[01]*)
  PLATFORM="hpux-g++" ARGS="-sm -thread -no-ipv6"
  QMAKE_LFLAGS="-Wl,+s,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-hpux*)
  PLATFORM="hpux-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-Wl,+s,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-irix*)
  PLATFORM="irix-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
x86_64*-linuxe4)
  PLATFORM="linux-g++-64" ARGS="-sm -thread -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
x86_64*-linux*)
  PLATFORM="rhel5-g++-64" ARGS="-sm -thread -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-linuxe4)
  PLATFORM="linux-g++" ARGS="-sm -thread -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-linux*)
  PLATFORM="rhel5-g++" ARGS="-sm -thread -xinerama"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
*-osf*)
  PLATFORM="tru64-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-solaris*)
  PLATFORM="solarisx86-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-R${SB_VAR_GCC_RT_LIB}" ;;
*-solaris*)
  PLATFORM="solaris-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-R${SB_VAR_GCC_RT_LIB}" ;;
esac

# allow tests to find GCC runtime path
for _pro in endian/endiantest.pro ipv6/ipv6test.pro \
largefile/largefiletest.pro ptrsize/ptrsizetest.pro \
stl/stltest.pro; do
  cat >>config.tests/unix/${_pro} <<_EOT_
QMAKE_LFLAGS += \$\$QMAKE_RPATH${SB_VAR_GCC_RT_LIB}
_EOT_
done

# don't waste time creating Makefiles in examples/tutorial directories
${SB_PATH_FIND} ${SB_BUILD_PREFIX}/examples \
${SB_BUILD_PREFIX}/tools/designer/examples \
${SB_BUILD_PREFIX}/tutorial -name \*.pro -exec rm {} \;

# ensure qmake finds gcc runtime libraries
case "${SB_SYSTYPE}" in
*-aix*)
  export LIBPATH="${SB_VAR_GCC_RT_LIB}" ;;
ia64*-hpux*)
  export LD_LIBRARY_PATH="${SB_VAR_GCC_RT_LIB}" ;;
x86_64-redhat-linuxe[56]|x86_64*-suse*)
  # Look for OpenGL etc. in /usr/lib64 instead of /usr/lib
  ${SB_PATH_SED} -i -e "\
s! /usr/lib /lib! /usr/lib64 /lib64!;" config.tests/*/*.test
  ;;
esac

QTDIR=$(pwd) EXTRA_LFLAGS="${QMAKE_LFLAGS+${QMAKE_LFLAGS}}" \
./configure -verbose -release -static -qt-gif -system-zlib \
-system-libmng -system-libpng -system-libjpeg -stl \
${ARGS+${ARGS}} -platform ${PLATFORM} \
-I${SB_VAR_JPEG_INC} -I${SB_VAR_LIBMNG_INC} \
-I${SB_VAR_LIBPNG_INC} -I${SB_VAR_LIBZ_INC} \
-I${SB_VAR_FCPACKAGE_INC} -I${SB_VAR_LIBTTF_INC} \
-I${SB_VAR_LIBTTF_INC}/freetype2 \
-L${SB_VAR_JPEG_LIB} -L${SB_VAR_LIBMNG_LIB} \
-L${SB_VAR_LIBPNG_LIB} -L${SB_VAR_LIBZ_LIB} \
-L${SB_VAR_LIBTTF_LIB} -L${SB_VAR_FCPACKAGE_LIB} \
-lfontconfig -L${SB_VAR_LIBEXPAT_LIB} -lexpat \
-R${SB_VAR_JPEG_LIB}:${SB_VAR_LIBMNG_LIB}:${SB_VAR_LIBPNG_LIB}:\
${SB_VAR_LIBZ_LIB}:${SB_VAR_LIBEXPAT_LIB}:${SB_VAR_LIBTTF_LIB}:\
${SB_VAR_FCPACKAGE_LIB}${SB_VAR_GCC_RT+:${SB_VAR_GCC_RT_LIB}} \
-qt-imgfmt-png -qt-imgfmt-jpeg -qt-imgfmt-mng -xft -xrender \
-no-exceptions -bindir ${SB_INSTALL_PREFIX}/bin/${_gcc_subdir} \
-datadir ${_datadir} -headerdir ${SB_INSTALL_PREFIX}/include/${_gcc_subdir} \
-libdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} \
-plugindir ${SB_INSTALL_PREFIX}/plugins/${_gcc_subdir}

# rebuild qmake with correct blibpath
case "${SB_SYSTYPE}" in
*-aix*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,-brtl \
-Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib!;" qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
ia64*-hpux*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,+b,${SB_VAR_GCC_RT_LIB}!;" \
  qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
esac
]]>
      </configure>

      <build>
<![CDATA[
LD_LIBRARY_PATH="${SB_BUILD_PREFIX}/lib" \
LIBPATH="${SB_BUILD_PREFIX}/lib" \
SHLIB_PATH="${SB_BUILD_PREFIX}/lib" \
DOTQTDIR=${SB_BUILD_PREFIX} \
QTDIR=$(pwd) gmake src-qmake src-moc sub-src
]]>
      </build>

      <install>
<![CDATA[
${SB_PATH_INSTALL} -m 644 -o root -g 0 lib/libqt-mt.a \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}
]]>
      </install>

      <uninstall>
<![CDATA[
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqt-mt.a

rmdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} || :
]]>
      </uninstall>
    </module>

    <module name="nothread">
      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix[67]*) 
  PLATFORM="aix-xlc" ARGS="-sm -no-largefile -no-xcursor"
  QMAKE_LFLAGS="-brtl" ;;
*-aix5*)
  PLATFORM="aix-xlc" ARGS="-sm -no-largefile"
  QMAKE_LFLAGS="-brtl" ;;
*-aix*)
  PLATFORM="aix-g++" ARGS="-sm -no-ipv6 -no-exceptions -no-largefile" ;;
ia64*-hpux*)
  PLATFORM="hpuxi-acc-32" ARGS="-sm" ;;
*-hpux11.[01]*)
  PLATFORM="hpux-acc" ARGS="-sm -no-ipv6" ;;
*-hpux*)
  PLATFORM="hpux-acc" ARGS="-sm" ;;
*-irix*)
  PLATFORM="irix-cc" ARGS="-sm" ;;
x86_64*-linuxe4)
  PLATFORM="linux-g++-64" ARGS="-sm -no-exceptions -xinerama \
-xcursor -xrandr" ;;
x86_64*-linux*)
  PLATFORM="rhel5-g++-64" ARGS="-sm -no-exceptions -xinerama \
-xcursor -xrandr" ;;
i?86*-linuxe4)
  PLATFORM="linux-g++" ARGS="-sm -no-exceptions -xinerama \
-xcursor -xrandr" ;;
i?86*-linux*)
  PLATFORM="rhel5-g++" ARGS="-sm -no-exceptions -xinerama" ;;
*-osf*)
  PLATFORM="tru64-cxx" ARGS="-sm" ;;
i?86*-solaris*)
  PLATFORM="solarisx86-cc"
  ARGS="${ARGS+${ARGS}} -sm" ;;
*-solaris*)
  PLATFORM="solaris-cc"
  ARGS="${ARGS+${ARGS}} -sm" ;;
esac

case "${SB_SYSTYPE}" in
hppa*-hpux11.[23]*)
  # remove +DAportable
  ${SB_PATH_SED} -i -e "\
s! +DAportable!!" mkspecs/hpux-acc/qmake.conf ;;
*-aix4*|*-hpux10*)
  # allow tests to find GCC runtime path
  for _pro in endian/endiantest.pro ipv6/ipv6test.pro \
  largefile/largefiletest.pro ptrsize/ptrsizetest.pro \
  stl/stltest.pro; do
    cat >>config.tests/unix/${_pro} <<_EOT_
QMAKE_LFLAGS += \$\$QMAKE_RPATH${SB_VAR_GCC_RT_LIB}
_EOT_
  done
  ;;
x86_64-redhat-linuxe[56]|x86_64*-suse*)
  # Look for OpenGL etc. in /usr/lib64 instead of /usr/lib
  ${SB_PATH_SED} -i -e "\
s! /usr/lib /lib! /usr/lib64 /lib64!;" config.tests/*/*.test
  ;;
*-solaris2.10)
  # remove -R/usr/openwin/lib
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS		=.*!QMAKE_LFLAGS		=!; \
" mkspecs/${PLATFORM}/qmake.conf
  ;;
esac

# Change for Studio 12
case "${SB_SYSTYPE}" in
*-solaris2.9|*-solaris2.1?)
${SB_PATH_SED} -i -e "\
s!-xarch=v8plusa!-m32 -xarch=sparcvis!;" \
mkspecs/${PLATFORM}/qmake.conf ;;
esac

# don't waste time creating Makefiles in examples/tutorial directories
${SB_PATH_FIND} ${SB_BUILD_PREFIX}/examples \
${SB_BUILD_PREFIX}/tools/designer/examples \
${SB_BUILD_PREFIX}/tutorial -name \*.pro -exec rm {} \;

# ensure qmake finds gcc runtime libraries
case "${SB_SYSTYPE}" in
*-aix4*)
  export LIBPATH="${SB_VAR_GCC_RT_LIB}" ;;
esac

QTDIR=$(pwd) EXTRA_LFLAGS="${QMAKE_LFLAGS+${QMAKE_LFLAGS}}" \
EXTRA_CFLAGS="${QMAKE_CFLAGS+${QMAKE_CFLAGS}}" \
./configure -verbose -release -shared -qt-gif -system-zlib \
-system-libmng -system-libpng -system-libjpeg -stl \
${ARGS+${ARGS}} -platform ${PLATFORM} \
${SB_VAR_JPEG+-I${SB_VAR_JPEG_INC}} \
${SB_VAR_LIBMNG+-I${SB_VAR_LIBMNG_INC}} \
${SB_VAR_LIBPNG+-I${SB_VAR_LIBPNG_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} \
${SB_VAR_FCPACKAGE+-I${SB_VAR_FCPACKAGE_INC}} \
${SB_VAR_LIBTTF+-I${SB_VAR_LIBTTF_INC}} \
${SB_VAR_LIBTTF+-I${SB_VAR_LIBTTF_INC}/freetype2} \
${SB_VAR_JPEG+-L${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBMNG+-L${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_LIBPNG+-L${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_FCPACKAGE+-L${SB_VAR_FCPACKAGE_LIB} -lfontconfig} \
${SB_VAR_LIBTTF+-L${SB_VAR_LIBTTF_LIB}} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB} -lexpat} \
${SB_VAR_JPEG+-R${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBMNG+-R${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_LIBPNG+-R${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+-R${SB_VAR_LIBZ_LIB}} \
${SB_VAR_FCPACKAGE+-R${SB_VAR_FCPACKAGE_LIB}} \
${SB_VAR_LIBTTF+-R${SB_VAR_LIBTTF_LIB}} \
${SB_VAR_LIBEXPAT+-R${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_GCC_RT+-R${SB_VAR_GCC_RT_LIB}} \
-qt-imgfmt-png -qt-imgfmt-jpeg -qt-imgfmt-mng -xft -xrender \
-docdir ${_docdir} -datadir ${_datadir} \
-libdir ${_libdir} -prefix ${SB_INSTALL_PREFIX}

# rebuild qmake with correct blibpath
case "${SB_SYSTYPE}" in
*-aix4*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,-brtl \
-Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib!;" qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
esac
]]>
      </configure>

      <build>
<![CDATA[
LD_LIBRARY_PATH="${SB_BUILD_PREFIX}/lib" \
LIBPATH="${SB_BUILD_PREFIX}/lib" \
SHLIB_PATH="${SB_BUILD_PREFIX}/lib" \
DOTQTDIR=${SB_BUILD_PREFIX} \
QTDIR=$(pwd) gmake src-qmake src-moc sub-src
]]>
      </build>

      <install>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-blibpath:" ;;
*-aix*)
  CC_LD_RT="-Wl,-blibpath:" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b," ;;
*-hpux*)
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*|*-osf*)
  CC_LD_RT="-rpath " ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-solaris*)
  CC_LD_RT="-R" ;;
esac

(cd ${SB_BUILD_PREFIX}/src

# rebuild libraries so RPATH is correct
${SB_PATH_SED} -i -e "\
s!^QMAKE_LIBDIR_QT=.*!QMAKE_LIBDIR_QT=${_libdir}!" \
${SB_BUILD_PREFIX}/.qmake.cache

QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake qt.pro
QTDIR=${SB_BUILD_PREFIX} gmake)

# fix qt.pc file
${SB_PATH_SED} -i -e "\
s!^prefix=.*!prefix=${SB_INSTALL_PREFIX}!; \
s!^libdir=.*!libdir=${_libdir}!; \
s!^includedir=.*!includedir=${_includedir}!; \
s!-L${SB_INSTALL_PREFIX}/lib!-L\${libdir}!; \
s!-I${SB_INSTALL_PREFIX}/include!-I\${includedir}!; \
s!Libs: -L\([^ ][^ ]*\)!Libs: -L\1 ${CC_LD_RT}\1!; \
s!-l/qt.pc!-lqt!;" ${_libdir}/qt.pc
mv ${_libdir}/qt.pc ${_libdir}/pkgconfig/qt.pc

# remove build prefix from .prl files
${SB_PATH_FIND} ${_libdir} -name \*.prl | while read _prl; do
  ${SB_PATH_SED} -i -e "\
s!-L${SB_BUILD_PREFIX}/lib !!g" ${_prl}
done

${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}
]]>
      </install>
    </module>

    <module name="sip-2.7.2">
      <build-name>sip-4.8.1</build-name>

      <sources>
        <source checksum="859e5b103ba5a083e4f2021eb6d99b26"
          checksum-type="md5" size="614105"
          path="src/sip-4.8.1.tar.gz"/>
        <patch checksum="2d7a794997cf6b31c60a284780a9ebab"
          checksum-type="md5" size="31208"
          path="src/sip-4.8.1.tww.patch"/>
      </sources>

      <dependencies>
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend program="qt" var="LIBQT" install-name="libqt33"
          module="gcc44">v&gt;=3.3.8</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
        <depend program="python" var="PYTHON" install-name="python27"
          add-path="prepend">v&gt;=2.7.2</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_pysubdir="python27"

_install_prefix="${SB_INSTALL_PREFIX_LIB}/${_pysubdir}"
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-Wl,-blibpath:"
  LDFLAGS="-Wl,-blibpath:/usr/lib"
  PLATFORM="aix-g++" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b,"
  PLATFORM="hpuxi-g++-32" ;;
*-hpux*)
  CC_LD_RT="-Wl,+b,"
  PLATFORM="hpux-g++" ;;
*-irix*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="irix-g++" ;;
x86_64*-linuxe4)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="linux-g++-64"

  ;;
x86_64*-linux*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="rhel5-g++-64" ;;
i?86*-linuxe4)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="linux-g++" 

  ;;
i?86*-linux*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="rhel5-g++" ;;
*-osf*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="tru64-g++" ;;
i?86*-solaris*)
  CC_LD_RT="-Wl,-R,"
  PLATFORM="solarisx86-g++" ;;
*-solaris*)
  CC_LD_RT="-Wl,-R,"
  PLATFORM="solaris-g++"
  ;;
esac

case "${SB_SYSTYPE}" in
*-aix*)
  ${SB_PATH_SED} -i -e "\
s|ld_so_aix|${SB_VAR_PYTHON}/lib/python2.7/config/ld_so_aix g++ \
-Wl,-bI:${SB_VAR_PYTHON}/lib/python2.7/config/python.exp |;" \
  specs/aix-g++ ;;
esac

QTDIR=${_qtdir:-${SB_VAR_LIBQT}} \
${SB_VAR_PYTHON}/bin/python configure.py \
-b ${_install_prefix}/bin -d ${_install_prefix} \
-e ${_install_prefix}/include -p ${PLATFORM} \
-q ${_datadir} \
INCDIR=${_qt_inc:-${SB_VAR_LIBQT_INC}/${_gcc_subdir}} \
LIBDIR=${_qt_lib:-${SB_VAR_LIBQT_LIB}/${_gcc_subdir}} \
CXXFLAGS+="-DQT_NO_STL -fno-exceptions"

if [ "${SB_VAR_GCC_RT+set}" = set ]; then
  find ${SB_BUILD_PREFIX} -name Makefile | while read _makefile; do
    ${SB_PATH_SED} -i -e "\
s|^\(LFLAGS.*\)|\1 ${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB} \
${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} ${LDFLAGS+${LDFLAGS}}|" \
    ${_makefile}
  done
fi
]]>
      </configure>

      <install>
<![CDATA[
gmake install

${SB_PATH_CHMOD} 644 ${_install_prefix}/sipdistutils.py

# install path for Python's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_install_prefix}/include.paths.d
cat >${_install_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_install_prefix}
_EOT_
]]>
      </install>

      <uninstall>
<![CDATA[
rm ${_install_prefix}/bin/sip ${_install_prefix}/include/sip.h \
${_install_prefix}/sip*

rmdir ${_install_prefix}/bin || :
rmdir ${_install_prefix}/include || :
rmdir ${_install_prefix} || :
]]>
      </uninstall>
    </module>

    <module name="gcc44-nothread">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
      </dependencies>

      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix[67]*)
  PLATFORM="aix-g++" ARGS="-sm -no-largefile -no-xcursor"
  QMAKE_LFLAGS="-Wl,-brtl -Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib" ;;
*-aix*)
  PLATFORM="aix-g++" ARGS="-sm -no-largefile"
  QMAKE_LFLAGS="-Wl,-brtl -Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib" ;;
ia64*-hpux*)
  PLATFORM="hpuxi-g++-32" ARGS="-sm"
  QMAKE_LFLAGS="-Wl,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-hpux11.[01]*)
  PLATFORM="hpux-g++" ARGS="-sm -no-ipv6"
  QMAKE_LFLAGS="-Wl,+s,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-hpux*)
  PLATFORM="hpux-g++" ARGS="-sm"
  QMAKE_LFLAGS="-Wl,+s,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-irix*)
  PLATFORM="irix-g++" ARGS="-sm"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
x86_64*-linuxe4)
  PLATFORM="linux-g++-64" ARGS="-sm -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
x86_64*-linux*)
  PLATFORM="rhel5-g++-64" ARGS="-sm -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-linuxe4)
  PLATFORM="linux-g++" ARGS="-sm -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-linux*)
  PLATFORM="rhel5-g++" ARGS="-sm -xinerama"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
*-osf*)
  PLATFORM="tru64-g++" ARGS="-sm"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-solaris*)
  PLATFORM="solarisx86-g++" ARGS="-sm"
  QMAKE_LFLAGS="-R${SB_VAR_GCC_RT_LIB}" ;;
*-solaris*)
  PLATFORM="solaris-g++" ARGS="-sm"
  QMAKE_LFLAGS="-R${SB_VAR_GCC_RT_LIB}" ;;
esac

# allow tests to find GCC runtime path
for _pro in endian/endiantest.pro ipv6/ipv6test.pro \
largefile/largefiletest.pro ptrsize/ptrsizetest.pro \
stl/stltest.pro; do
  cat >>config.tests/unix/${_pro} <<_EOT_
QMAKE_LFLAGS += \$\$QMAKE_RPATH${SB_VAR_GCC_RT_LIB}
_EOT_
done

# don't waste time creating Makefiles in examples/tutorial directories
${SB_PATH_FIND} ${SB_BUILD_PREFIX}/examples \
${SB_BUILD_PREFIX}/tools/designer/examples \
${SB_BUILD_PREFIX}/tutorial -name \*.pro -exec rm {} \;

# ensure qmake finds gcc runtime libraries
case "${SB_SYSTYPE}" in
*-aix*)
  export LIBPATH="${SB_VAR_GCC_RT_LIB}" ;;
ia64*-hpux*)
  export LD_LIBRARY_PATH="${SB_VAR_GCC_RT_LIB}" ;;
x86_64-redhat-linuxe[56]|x86_64*-suse*)
  # Look for OpenGL etc. in /usr/lib64 instead of /usr/lib
  ${SB_PATH_SED} -i -e "\
s! /usr/lib /lib! /usr/lib64 /lib64!;" config.tests/*/*.test
  ;;
esac

QTDIR=$(pwd) EXTRA_LFLAGS="${QMAKE_LFLAGS+${QMAKE_LFLAGS}}" \
./configure -verbose -release -shared -qt-gif -system-zlib \
-system-libmng -system-libpng -system-libjpeg -stl \
${ARGS+${ARGS}} -platform ${PLATFORM} -I${SB_VAR_JPEG_INC} \
-I${SB_VAR_LIBMNG_INC} -I${SB_VAR_LIBPNG_INC} \
-I${SB_VAR_LIBZ_INC} -I${SB_VAR_FCPACKAGE_INC} \
-I${SB_VAR_LIBTTF_INC} -I${SB_VAR_LIBTTF_INC}/freetype2 \
-L${SB_VAR_JPEG_LIB} -L${SB_VAR_LIBMNG_LIB} \
-L${SB_VAR_LIBPNG_LIB} -L${SB_VAR_LIBZ_LIB} \
-L${SB_VAR_LIBTTF_LIB} -L${SB_VAR_FCPACKAGE_LIB} -lfontconfig \
-L${SB_VAR_LIBEXPAT_LIB} -lexpat -R${SB_VAR_JPEG_LIB}:\
${SB_VAR_LIBMNG_LIB}:${SB_VAR_LIBPNG_LIB}:${SB_VAR_LIBZ_LIB}:\
${SB_VAR_LIBEXPAT_LIB}:${SB_VAR_LIBTTF_LIB}:${SB_VAR_FCPACKAGE_LIB}\
${SB_VAR_GCC_RT+:${SB_VAR_GCC_RT_LIB}} \
-qt-imgfmt-png -qt-imgfmt-jpeg -qt-imgfmt-mng -xft -xrender \
-no-exceptions -bindir ${SB_INSTALL_PREFIX}/bin/${_gcc_subdir} \
-datadir ${_datadir} -headerdir ${SB_INSTALL_PREFIX}/include/${_gcc_subdir} \
-libdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} \
-plugindir ${SB_INSTALL_PREFIX}/plugins/${_gcc_subdir}

# rebuild qmake with correct blibpath
case "${SB_SYSTYPE}" in
*-aix*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,-brtl \
-Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib!;" qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
ia64*-hpux*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,+b,${SB_VAR_GCC_RT_LIB}!;" \
  qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
esac
]]>
      </configure>

      <build>
<![CDATA[
LD_LIBRARY_PATH="${SB_BUILD_PREFIX}/lib" \
LIBPATH="${SB_BUILD_PREFIX}/lib" \
SHLIB_PATH="${SB_BUILD_PREFIX}/lib" \
DOTQTDIR=${SB_BUILD_PREFIX} \
QTDIR=$(pwd) gmake src-qmake src-moc sub-src
]]>
      </build>

      <install>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-Wl,-blibpath:" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b," ;;
*-hpux*)
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*|*-linux*|*-osf*)
  CC_LD_RT="-Wl,-rpath," ;;
*-solaris*)
  CC_LD_RT="-Wl,-R" ;;
esac

(cd ${SB_BUILD_PREFIX}/src

# rebuild libraries so RPATH is correct
${SB_PATH_SED} -i -e "\
s!^QMAKE_LIBDIR_QT=.*!\
QMAKE_LIBDIR_QT=${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}!" \
${SB_BUILD_PREFIX}/.qmake.cache

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake qt.pro
QTDIR=${SB_BUILD_PREFIX} gmake)

# fix qt.pc file
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/pkgconfig
${SB_PATH_SED} -i -e "\
s!^prefix=.*!prefix=${SB_INSTALL_PREFIX}!; \
s!^libdir=.*!libdir=${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}!; \
s!^includedir=.*!includedir=${SB_INSTALL_PREFIX}/include/${_gcc_subdir}!; \
s!${SB_BUILD_PREFIX}/lib!\${libdir}!; \
s!${SB_BUILD_PREFIX}/include!\${includedir}!; \
s!Libs: -L\([^ ][^ ]*\)!Libs: -L\1 ${CC_LD_RT}\1!; \
s!-l/qt.pc!-lqt!;" ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/qt.pc
mv ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/qt.pc \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/pkgconfig/qt.pc

# remove build prefix from .prl files
${SB_PATH_FIND} ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} -name \*.prl |\
while read _prl; do
  ${SB_PATH_SED} -i -e "\
s!-L${SB_BUILD_PREFIX}/lib !!g" ${_prl}
done

${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}
]]>
      </install>

      <uninstall>
<![CDATA[
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqt.la
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqt.prl
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqt.s[lo]*
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/pkgconfig/qt.pc

rmdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/pkgconfig || :
rmdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} || :
]]>
      </uninstall>
    </module>

    <module name="gcc44">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
      </dependencies>

      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix[67]*)
  PLATFORM="aix-g++" ARGS="-sm -thread -no-largefile -no-xcursor"
  QMAKE_LFLAGS="-Wl,-brtl -Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib" ;;
*-aix*)
  PLATFORM="aix-g++" ARGS="-sm -thread -no-largefile"
  QMAKE_LFLAGS="-Wl,-brtl -Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib" ;;
ia64*-hpux*)
  PLATFORM="hpuxi-g++-32" ARGS="-sm -thread"
  QMAKE_LFLAGS="-Wl,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-hpux11.[01]*)
  PLATFORM="hpux-g++" ARGS="-sm -thread -no-ipv6"
  QMAKE_LFLAGS="-Wl,+s,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-hpux*)
  PLATFORM="hpux-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-Wl,+s,+b,${SB_VAR_GCC_RT_LIB}" ;;
*-irix*)
  PLATFORM="irix-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
x86_64*-linuxe4)
  PLATFORM="linux-g++-64" ARGS="-sm -thread -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
x86_64*-linux*)
  PLATFORM="rhel5-g++-64" ARGS="-sm -thread -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-linuxe4)
  PLATFORM="linux-g++" ARGS="-sm -thread -xinerama -xcursor -xrandr"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-linux*)
  PLATFORM="rhel5-g++" ARGS="-sm -thread -xinerama"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
*-osf*)
  PLATFORM="tru64-g++" ARGS="-sm -thread"
  QMAKE_CFLAGS="-mieee"
  QMAKE_LFLAGS="-Wl,-rpath,${SB_VAR_GCC_RT_LIB}" ;;
i?86*-solaris*)
  PLATFORM="solarisx86-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-R${SB_VAR_GCC_RT_LIB}" ;;
*-solaris*)
  PLATFORM="solaris-g++" ARGS="-sm -thread"
  QMAKE_LFLAGS="-R${SB_VAR_GCC_RT_LIB}" ;;
esac

# allow tests to find GCC runtime path
for _pro in endian/endiantest.pro ipv6/ipv6test.pro \
largefile/largefiletest.pro ptrsize/ptrsizetest.pro \
stl/stltest.pro; do
  cat >>config.tests/unix/${_pro} <<_EOT_
QMAKE_LFLAGS += \$\$QMAKE_RPATH${SB_VAR_GCC_RT_LIB}
_EOT_
done

# don't waste time creating Makefiles in examples/tutorial directories
${SB_PATH_FIND} ${SB_BUILD_PREFIX}/examples \
${SB_BUILD_PREFIX}/tools/designer/examples \
${SB_BUILD_PREFIX}/tutorial -name \*.pro -exec rm {} \;

# ensure qmake finds gcc runtime libraries
case "${SB_SYSTYPE}" in
*-aix*)
  export LIBPATH="${SB_VAR_GCC_RT_LIB}" ;;
ia64*-hpux*)
  export LD_LIBRARY_PATH="${SB_VAR_GCC_RT_LIB}" ;;
x86_64-redhat-linuxe[56]|x86_64*-suse*)
  # Look for OpenGL etc. in /usr/lib64 instead of /usr/lib
  ${SB_PATH_SED} -i -e "\
s! /usr/lib /lib! /usr/lib64 /lib64!;" config.tests/*/*.test
  ;;
esac

QTDIR=$(pwd) EXTRA_LFLAGS="${QMAKE_LFLAGS+${QMAKE_LFLAGS}}" \
EXTRA_CFLAGS="${QMAKE_CFLAGS+${QMAKE_CFLAGS}}" \
./configure -debug -verbose -release -shared -qt-gif -system-zlib \
-system-libmng -system-libpng -system-libjpeg -stl \
${ARGS+${ARGS}} -platform ${PLATFORM} \
-I${SB_VAR_JPEG_INC} -I${SB_VAR_LIBMNG_INC} \
-I${SB_VAR_LIBPNG_INC} -I${SB_VAR_LIBZ_INC} \
-I${SB_VAR_FCPACKAGE_INC} -I${SB_VAR_LIBTTF_INC} \
-I${SB_VAR_LIBTTF_INC}/freetype2 \
-L${SB_VAR_JPEG_LIB} -L${SB_VAR_LIBMNG_LIB} \
-L${SB_VAR_LIBPNG_LIB} -L${SB_VAR_LIBZ_LIB} \
-L${SB_VAR_LIBTTF_LIB} -L${SB_VAR_FCPACKAGE_LIB} \
-lfontconfig -L${SB_VAR_LIBEXPAT_LIB} -lexpat \
-R${SB_VAR_JPEG_LIB}:${SB_VAR_LIBMNG_LIB}:${SB_VAR_LIBPNG_LIB}:\
${SB_VAR_LIBZ_LIB}:${SB_VAR_LIBEXPAT_LIB}:${SB_VAR_LIBTTF_LIB}:\
${SB_VAR_FCPACKAGE_LIB}${SB_VAR_GCC_RT+:${SB_VAR_GCC_RT_LIB}} \
-qt-imgfmt-png -qt-imgfmt-jpeg -qt-imgfmt-mng -xft -xrender \
-no-exceptions -bindir ${SB_INSTALL_PREFIX}/bin/${_gcc_subdir} \
-datadir ${_datadir} -headerdir ${SB_INSTALL_PREFIX}/include/${_gcc_subdir} \
-libdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} \
-plugindir ${SB_INSTALL_PREFIX}/plugins/${_gcc_subdir}

# rebuild qmake with correct blibpath
case "${SB_SYSTYPE}" in
*-aix*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,-brtl \
-Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib!;" qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
ia64*-hpux*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,+b,${SB_VAR_GCC_RT_LIB}!;" \
  qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
esac
]]>
      </configure>

      <build>
<![CDATA[
LD_LIBRARY_PATH="${SB_BUILD_PREFIX}/lib" \
LIBPATH="${SB_BUILD_PREFIX}/lib" \
SHLIB_PATH="${SB_BUILD_PREFIX}/lib" \
DOTQTDIR=${SB_BUILD_PREFIX} \
QTDIR=$(pwd) gmake src-qmake src-moc sub-src sub-tools
]]>
      </build>

      <install>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-blibpath:" ;;
*-aix*)
  CC_LD_RT="-Wl,-blibpath:" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b," ;;
*-hpux*)
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*|*-osf*)
  CC_LD_RT="-rpath " ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-solaris*)
  CC_LD_RT="-R" ;;
esac

(cd ${SB_BUILD_PREFIX}/src

gmake install_headers install_headers_p

# rebuild libraries so RPATH is correct
${SB_PATH_SED} -i -e "\
s!^QMAKE_LIBDIR_QT=.*!\
QMAKE_LIBDIR_QT=${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}!" \
${SB_BUILD_PREFIX}/.qmake.cache

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${SB_INSTALL_PREFIX}/bin/${_gcc_subdir} \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}

QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake qt.pro
QTDIR=${SB_BUILD_PREFIX} gmake QMAKE=${SB_BUILD_PREFIX}/bin/qmake)

(cd ${SB_BUILD_PREFIX}/tools/designer/uic
rm bin/uic
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake uic.pro
${SB_PATH_SED} -i -e "\
s! ${CC_LD_RT}${SB_BUILD_BASE}[^ ][^ ]*!!g" Makefile
QTDIR=${SB_BUILD_PREFIX} gmake install

(cd ${SB_BUILD_PREFIX}/tools/designer/uilib
rm lib/libqui*
${SB_PATH_SED} -i -e "\
s!^DESTDIR.*!DESTDIR = ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/!" uilib.pro
QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake uilib.pro
QTDIR=${SB_BUILD_PREFIX} gmake install)

rm ${SB_BUILD_PREFIX}/plugins/designer/*
for _plugin in cppeditor dlg kdevdlg rc wizards; do
  (cd ${SB_BUILD_PREFIX}/tools/designer/plugins/${_plugin}
  QTDIR=${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}/bin/qmake ${_plugin}.pro
  ${SB_PATH_SED} -i -e "\
s! ${CC_LD_RT}[^ ][^ ]*plugins/designer!!" Makefile
  QTDIR=${SB_BUILD_PREFIX} gmake install)
done)

# install libqassistantclient
${SB_PATH_INSTALL} -m 644 -o root -g 0 lib/libqassistantclient* \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}

# fix qt-mt.pc file
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/pkgconfig
${SB_PATH_SED} -i -e "\
s!^prefix=.*!prefix=${SB_INSTALL_PREFIX}!; \
s!^libdir=.*!libdir=${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}!; \
s!^includedir=.*!includedir=${SB_INSTALL_PREFIX}/include/${_gcc_subdir}!; \
s!-L${SB_BUILD_PREFIX}/lib!-L\${libdir}!; \
s!-I${SB_BUILD_PREFIX}/include!-I\${includedir}!; \
s!Libs: -L\([^ ][^ ]*\)!Libs: -L\1 ${CC_LD_RT}\1!; \
s!-l/qt-mt.pc!-lqt-mt!;" ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/qt-mt.pc
mv ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/qt-mt.pc \
${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/pkgconfig/qt-mt.pc

# remove build prefix from .prl files
${SB_PATH_FIND} ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} -name \*.prl |\
while read _prl; do
  ${SB_PATH_SED} -i -e "\
s!-L${SB_BUILD_PREFIX}/lib !!g" ${_prl}
done

${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}/include/${_gcc_subdir}
${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${SB_INSTALL_PREFIX}/bin/${_gcc_subdir}
rm -rf ${SB_INSTALL_PREFIX}/include/${_gcc_subdir}
rm -rf ${SB_INSTALL_PREFIX}/plugins/${_gcc_subdir}
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqassistantclient.*
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqt-mt.la
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqt-mt.prl
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqt-mt.s[lo]*
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/libqui.*
rm ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/pkgconfig/qt-mt.pc

rmdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir}/pkgconfig || :
rmdir ${SB_INSTALL_PREFIX}/lib/${_gcc_subdir} || :
]]>
      </uninstall>
    </module>

    <module name="PyQt-2.7.2">
      <build-name>PyQt-x11-gpl-3.18.1</build-name>

      <sources>
        <source checksum="f1d120495d1aaf393819e988c0a7bb7e"
          checksum-type="md5" size="819441"
          path="src/PyQt-x11-gpl-3.18.1.tar.gz"/>
        <patch checksum="22a582a8bca4fe3d4aa1070edac535cf"
          checksum-type="md5" size="1161"
          path="src/PyQt-x11-gpl-3.18.1.tww.patch"/>
      </sources>

      <dependencies>
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
        <depend program="expat" var="LIBEXPAT"
          install-name="libexpat20">v&gt;=2.0.1</depend>
        <depend program="fcpackage" var="FCPACKAGE"
          install-name="fcpackage28">v&gt;=2.8</depend>
        <depend program="jpeg" var="JPEG"
          install-name="libjpeg8">v&gt;=8b</depend>
        <depend program="libmng" var="LIBMNG"
          install-name="libmng10">v&gt;=1.0.10</depend>
        <depend program="libpng" var="LIBPNG"
          install-name="libpng14">v&gt;=1.4.4</depend>
        <depend program="qscintilla" var="LIBQSCINTILLA"
          install-name="libqscintilla17"
          module="gcc44">v&gt;=1.71</depend>
        <depend program="qt" var="LIBQT" install-name="libqt33"
          module="gcc44">v&gt;=3.3.8</depend>
        <depend program="zlib" var="LIBZ"
          install-name="libz12">v==1.2.5</depend>
        <depend program="python" var="PYTHON" install-name="python27"
          add-path="prepend">v&gt;=2.7.2</depend>
        <depend program="qt" module="sip-2.7.2">v==3.3.8</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_pysubdir="python27"

_install_prefix="${SB_INSTALL_PREFIX_LIB}/${_pysubdir}"
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-Wl,-blibpath:"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib"
  PLATFORM="aix-g++" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b,"
  PLATFORM="hpuxi-g++-32" ;;
*-hpux*)
  CC_LD_RT="-Wl,+b,"
  PLATFORM="hpux-g++" ;;
*-irix*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="irix-g++" ;;
x86_64*-linuxe4)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="linux-g++-64"

  ;;
x86_64*-linux*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="rhel5-g++-64" ;;
i?86*-linuxe4)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="linux-g++"

  ;;
i?86*-linux*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="rhel5-g++" ;;
*-osf*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="tru64-g++" ;;
i?86*-solaris*)
  CC_LD_RT="-Wl,-R,"
  PLATFORM="solarisx86-g++"

  ;;
*-solaris*)
  CC_LD_RT="-Wl,-R,"
  PLATFORM=solaris-g++

  ;;
esac


# Allow executables to run during configure stage
case "${SB_SYSTYPE}" in
ia64*-hpux*)
  export LD_LIBRARY_PATH=${SB_VAR_GCC_RT_LIB} ;;
*-aix*)
  export LIBPATH=${SB_VAR_GCC_RT_LIB} ;;
esac

QTDIR=${_qtdir:-${SB_VAR_LIBQT}} QMAKESPEC=${PLATFORM} \
PYTHONPATH=${_install_prefix} \
${SB_VAR_PYTHON}/bin/python configure.py \
-w -b ${_install_prefix}/bin -d ${_install_prefix} \
-n ${SB_VAR_LIBQSCINTILLA_INC} \
-o ${_libqscintilla_lib:-${SB_VAR_LIBQSCINTILLA_LIB}/${_gcc_subdir}} \
-v ${_install_prefix}/share -y qt-mt \
INCDIR_QT=${_qt_inc:-${SB_VAR_LIBQT_INC}/${_gcc_subdir}} \
LIBDIR_QT=${_qt_lib:-${SB_VAR_LIBQT_LIB}/${_gcc_subdir}}

# set runtime path to Qt library dependencies and GCC runtime path
find ${SB_BUILD_PREFIX} -name Makefile | while read _makefile; do
  ${SB_PATH_SED} -i -e "\
s|-L\(${_libqscintilla_lib:-${SB_VAR_LIBQSCINTILLA_LIB}/${_gcc_subdir}}\)|\
-L\1 ${CC_LD_RT}\1|; \
s|^\(LFLAGS.*\)|\1 ${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB}} \
${SB_VAR_FCPACKAGE+${CC_LD_RT}${SB_VAR_FCPACKAGE_LIB}} \
${SB_VAR_LIBEXPAT+${CC_LD_RT}${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_LIBMNG+${CC_LD_RT}${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_JPEG+${CC_LD_RT}${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBPNG+${CC_LD_RT}${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} \
${SB_VAR_GCC_RT+${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} \
${LDFLAGS+${LDFLAGS}}|;" \
  ${_makefile}
done

case "${SB_SYSTYPE}" in
*-aix*)
  find ${SB_BUILD_PREFIX}/qt* -name Makefile | while read _makefile; do
    ${SB_PATH_SED} -i -e "\
s|^LINK = g++|LINK = ${SB_VAR_PYTHON}/lib/python2.7/config/ld_so_aix \
g++ -Wl,-bI:${SB_VAR_PYTHON}/lib/python2.7/config/python.exp|;" \
    ${_makefile}
  done

  ${SB_PATH_SED} -i -e "\
s|^\(LFLAGS.*\)|\1 -Wl,-bbigtoc|;" qt/Makefile ;;
esac
]]>
      </configure>

      <uninstall>
<![CDATA[
rm -rf ${_install_prefix}/bin/pyuic \
${_install_prefix}/bin/pylupdate \
${_install_prefix}/qt* \
${_install_prefix}/pyqtconfig.py \
${_install_prefix}/share/qt*

rmdir ${_install_prefix}/bin || :
rmdir ${_install_prefix}/include || :
rmdir ${_install_prefix}/share || :
rmdir ${_install_prefix} || :
]]>
      </uninstall>
    </module>

    <module name="static-nothread">
      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix[67]*)
  PLATFORM="aix-xlc" ARGS="-sm -no-largefile -no-xcursor"
  QMAKE_LFLAGS="-brtl" ;;
*-aix5*)
  PLATFORM="aix-xlc" ARGS="-sm -no-largefile"
  QMAKE_LFLAGS="-brtl" ;;
*-aix*)
  PLATFORM="aix-g++" ARGS="-sm -no-exceptions -no-ipv6 -no-largefile" ;;
ia64*-hpux*)
  PLATFORM="hpuxi-acc-32" ARGS="-sm" ;;
*-hpux11.[01]*)
  PLATFORM="hpux-acc" ARGS="-sm -no-ipv6" ;;
*-hpux10*)
  PLATFORM="hpux-g++" ARGS="-sm -no-exceptions" ;;
*-hpux*)
  PLATFORM="hpux-acc" ARGS="-sm" ;;
*-irix*)
  PLATFORM="irix-cc" ARGS="-sm" ;;
x86_64*-linuxe4)
  PLATFORM="linux-g++-64" ARGS="-sm -no-exceptions -xinerama \
-xcursor -xrandr" ;;
x86_64*-linux*)
  PLATFORM="rhel5-g++-64" ARGS="-sm -no-exceptions -xinerama \
-xcursor -xrandr" ;;
i?86*-linuxe4)
  PLATFORM="linux-g++" ARGS="-sm -no-exceptions -xinerama \
-xcursor -xrandr" ;;
i?86*-linux*)
  PLATFORM="rhel5-g++" ARGS="-sm -no-exceptions -xinerama" ;;
*-osf*)
  PLATFORM="tru64-cxx" ARGS="-sm" ;;
i?86*-solaris*)
  PLATFORM="solarisx86-cc"
  ARGS="${ARGS+${ARGS}} -sm" ;;
*-solaris*)
  PLATFORM="solaris-cc"
  ARGS="${ARGS+${ARGS}} -sm" ;;
esac

case "${SB_SYSTYPE}" in
hppa*-hpux11.[23]*)
  # remove +DAportable
  ${SB_PATH_SED} -i -e "\
s! +DAportable!!" mkspecs/hpux-acc/qmake.conf ;;
*-aix4*|*-hpux10*)
  # allow tests to find GCC runtime path
  for _pro in endian/endiantest.pro ipv6/ipv6test.pro \
  largefile/largefiletest.pro ptrsize/ptrsizetest.pro \
  stl/stltest.pro; do
    cat >>config.tests/unix/${_pro} <<_EOT_
QMAKE_LFLAGS += \$\$QMAKE_RPATH${SB_VAR_GCC_RT_LIB}
_EOT_
  done
  ;;
x86_64-redhat-linuxe[56]|x86_64*-suse*)
  # Look for OpenGL etc. in /usr/lib64 instead of /usr/lib
  ${SB_PATH_SED} -i -e "\
s! /usr/lib /lib! /usr/lib64 /lib64!;" config.tests/*/*.test
  ;;
*-solaris2.10)
  # remove -R/usr/openwin/lib
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS		=.*!QMAKE_LFLAGS		=!; \
" mkspecs/${PLATFORM}/qmake.conf
  ;;
esac

# Change for Studio 12
case "${SB_SYSTYPE}" in
*-solaris2.9|*-solaris2.1?)
${SB_PATH_SED} -i -e "\
s!-xarch=v8plusa!-m32 -xarch=sparcvis!;" \
mkspecs/${PLATFORM}/qmake.conf ;;
esac

# don't waste time creating Makefiles in examples/tutorial directories
${SB_PATH_FIND} ${SB_BUILD_PREFIX}/examples \
${SB_BUILD_PREFIX}/tools/designer/examples \
${SB_BUILD_PREFIX}/tutorial -name \*.pro -exec rm {} \;

# ensure qmake finds gcc runtime libraries
case "${SB_SYSTYPE}" in
*-aix4*)
  export LIBPATH="${SB_VAR_GCC_RT_LIB}" ;;
esac

QTDIR=$(pwd) EXTRA_LFLAGS="${QMAKE_LFLAGS+${QMAKE_LFLAGS}}" \
EXTRA_CFLAGS="${QMAKE_CFLAGS+${QMAKE_CFLAGS}}" \
./configure -verbose -release -static -qt-gif -system-zlib \
-system-libmng -system-libpng -system-libjpeg -stl \
${ARGS+${ARGS}} -platform ${PLATFORM} \
${SB_VAR_JPEG+-I${SB_VAR_JPEG_INC}} \
${SB_VAR_LIBMNG+-I${SB_VAR_LIBMNG_INC}} \
${SB_VAR_LIBPNG+-I${SB_VAR_LIBPNG_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} \
${SB_VAR_FCPACKAGE+-I${SB_VAR_FCPACKAGE_INC}} \
${SB_VAR_LIBTTF+-I${SB_VAR_LIBTTF_INC}} \
${SB_VAR_LIBTTF+-I${SB_VAR_LIBTTF_INC}/freetype2} \
${SB_VAR_JPEG+-L${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBMNG+-L${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_LIBPNG+-L${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_FCPACKAGE+-L${SB_VAR_FCPACKAGE_LIB} -lfontconfig} \
${SB_VAR_LIBTTF+-L${SB_VAR_LIBTTF_LIB}} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB} -lexpat} \
${SB_VAR_JPEG+-R${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBMNG+-R${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_LIBPNG+-R${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+-R${SB_VAR_LIBZ_LIB}} \
${SB_VAR_FCPACKAGE+-R${SB_VAR_FCPACKAGE_LIB}} \
${SB_VAR_LIBTTF+-R${SB_VAR_LIBTTF_LIB}} \
${SB_VAR_LIBEXPAT+-R${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_GCC_RT+-R${SB_VAR_GCC_RT_LIB}} \
-qt-imgfmt-png -qt-imgfmt-jpeg -qt-imgfmt-mng -xft -xrender \
-docdir ${_docdir} -datadir ${_datadir} \
-libdir ${_libdir} -prefix ${SB_INSTALL_PREFIX}

# rebuild qmake with correct blibpath
case "${SB_SYSTYPE}" in
*-aix4*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,-brtl \
-Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib!;" qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
esac
]]>
      </configure>

      <build>
<![CDATA[
LD_LIBRARY_PATH="${SB_BUILD_PREFIX}/lib" \
LIBPATH="${SB_BUILD_PREFIX}/lib" \
SHLIB_PATH="${SB_BUILD_PREFIX}/lib" \
DOTQTDIR=${SB_BUILD_PREFIX} \
QTDIR=$(pwd) gmake src-qmake src-moc sub-src
]]>
      </build>

      <install>
<![CDATA[
${SB_PATH_INSTALL} -m 644 -o root -g 0 lib/libqt.a ${_libdir}
]]>
      </install>
    </module>

    <module name="static-thread">
      <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"

_gcc_subdir="gcc44"

_includedir=${SB_INSTALL_PREFIX}/include
_libdir=${SB_INSTALL_PREFIX_LIB}
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix[67]*)
  PLATFORM="aix-xlc" ARGS="-sm -thread -no-largefile -no-xcursor"
  QMAKE_LFLAGS="-brtl" ;;
*-aix5*)
  PLATFORM="aix-xlc" ARGS="-sm -thread -no-largefile"
  QMAKE_LFLAGS="-brtl" ;;
*-aix*)
  PLATFORM="aix-g++" ARGS="-sm -thread -no-ipv6 -no-exceptions \
-no-largefile" ;;
ia64*-hpux*)
  PLATFORM="hpuxi-acc-32" ARGS="-sm -thread" ;;
*-hpux11.[01]*)
  PLATFORM="hpux-acc" ARGS="-sm -thread -no-ipv6" ;;
*-hpux*)
  PLATFORM="hpux-acc" ARGS="-sm -thread" ;;
*-irix*)
  PLATFORM="irix-cc" ARGS="-sm -thread" ;;
x86_64*-linuxe4)
  PLATFORM="linux-g++-64" ARGS="-sm -no-exceptions -thread -xinerama \
-xcursor -xrandr" ;;
x86_64*-linux*)
  PLATFORM="rhel5-g++-64" ARGS="-sm -no-exceptions -thread -xinerama \
-xcursor -xrandr" ;;
i?86*-linuxe4)
  PLATFORM="linux-g++" ARGS="-sm -no-exceptions -thread -xinerama \
-xcursor -xrandr" ;;
i?86*-linux*)
  PLATFORM="rhel5-g++" ARGS="-sm -no-exceptions -thread -xinerama" ;;
*-osf*)
  PLATFORM="tru64-cxx" ARGS="-sm -thread" ;;
i?86*-solaris*)
  PLATFORM="solarisx86-cc"
  ARGS="${ARGS+${ARGS}} -sm -thread" ;;
*-solaris*)
  PLATFORM="solaris-cc"
  ARGS="${ARGS+${ARGS}} -sm -thread" ;;
esac

case "${SB_SYSTYPE}" in
hppa*-hpux11.[23]*)
  # remove +DAportable
  ${SB_PATH_SED} -i -e "\
s! +DAportable!!" mkspecs/hpux-acc/qmake.conf ;;
*-aix4*|*-hpux10*)
  # allow tests to find GCC runtime path
  for _pro in endian/endiantest.pro ipv6/ipv6test.pro \
  largefile/largefiletest.pro ptrsize/ptrsizetest.pro \
  stl/stltest.pro; do
    cat >>config.tests/unix/${_pro} <<_EOT_
QMAKE_LFLAGS += \$\$QMAKE_RPATH${SB_VAR_GCC_RT_LIB}
_EOT_
  done
  ;;
x86_64-redhat-linuxe[56]|x86_64*-suse*)
  # Look for OpenGL etc. in /usr/lib64 instead of /usr/lib
  ${SB_PATH_SED} -i -e "\
s! /usr/lib /lib! /usr/lib64 /lib64!;" config.tests/*/*.test
  ;;
*-solaris2.10)
  # remove -R/usr/openwin/lib
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS		=.*!QMAKE_LFLAGS		=!; \
" mkspecs/${PLATFORM}/qmake.conf
  ;;
esac

# Change for Studio 12
case "${SB_SYSTYPE}" in
*-solaris2.9|*-solaris2.1?)
${SB_PATH_SED} -i -e "\
s!-xarch=v8plusa!-m32 -xarch=sparcvis!;" \
mkspecs/${PLATFORM}/qmake.conf ;;
esac

# don't waste time creating Makefiles in examples/tutorial directories
${SB_PATH_FIND} ${SB_BUILD_PREFIX}/examples \
${SB_BUILD_PREFIX}/tools/designer/examples \
${SB_BUILD_PREFIX}/tutorial -name \*.pro -exec rm {} \;

# ensure qmake finds gcc runtime libraries
case "${SB_SYSTYPE}" in
*-aix4*)
  export LIBPATH="${SB_VAR_GCC_RT_LIB}" ;;
esac

QTDIR=$(pwd) EXTRA_LFLAGS="${QMAKE_LFLAGS+${QMAKE_LFLAGS}}" \
EXTRA_CFLAGS="${QMAKE_CFLAGS+${QMAKE_CFLAGS}}" \
./configure -verbose -release -static -qt-gif -system-zlib \
-system-libmng -system-libpng -system-libjpeg -stl \
${ARGS+${ARGS}} -platform ${PLATFORM} \
${SB_VAR_JPEG+-I${SB_VAR_JPEG_INC}} \
${SB_VAR_LIBMNG+-I${SB_VAR_LIBMNG_INC}} \
${SB_VAR_LIBPNG+-I${SB_VAR_LIBPNG_INC}} \
${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} \
${SB_VAR_FCPACKAGE+-I${SB_VAR_FCPACKAGE_INC}} \
${SB_VAR_LIBTTF+-I${SB_VAR_LIBTTF_INC}} \
${SB_VAR_LIBTTF+-I${SB_VAR_LIBTTF_INC}/freetype2} \
${SB_VAR_JPEG+-L${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBMNG+-L${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_LIBPNG+-L${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${SB_VAR_FCPACKAGE+-L${SB_VAR_FCPACKAGE_LIB} -lfontconfig} \
${SB_VAR_LIBTTF+-L${SB_VAR_LIBTTF_LIB}} \
${SB_VAR_LIBEXPAT+-L${SB_VAR_LIBEXPAT_LIB} -lexpat} \
${SB_VAR_JPEG+-R${SB_VAR_JPEG_LIB}} \
${SB_VAR_LIBMNG+-R${SB_VAR_LIBMNG_LIB}} \
${SB_VAR_LIBPNG+-R${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+-R${SB_VAR_LIBZ_LIB}} \
${SB_VAR_FCPACKAGE+-R${SB_VAR_FCPACKAGE_LIB}} \
${SB_VAR_LIBTTF+-R${SB_VAR_LIBTTF_LIB}} \
${SB_VAR_LIBEXPAT+-R${SB_VAR_LIBEXPAT_LIB}} \
${SB_VAR_GCC_RT+-R${SB_VAR_GCC_RT_LIB}} \
-qt-imgfmt-png -qt-imgfmt-jpeg -qt-imgfmt-mng -xft -xrender \
-docdir ${_docdir} -datadir ${_datadir} \
-libdir ${_libdir} -prefix ${SB_INSTALL_PREFIX}

# rebuild qmake with correct blibpath
case "${SB_SYSTYPE}" in
*-aix4*)
  ${SB_PATH_SED} -i -e "\
s!^QMAKE_LFLAGS.*!QMAKE_LFLAGS = -Wl,-brtl \
-Wl,-blibpath:${SB_VAR_GCC_RT_LIB}:/usr/lib!;" qmake/Makefile
  (cd ${SB_BUILD_PREFIX}/qmake
   rm qmake && gmake qmake) ;;
esac
]]>
      </configure>

      <build>
<![CDATA[
LD_LIBRARY_PATH="${SB_BUILD_PREFIX}/lib" \
LIBPATH="${SB_BUILD_PREFIX}/lib" \
SHLIB_PATH="${SB_BUILD_PREFIX}/lib" \
DOTQTDIR=${SB_BUILD_PREFIX} \
QTDIR=$(pwd) gmake src-qmake src-moc sub-src
]]>
      </build>

      <install>
<![CDATA[
${SB_PATH_INSTALL} -m 644 -o root -g 0 lib/libqt-mt.a ${_libdir}
]]>
      </install>
    </module>

    <module name="sip-2.6.7">
      <build-name>sip-4.8.1</build-name>

      <sources>
        <source checksum="859e5b103ba5a083e4f2021eb6d99b26"
          checksum-type="md5" size="614105"
          path="src/sip-4.8.1.tar.gz"/>
        <patch checksum="2d7a794997cf6b31c60a284780a9ebab"
          checksum-type="md5" size="31208"
          path="src/sip-4.8.1.tww.patch"/>
      </sources>

      <dependencies>
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend program="qt" var="LIBQT" install-name="libqt33"
          module="gcc44">v&gt;=3.3.8</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
        <depend program="python" var="PYTHON" install-name="python26"
          add-path="prepend">v&gt;=2.6.7</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_pysubdir="python26"

_install_prefix="${SB_INSTALL_PREFIX_LIB}/${_pysubdir}"
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-Wl,-blibpath:"
  LDFLAGS="-Wl,-blibpath:/usr/lib"
  PLATFORM="aix-g++" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b,"
  PLATFORM="hpuxi-g++-32" ;;
*-hpux*)
  CC_LD_RT="-Wl,+b,"
  PLATFORM="hpux-g++" ;;
*-irix*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="irix-g++" ;;
x86_64*-linuxe4)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="linux-g++-64"

  ;;
x86_64*-linux*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="rhel5-g++-64" ;;
i?86*-linuxe4)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="linux-g++" 

  ;;
i?86*-linux*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="rhel5-g++" ;;
*-osf*)
  CC_LD_RT="-Wl,-rpath,"
  PLATFORM="tru64-g++" ;;
i?86*-solaris*)
  CC_LD_RT="-Wl,-R,"
  PLATFORM="solarisx86-g++" ;;
*-solaris*)
  CC_LD_RT="-Wl,-R,"
  PLATFORM="solaris-g++"
  ;;
esac

case "${SB_SYSTYPE}" in
*-aix*)
  ${SB_PATH_SED} -i -e "\
s|ld_so_aix|${SB_VAR_PYTHON}/lib/python2.6/config/ld_so_aix g++ \
-Wl,-bI:${SB_VAR_PYTHON}/lib/python2.6/config/python.exp |;" \
  specs/aix-g++ ;;
esac

QTDIR=${_qtdir:-${SB_VAR_LIBQT}} \
${SB_VAR_PYTHON}/bin/python configure.py \
-b ${_install_prefix}/bin -d ${_install_prefix} \
-e ${_install_prefix}/include -p ${PLATFORM} \
-q ${_datadir} \
INCDIR=${_qt_inc:-${SB_VAR_LIBQT_INC}/${_gcc_subdir}} \
LIBDIR=${_qt_lib:-${SB_VAR_LIBQT_LIB}/${_gcc_subdir}} \
CXXFLAGS+="-DQT_NO_STL -fno-exceptions"

if [ "${SB_VAR_GCC_RT+set}" = set ]; then
  find ${SB_BUILD_PREFIX} -name Makefile | while read _makefile; do
    ${SB_PATH_SED} -i -e "\
s|^\(LFLAGS.*\)|\1 ${SB_VAR_GCC_RT+-L${SB_VAR_GCC_RT_LIB} \
${CC_LD_RT}${SB_VAR_GCC_RT_LIB}} ${LDFLAGS+${LDFLAGS}}|" \
    ${_makefile}
  done
fi
]]>
      </configure>

      <install>
<![CDATA[
gmake install

${SB_PATH_CHMOD} 644 ${_install_prefix}/sipdistutils.py

# install path for Python's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_install_prefix}/include.paths.d
cat >${_install_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_install_prefix}
_EOT_
]]>
      </install>

      <uninstall>
<![CDATA[
rm ${_install_prefix}/bin/sip ${_install_prefix}/include/sip.h \
${_install_prefix}/sip*

rmdir ${_install_prefix}/bin || :
rmdir ${_install_prefix}/include || :
rmdir ${_install_prefix} || :
]]>
      </uninstall>
    </module>

    <notes>
      <change from="3.3.1" to="3.3.2">
        <items name="General (Compilers)">
          <item><para>MinGW: It is now possible to build the WinXP
style on MinGW</para></item>
          <item><para>FreeBSD: Enable DragonFly to build Qt with its
native compiler</para></item>
          <item><para>Mac: Assistant builds with Professional edition
when Fink is installed</para></item>
          <item><para>AIX: Fixed compile problem with
OpenType</para></item>
          <item><para>Tru64: Correctly detects the Compaq C++
compiler</para></item>
          <item><para>HP-UX 64: Fixed link failure for
Designer</para></item>
          <item><para>Intel: Fixed compile failure on icc version 8.0
p42+</para></item>
          <item><para>Qt/Embedded: Compiles with gcc 3.4.0
(prerelease)</para></item>
          <item><para>Added macro QT_QLOCALE_USES_FCVT for systems
with non-IEEE-compliant floating point implementations (notably some
versions of ARM Linux). These systems are not autodetected; use
"-DQT_QLOCALE_USES_FCVT" as a parameter to ./configure.</para></item>
        </items>

        <items name="General (Qt Designer)">
          <item><para>Allows saving of the column and label
information for QDataTable, even when Qt is compiled without the SQL
module</para></item>
          <item><para>Fixed data corruption in .pro files with
whitespace</para></item>
          <item><para>Fixed crash on closing a new, modified, unsaved
C++ file</para></item>
          <item><para>Fixed crash with QicsTable</para></item>
          <item><para>Fixed corrupted .ui files caused by '&lt;' or
'&gt;' in the object name</para></item>
          <item><para>Fixed freeze when opening a modal Wizard Dialog
from file</para></item>
          <item><para>Fixed crash when adding a new separator using
drag and drop</para></item>
        </items>

        <items name="General (Qt Assistant)">
          <item><para>Fixed the Settings font combobox to not re-add
font entries</para></item>
        </items>

        <items name="Library (General Fixes)">
          <item><para>QAction:</para>
          <unorderedlist>
            <item><para>Fixed bug when adding invisible/disabled
actions to visible/enabled action groups</para></item>
          </unorderedlist></item>
          <item><para>QCanvas:</para>
          <unorderedlist>
            <item><para>Cleans up old animations in
setCanvas()</para></item>
          </unorderedlist></item>
          <item><para>QClipboard:</para>
          <unorderedlist>
            <item><para>Fixed potential double deletion in clean
up</para></item>
          </unorderedlist></item>
          <item><para>QColorDialog:</para>
          <unorderedlist>
            <item><para>Fixed crash when running on very small
screens (less than 480x350)</para></item>
          </unorderedlist></item>
          <item><para>QDateEdit:</para>
          <unorderedlist>
            <item><para>Fixed bug that would accept invalid dates
when losing focus</para></item>
          </unorderedlist></item>
          <item><para>QDialog:</para>
          <unorderedlist>
            <item><para>Made showMaximized() and showFullScreen()
work for dialogs again</para></item>
          </unorderedlist></item>
          <item><para>QDns:</para>
          <unorderedlist>
            <item><para>Improved handling of literal IP addresses
for both IPv4 and IPv6</para></item>
            <item><para>Improved handling of
disappearing/reappearing name servers</para></item>
          </unorderedlist></item>
          <item><para>QFont:</para>
          <unorderedlist>
            <item><para>Fixed handling of Oblique
fonts</para></item>
          </unorderedlist></item>
          <item><para>QImage:</para>
          <unorderedlist>
            <item><para>Fixed crash when loading MNG
animations</para></item>
          </unorderedlist></item>
          <item><para>QLabel:</para>
          <unorderedlist>
            <item><para>Fixed bug with labels without buddies that
have '&amp;' in the text</para></item>
          </unorderedlist></item>
          <item><para>QLineEdit:</para>
          <unorderedlist>
            <item><para>Handles input method events according to the
specification, fixing severe problems with Korean input on Windows.
This change could show up problems with buggy input methods. Fixed
disappearing cursor for right-aligned text and Xft1.</para></item>
          </unorderedlist></item>
          <item><para>QListBox:</para>
          <unorderedlist>
            <item><para>Fixed bug in itemAt() when listbox has wide
line/framestyle</para></item>
          </unorderedlist></item>
          <item><para>QListView:</para>
          <unorderedlist>
            <item><para>Fixed problem with editor sometimes having
zero width</para></item>
          </unorderedlist></item>
          <item><para>QLocale:</para>
          <unorderedlist>
            <item><para>Fixed crash on FreeBSD/Alpha</para></item>
          </unorderedlist></item>
          <item><para>QPainter:</para>
          <unorderedlist>
            <item><para>Fixed QPicture transformation
bug</para></item>
          </unorderedlist></item>
          <item><para>QPopupMenu:</para>
          <unorderedlist>
            <item><para>Fixed crash-on-exit bug when using floating
menus</para></item>
          </unorderedlist></item>
          <item><para>QRegExp:</para>
          <unorderedlist>
            <item><para>Fixed bug with patterns of the form
"^A|B"</para></item>
          </unorderedlist></item>
          <item><para>QSocket:</para>
          <unorderedlist>
            <item><para>Fixed bug where connecting two QSockets
simultaneously would cause both to connect to the same address. Fixed
bug where ErrConnectionRefused would not be emitted in rare
cases.</para></item>
          </unorderedlist></item>
          <item><para>QSql:</para>
          <unorderedlist>
            <item><para>Fixed data corruption in OCI
driver</para></item>
            <item><para>Fixed data corruption with SQLite driver
when using non-UTF-8 databases with special characters</para></item>
            <item><para>Updated to work with SQLite version
2.8.13</para></item>
          </unorderedlist></item>
          <item><para>QString:</para>
          <unorderedlist>
            <item><para>Made string-to-number conversions interpret
strings according to the current locale</para></item>
            <item><para>Fixed the format of the %p sprintf
flag</para></item>
            <item><para>Perform sanity check on the length parameter
to fromUtf8()</para></item>
            <item><para>Fixed toDouble() to again return a value
even when failing on trailing whitespace</para></item>
            <item><para>Performance optimization for
startsWith()/endsWith()</para></item>
          </unorderedlist></item>
          <item><para>QTable:</para>
          <unorderedlist>
            <item><para>Fixed crash caused by calling addLabel() on
a horizontal header when there are no columns in the
table</para></item>
            <item><para>Fixed crash that occurs when deleting a
QTable while editing a cell</para></item>
            <item><para>Made it possible to override the grid line
color</para></item>
            <item><para>Fixed selectionChanged() to be emitted
correctly when dealing with selections of multiple items</para></item>
          </unorderedlist></item>
          <item><para>QTabWidget:</para>
          <unorderedlist>
            <item><para>Fixed setAutoMask()</para></item>
          </unorderedlist></item>
          <item><para>QToolButton:</para>
          <unorderedlist>
            <item><para>Icon and label now move the same distance
when pressed</para></item>
          </unorderedlist></item>
          <item><para>QTextEdit:</para>
          <unorderedlist>
            <item><para>Does not override Ctrl+Alt+key
accelerators</para></item>
            <item><para>Performance optimization: do not call
ensureCursorVisible() when isUpdatesEnabled() is not
true</para></item>
            <item><para>Fixed crash when using removeParagraph() to
remove QTextTable items</para></item>
            <item><para>Fixed data corruption when saving documents
with overline or strikeout</para></item>
          </unorderedlist></item>
          <item><para>QTextBrowser:</para>
          <unorderedlist>
            <item><para>Fixed Purify warning about array-bound
reads</para></item>
          </unorderedlist></item>
          <item><para>QVariant:</para>
          <unorderedlist>
            <item><para>Fixed bug in detaching LongLong and
ULongLong values</para></item>
          </unorderedlist></item>
          <item><para>QWidget:</para>
          <unorderedlist>
            <item><para>Made
showMaximized()/showFullScreen()/showMinimized() work correctly
again</para></item>
            <item><para>Posts events from the windowing system as
before</para></item>
          </unorderedlist></item>
          <item><para>QWizard:</para>
          <unorderedlist>
            <item><para>Does not show enabled Next button on the
last page if the Finish button was enabled on an earlier
page</para></item>
          </unorderedlist></item>
          <item><para>QWorkspace:</para>
          <unorderedlist>
            <item><para>Scales down maximize icon
correctly</para></item>
            <item><para>Fixed active window/focus bug</para></item>
            <item><para>Ensured that children added to invisible
workspaces are painted correctly</para></item>
            <item><para>Fixed flicker with tooltips for maximize,
minimize and close buttons</para></item>
          </unorderedlist></item>
          <item><para>QXml:</para>
          <unorderedlist>
            <item><para>Fixed bug causing data corruption when reading
invalid XML files</para></item>
          </unorderedlist></item>
        </items>

        <items name="Platform-Specific Issues (Windows)">
          <item><para>QApplication:</para>
          <unorderedlist>
            <item><para>Does not handle GUI messages for non-GUI
appliations</para></item>
            <item><para>Disabled MenuItem highlight color for XP in
non-themed Classical Style</para></item>
          </unorderedlist></item>
          <item><para>QContextMenuEvent:</para>
          <unorderedlist>
            <item><para>Made right mouse button send menu event also
for popup widgets such as the QListBox in QComboBox</para></item>
          </unorderedlist></item>
          <item><para>QDesktopWidget:</para>
          <unorderedlist>
            <item><para>Made qApp-&gt;desktop()-&gt;size() give the
correct size after a display resolution change</para></item>
          </unorderedlist></item>
          <item><para>QFont:</para>
          <unorderedlist>
            <item><para>Loading a Japanese font using the English
name now works when running in a Japanese locale</para></item>
          </unorderedlist></item>
          <item><para>QLineEdit:</para>
          <unorderedlist>
            <item><para>Fixed drawing problems that affected very
long strings and the handling of trailing spaces when using
Uniscribe</para></item>
          </unorderedlist></item>
          <item><para>QPainter:</para>
          <unorderedlist>
            <item><para>Fixed possible crash in
setBrush()</para></item>
            <item><para>Draw bitmaps using painter's foreground
color when painter is using a complex transformation</para></item>
            <item><para>Fixed inter-letter spacings for scaled
fonts</para></item>
          </unorderedlist></item>
          <item><para>QPrinter:</para>
          <unorderedlist>
            <item><para>Fixed crash when using buggy printer
drivers</para></item>
          </unorderedlist></item>
          <item><para>QSound:</para>
          <unorderedlist>
            <item><para>Made setLoops(-1) work again (plays the
sound in a loop)</para></item>
            <item><para>Made setLoops(0) play no sound</para></item>
            <item><para>Made setLoops(1) set isFinished()
correctly</para></item>
            <item><para>Fixed memory leak</para></item>
            <item><para>If a new sound is started then stop the
existing one, and play the new one</para></item>
          </unorderedlist></item>
          <item><para>QTextEngine:</para>
          <unorderedlist>
            <item><para>Performs auto-detection of Asian scripts
even if Uniscribe is not installed</para></item>
          </unorderedlist></item>
          <item><para>QWidget:</para>
          <unorderedlist>
            <item><para>Returns correct isMinimized/isMaximized
state if an application is started through a shortcut using
"Minimized" or "Maximized"</para></item>
          </unorderedlist></item>
        </items>

        <items name="Platform-Specific Issues (Mac)">
          <item><para>QAccel:</para>
          <unorderedlist>
            <item><para>Solved the problem where we received two
accel override events for each keypress</para></item>
          </unorderedlist></item>
          <item><para>QApplication:</para>
          <unorderedlist>
            <item><para>Uses better technique for obtaining
applicationFilePath()</para></item>
            <item><para>Allows non-GUI applications to run without
the GUI</para></item>
            <item><para>Stopped using EnableSecureEventInput()
because of Jaguar/Panther compatibility problems</para></item>
            <item><para>Updates the text highlight color when the
system changes it</para></item>
          </unorderedlist></item>
          <item><para>QClipboard:</para>
          <unorderedlist>
            <item><para>Fixed posting to the clipboard and access
rights</para></item>
          </unorderedlist></item>
          <item><para>QComboBox:</para>
          <unorderedlist>
            <item><para>Ensures that the item list stays within the
screen size</para></item>
          </unorderedlist></item>
          <item><para>QCursor:</para>
          <unorderedlist>
            <item><para>Uses native splitter cursors when
available</para></item>
          </unorderedlist></item>
          <item><para>QFontMetrics:</para>
          <unorderedlist>
            <item><para>Fixed fontmetrics for Asian
fonts</para></item>
          </unorderedlist></item>
          <item><para>QLineEdit:</para>
          <unorderedlist>
            <item><para>Uses secure keyboard input in Password mode,
so that keyboard events cannot be intercepted</para></item>
          </unorderedlist></item>
          <item><para>QMacStyle:</para>
          <unorderedlist>
            <item><para>Fixed painting of radio buttons to be
perfectly circular</para></item>
          </unorderedlist></item>
          <item><para>QMenuBar:</para>
          <unorderedlist>
            <item><para>Fixed bug when using pixmaps without an
alpha channel</para></item>
          </unorderedlist></item>
          <item><para>QPainter:</para>
          <unorderedlist>
            <item><para>Improved raster operations</para></item>
            <item><para>Made custom bitmap brushes
work</para></item>
            <item><para>Draws text using painter's foreground
color</para></item>
          </unorderedlist></item>
          <item><para>QPrinter:</para>
          <unorderedlist>
            <item><para>Ensures that the printer name and page range
are correct after setup</para></item>
            <item><para>Always uses the native print
dialog</para></item>
            <item><para>Implemented setPageSize() and pageSize()
properly</para></item>
            <item><para>Made QPrinter work when no printer is
installed</para></item>
            <item><para>Fixed font width bug in postscript when font
embedding is disabled</para></item>
          </unorderedlist></item>
          <item><para>QSettings:</para>
          <unorderedlist>
            <item><para>Returns correct value for global settings
when scope is User</para></item>
          </unorderedlist></item>
          <item><para>QSlider:</para>
          <unorderedlist>
            <item><para>Fixed drawing of tickmarks when minimum
value is non-zero</para></item>
          </unorderedlist></item>
          <item><para>QStyle:</para>
          <unorderedlist>
            <item><para>Does not change pixmap of QToolbutton if the
button is not auto-raised</para></item>
          </unorderedlist></item>
          <item><para>QWidget:</para>
          <unorderedlist>
            <item><para>Fixed bug where the toolbar is partially
hidden when showing a mainwindow in fullscreen mode</para></item>
            <item><para>Made WStyle_StaysOnTop work in the same way
as on the other platforms</para></item>
            <item><para>Fixed bug in maximizing windows with a
maximum size</para></item>
          </unorderedlist></item>
          <item><para>QWorkspace:</para>
          <unorderedlist>
            <item><para>Fixed bug giving frozen child windows when
maximizing and restoring</para></item>
          </unorderedlist></item>
        </items>

        <items name="Platform-Specific Issues (X11)">
          <item><para>Fixed crash bug when using X Input Method
Chinput</para></item>
          <item><para>Drag and Drop:</para>
          <unorderedlist>
            <item><para>Ignores accelerator events when
dragging</para></item>
          </unorderedlist></item>
          <item><para>QClipboard:</para>
          <unorderedlist>
            <item><para>Fixed bug where data()-&gt;format() would
return the wrong value</para></item>
            <item><para>Fixed potential crashes with regards to
iterators</para></item>
          </unorderedlist></item>
          <item><para>QFont:</para>
          <unorderedlist>
            <item><para>Avoids badly scaled fonts, and prefers exact
matches</para></item>
            <item><para>Made sure symbol fonts get loaded
correctly</para></item>
            <item><para>Made it possible to load Latin fonts that do
not contain the Euro symbol</para></item>
            <item><para>Fixed glyph width bug observed with some
Khmer fonts</para></item>
            <item><para>Fixed crash with misconfigured
Xft</para></item>
            <item><para>Fixed problem with font selection for Xft2
when having Latin text with non-Latin locale</para></item>
            <item><para>Respects custom dpi settings for
Xft</para></item>
            <item><para>Does not use Xft if we have FreeType1 but no
XRender</para></item>
            <item><para>Fixed memory leak in the font engine when
drawing transformed fonts</para></item>
          </unorderedlist></item>
          <item><para>QGL:</para>
          <unorderedlist>
            <item><para>Fixed crash when rendering text in GL
widgets</para></item>
          </unorderedlist></item>
          <item><para>QLocale:</para>
          <unorderedlist>
            <item><para>Tru64: Fixed crash when INFINITY is compared
to another double</para></item>
            <item><para>Tru64: Uses DBL_INFINITY for Compaq C++
compiler</para></item>
          </unorderedlist></item>
          <item><para>QMimeSource:</para>
          <unorderedlist>
            <item><para>Does not re-enter the event loop in
provides()</para></item>
          </unorderedlist></item>
          <item><para>QPainter:</para>
          <unorderedlist>
            <item><para>Fixed rendering of anti-aliased text on
non-XRender enabled displays</para></item>
          </unorderedlist></item>
          <item><para>QPrinter:</para>
          <unorderedlist>
            <item><para>Fixed setFromTo()</para></item>
            <item><para>Fixed printing of Arabic text with XLFD
fonts</para></item>
          </unorderedlist></item>
          <item><para>QTextEdit:</para>
          <unorderedlist>
            <item><para>Fixed bug with extremely long
lines</para></item>
          </unorderedlist></item>
          <item><para>QThread:</para>
          <unorderedlist>
            <item><para>Fixed bug that made program require
superuser privileges on some Linux machines</para></item>
          </unorderedlist></item>
          <item><para>QWidget:</para>
          <unorderedlist>
            <item><para>Fixed showFullScreen() and showMaximized()
for window managers that do not support extended window manager hints
(EWMH)</para></item>
          </unorderedlist></item>
        </items>

        <items name="Platform-Specific Issues (Embedded)">
          <item><para>QFontInfo:</para>
          <unorderedlist>
            <item><para>Made QFontInfo work properly on
Qt/Embedded</para></item>
          </unorderedlist></item>
          <item><para>QGfxVNC:</para>
          <unorderedlist>
            <item><para>Fixed crash if VNC viewer is closed while
Qt/E is painting</para></item>
          </unorderedlist></item>
          <item><para>QWidget:</para>
          <unorderedlist>
            <item><para>Uses correct focus handling if the focus
widget is hidden or deleted while a popup is open</para></item>
          </unorderedlist></item>
        </items>

        <items name="Platform-Specific Issues (Linux)">
          <item><para>Fixed race condition in handling of virtual
console switching that could cause a deadlock in some
cases</para></item>
          <item><para>Switch consoles on key press event</para></item>
          <item><para>Fixed QWSServer::hideCursor()/showCursor()
display locking bug which could block client processes</para></item>
        </items>
      </change>

      <note type="build">
        <para>The Qt library has been compiled with support for GIF,
JPEG, PNG, and MNG images, with thread support, and Xrender support
for antialias fonts. A non-threaded Qt library is available for all
platforms where the threaded library is supported. A static Qt library
is available for all platforms. The associated libqt.prl file should
be ignored when using the static Qt library as the libqt.prl file is
associated with the non-threaded Qt library.</para>
        <para>On HP-UX 11.x, IRIX 6.5, and Redhat Linux, Solaris, and
Tru64 UNIX, Qt is built with the vendor C++ compiler. Versions of the
library compiled with v3.4.3 of the GNU C++ compiler are available in
the <command>${SB_INSTALL_PREFIX}/lib/gcc44</command> directory.
Versions of the library compiled with v4.1.2 of the GNU C++ compiler
are available in the <command>${SB_INSTALL_PREFIX}/lib/gcc41</command>
directory.</para>
        <para>When compiled with the GNU C++ compiler, Qt has been
compiled without exception support.</para>
        <para>Antialias font support is enabled for all platforms. The
<command>qtconfig</command> program can be used to enable it.</para>
      </note>

      <note type="usage">
        <para>The PyQt and sip Python modules are available in the
following directories:</para>
        <screen>
${SB_INSTALL_PREFIX}/lib/python26    # Python 2.6.7
${SB_INSTALL_PREFIX}/lib/python27    # Python 2.7.2
        </screen>

        <para>The directory is automatically added to the correct
Python include.paths.d directory by the postinstall script.</para>
      </note>

      <platform name="HP-UX 11.00">
        <para>Patch <command>PHSS_22543</command> providing the
<command>libstd_v2</command> Standard C++ library is required as the
HP C++ compiler was used.</para>
      </platform>

      <platform name="Tru64 UNIX">
        <para>The latest C++ runtime library is required due to the
usage of the latest Compaq C++ compiler. It is available from the
following locations:</para>
        <unorderedlist>
          <item><para>package CXXREDIST651V37.tar in the support
directory of the CD</para></item>
          <item><para>online support directory <ulink url="ftp://support.thewrittenword.com/dists">ftp://support.thewrittenword.com/dists</ulink></para></item>
          <item><para>directly from Compaq at <ulink url="ftp://ftp.compaq.com/pub/products/C-CXX/Tru64/cxx/cxxredist.htm">ftp://ftp.compaq.com/pub/products/C-CXX/Tru64/cxx/cxxredist.htm</ulink></para></item>
        </unorderedlist>
      </platform>
    </notes>

    <changelog>
      <change date="2012 May 4" revision="9"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Add patch from Debian to allow building with GCC
4.6</para></item>
      </change>

      <change date="2012 January 3" revision="8"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Update freetype dependency from 2.4.4 to
2.4.6</para></item>
      </change>

      <change date="2011 June 10" revision="7"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Add support for AIX 7.1</para></item>
        <item><para>Update fcpacakge dependency from 2.6 to
2.8</para></item>
        <item><para>Update bison dependency from 2.3 to
2.4.3</para></item>
        <item><para>Update freetype dependency from 2.3.7 to
2.4.4</para></item>
        <item><para>Update libpng dependency from 1.2.29 to
1.4.4</para></item>
        <item><para>Update libmng dependency from 1.0.9 to
1.0.10</para></item>
        <item><para>Update perl dependency from 5.8.8 to
5.12.2</para></item>
        <item><para>Update gcc dependency from 4.2.4 to
4.4.6</para></item>
      </change>

      <change date="2010 October 28" revision="6"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Add support for RHEL 6</para></item>
      </change>

      <change date="2010 March 30" revision="5"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Build OpenGL support on RHEL 5</para></item>
      </change>

      <change date="2009 April 27" revision="4"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Add support for SLES 10</para></item>
      </change>

      <change date="2008 December 16" revision="3"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Add support for AIX 6.1</para></item>
        <item><para>Add support for HPUX 11.31</para></item>
        <item><para>Update fcpacakge dependency from 2.4 to
2.6</para></item>
        <item><para>Update flex dependency from 2.5.4a to
2.5.35</para></item>
        <item><para>Update freetype dependency from 2.3.5 to
2.3.7</para></item>
        <item><para>Update libpng dependency from 1.2.18 to
1.2.29</para></item>
        <item><para>Update perl dependency from 5.8.6 to
5.8.8</para></item>
      </change>

      <change date="2007 October 27" revision="2"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Apply patch for CVE-2007-0242 (<ulink url="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0242">http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0242</ulink>).</para></item>
        <item><para>Apply patch for CVE-2007-4137 (<ulink url="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4137">http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4137</ulink>).</para></item>
        <item><para>Apply patch for CVE-2007-3388 (<ulink url="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3388">http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3388</ulink>).
Multiple format string vulnerabilities in (1)
<command>qtextedit.cpp</command>, (2)
<command>qdatatable.cpp</command>, (3)
<command>qsqldatabase.cpp</command>, (4)
<command>qsqlindex.cpp</command>, (5)
<command>qsqlrecord.cpp</command>, (6) <command>qglobal.cpp</command>,
and (7) <command>qsvgdevice.cpp</command> in QTextEdit in Qt allow
remote attackers to execute arbitrary code via format string
specifiers in text used to compose an error message.</para></item>
        <item><para>Update expat dependency from 2.0.0 to
2.0.1</para></item>
        <item><para>Update fcpackage dependency from 2.2 to
2.4</para></item>
        <item><para>Update freetype dependency from 2.3.4 to
2.3.5</para></item>
        <item><para>Update libpng dependency from 1.2.4 to
1.2.18</para></item>
        <item><para>Update zlib dependency from 1.1.4 to
1.2.3</para></item>
      </change>
    </changelog>
  </program>
</programs>
