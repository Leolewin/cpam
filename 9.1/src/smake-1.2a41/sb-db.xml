<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="smake" version="1.2a41" revision="2">
    <build-name>${SB_PROG_NAME}-1.2</build-name>

    <install-name>${SB_PROG_NAME}12</install-name>

    <sources>
      <source checksum="16ed2a07db8589a223a6aa0f66176078"
        checksum-type="md5" size="322768"
        path="src/smake-1.2a41.tar.bz2"/>
      <patch checksum="0720e480f980b535dbc3bcd16aa90b27"
        checksum-type="md5" size="2583"
        path="src/smake-1.2.tww.patch"/>
      <patch checksum="fd11139c6f07185a7b3c8d7b2dd22249"
        checksum-type="md5" size="91173"
        path="src/smake-1.2.auto.patch"/>
    </sources>

    <script-header>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC=cc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDOPTX="-lm" ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"
  LDOPTX="-lm" ;;
*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  LDOPTX="-lm" ;;
*-irix*)
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1009,1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0" ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentium4 -march=pentium4" ;;
*-osf*)
  CC=cc CFLAGS="-O2 -arch ev5 -msym -readonly_strings" ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis" ;;
esac
]]>
    </script-header>

    <build>
<![CDATA[
gmake CCOM="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
${LDOPTX+LDOPTX="${LDOPTX}"}
]]>
    </build>

    <install>
<![CDATA[
gmake CCOM="${CC:-gcc}" ${LDOPTX+LDOPTX="${LDOPTX}"} \
INS_BASE="${SB_INSTALL_PREFIX}" install

${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}
if [ "${SB_INSTALL_PREFIX_LIB}" != "${SB_INSTALL_PREFIX}/lib" ]; then
  mv ${SB_INSTALL_PREFIX}/lib ${SB_INSTALL_PREFIX_LIB}
fi
]]>
    </install>

    <notes>
      <change from="1.2a40" to="1.2a41">
        <item><para>*printf() removed from libschily, so we need to
#define *printf() -&gt; js*printf()</para></item>
        <item><para>If an error occurs, the failing commend is printed
even in case that the command was run in silent mode.</para></item>
        <item><para>smake now allows to switch of several warnings by
adding a line:</para>
        <screen>
.NO_WARN: &lt;warn-type&gt; ...
        </screen>
        <para>to the makefile. Currently implemented controllable warn
types are:</para>
        <screen>
:=	Do not warn about non-portable MACRO := val assignements

$*	Do not warn about illegal use of $* in explicit target rules
        </screen></item>
        <item><para>smake now not only implements the workaround for
the bash signal bug on Linux but on all platforms that use bash as
/bin/sh"</para></item>
        <item><para>New autoconf test whether /bin/sh is
bash</para></item>
        <item><para>No longer use -Wtraditional for GCC</para></item>
        <item><para>New targets "html" and "htmlx" for Manual page
makefiles allows to convert man pages using "man2html"</para></item>
        <item><para>Dynamic libraries are now supported for Mac OS
X</para></item>
        <item><para>Workaround for a Mac OS X linker bug</para></item>
        <item><para>smake CCOM=xx will now result in writing
DEFCCOM=xx into incs/Dcc.&lt;platform&gt; if this is done on the
initial make run.</para></item>
        <item><para>Remove Wl,-ztext from gcc's commend line when
linking shared libraries as GCC does not create 100% correct objects
and this would result in being unable to ling
dynamically.</para></item>
        <item><para>Automagically remove /usr/src/linux/include from
include if the Linux kernel include files are rotten. This is
unfortunately a "result" of the Linux-2.6 series.</para></item>
        <item><para>call "rm -f" to shared library symlink names
before trying to create a new symlink</para></item>
        <item><para>smake COPTX=-DNO_LARGEFILES now allows to compile
in non-largefile mode</para></item>
        <item><para>schily/stat.h now includes support for S_ISPORT()
(event port)</para></item>
        <item><para>Corrected a typo ("#defin") in
schily/errno.h</para></item>
        <item><para>getargs() now allows '+' to appear inside
longopt=</para></item>
        <item><para>-I. removed from makefile system</para></item>
        <item><para>The makefile system now allows a mix of static and
dynamic linking</para></item>
        <item><para>archconf.c enhanced for Mac OS X &amp; *BSD (using
sysctl() now)</para></item>
        <item><para>archconf.c now tries to do more
heuristics</para></item>
        <item><para>Fixed a strlen bug (introduced while removing
strlen limits with smake-1.2a38) that caused smake to complain about
</para>
        <screen>
$(namepre-$(namelast)): "smake: String too long, could not copy macro content for 'namepre-xxx'."
        </screen></item>
      </change>

      <change from="1.2a39" to="1.2a40">
        <item><para>Added forgotten file
psmake/include/schily/utime.h. This was needed due to a restructured
make.c</para></item>
        <item><para>A small restructuring of the include file
structure</para></item>
        <item><para>The makefilesystem now includes support for
Sparc64 (Fujutsu Siemens)</para></item>
        <item><para>Fixed a typo in libschily/fconv.c that caused
problems with isnan() on AIX5.</para></item>
      </change>

      <change from="1.2a38" to="1.2a39">
        <item><para>License change from GPL to CDDL</para></item>
        <item><para>Updated to a newer version of the Schily
autoconf.</para></item>
        <item><para>The Schily Makefilesystem now defines
-DSCHILY_BUILD</para></item>
        <item><para>The Schily Makefilesystem now includes environment
definitions for the Microsoft Studio 8 compiler. If you like to edit
these definitions, check the DEFAULTS directory</para></item>
        <item><para>Next step in supporting Microsoft C-compilers:
build in environment set up for the MS compilers. To compile with the
MS C-Compiler, set up a Cygwin environment and compile a Cygwin
'smake'. Then use this smake to comile with the MS C-compiler by
calling:</para>
        <screen>
smake CCOM=cl
        </screen>
        <para>This defaults to VC7. If you like to use VC6,
call:</para>
        <screen>
smake CCOM=cl VC=6
        </screen>
        <para>Note that smake itself (if compiled with "cl") will not
work, as MS does not implement a reliable way to pass a quoted arg
vector to a new program.</para></item>
        <item><para>#undef SIZE_T_MAX for FreeBSD</para></item>
        <item><para>New and better static VMS config</para></item>
        <item><para>All schily include files now have been moved to
include/schily/*. Trying to make the floating point printf() support
functions work on systems that implement C99 only with no
fallback.</para>
        <para>As this change is a result from a report from a person
that does not like to cooperate, I was not able to test on the
reported AIX-5.x platform. Also note that this change may result in
problems on other platforms.</para></item>
        <item><para>New Special Target ".SPACE_IN_NAMES:" allows to
have escaped spaces in object or dependency names.</para></item>
        <item><para>The string length limitation for words read from
Makefiles has been removed.</para></item>
        <item><para>Macro expansion is no longer using static length
limitations.</para></item>
        <item><para>Fixed some lint errors</para></item>
        <item><para>smake -t (touch) now uses utime(2) where
available.</para></item>
      </change>

      <change from="1.2a37" to="1.2a38">
        <item><para>Added the missing strlcpy.c and strncpy.c entries
in the directory psmake/</para></item>
        <item><para>Updated to a newer version of the Schily
autoconf.</para></item>
      </change>

      <change from="1.2a36" to="1.2a37">
        <item><para>Fixed some serious problems with the "growable
buffer" that is used for string processing.</para></item>
        <item><para>Made all string copy operatios safe against buffer
overflows</para></item>
        <item><para>New Makefilesystem supports C++</para></item>
      </change>

      <change from="1.2a35" to="1.2a36">
        <item><para>Various modifications to allow compiling with
MSVC</para>
        <unorderedlist>
          <item><para>Support for compiling with MSVC ("cl") from a
Cygwin shell added: i386-cygwin32_nt-cl.rul</para></item>
          <item><para>Schily Autoconf basics fixed so it is able to
deal with the specifics with the "cl" (MSVC) compiler.</para></item>
          <item><para>Several Schily Autoconf tests have been extended
to support the include file structure from MSVC that is far from
c89/c99/POSIX.</para></item>
          <item><para>A test for __int64 was added to support 64 bit
ints with "cl" (MSVC) that lacks "long long".</para></item>
          <item><para>align_test.c now uses the abstract type Llong
instead of "long long" ort "__int64".</para></item>
          <item><para>psmake/MAKE-sh has been enhanced to support
"cl".</para></item>
          <item><para>Makefilesystem restructured to have platform
config files that include a compiler config file.</para></item>
        </unorderedlist></item>
        <item><para>Support for "Interix" was added in order to
support "Services for UNIX" from Microsoft (compiling on the POSIX
subsystem of MS-WIN).</para></item>
        <item><para>Allow $O to be usd in pattern matching
expansions.</para></item>
        <item><para>Under some circumstances, the Macro expansion code
did eat up whitespace. This has been corrected.</para></item>
      </change>

      <change from="1.2a34" to="1.2a35">
        <item><para>Search for additional matching pattern rules in
case the first rule match did not result in a matching file
name.</para></item>
        <item><para>Many new features from a newer makefile
system:</para>
        <unorderedlist>
          <item><para>armv5teb-linux new</para></item>
          <item><para>i386-darwin new (Macos X)</para></item>
          <item><para>i386-dragonfly</para></item>
          <item><para>mips64-linux</para></item>
          <item><para>sun4v-sunos5</para></item>
          <item><para>Better BeOS/Zeta support</para></item>
          <item><para>UID/GID used for installation changed to match
Cygwin and Mac OS X</para></item>
        </unorderedlist></item>
        <item><para>psmake/Makefile updated to include seterrno.c
although this makefile usually is not needed.</para></item>
      </change>

      <change from="1.2a33" to="1.2a34">
        <item><para>Fixed a bug introduced with smake-1.2a33 that
caused smake to core dump in some cases with "exported" to environment
make macros.</para></item>
        <item><para>Let fileopen() flose the fd in case that it could
not get a FILE * struct for fd.</para></item>
        <item><para>Added support to compile 64 bit versions by
calling</para>
        <screen>
smake CCOM=cc64
        </screen></item>
      </change>

      <change from="1.2a32" to="1.2a33">
        <item><para>Make sure that $(VAR:%=PREFIX/%) does expand to
nothing in case that $(VAR) is empty.</para></item>
        <item><para>export VAR now expands the content of the make
macro "VAR" before putting the content into the
environment.</para></item>
        <item><para>print a better warning message when smake finds
too many target items (targets left to a ':') for a
rule.</para></item>
        <item><para>Now using recent a makefiles-1.5
alpha</para></item>
        <item><para>Avoid an endless loop with 'tr' on Solaris if
/usr/ucb/ is before /usr/bin in PATH</para></item>
      </change>

      <change from="1.2a31" to="1.2a32">
        <item><para>Smake nowmay be used to compile
Xorg.</para></item>
        <item><para>New option -N. Continue if no source for
nonexistent dependencies found.</para></item>
        <item><para>Evaluate the SHELL macro acording to POSIX. SHELL
has been previously ignored completely.</para></item>
        <item><para>Do not allow names with a SLASH inside at the
right side of a Simple Suffix Default Rule. This helps smake to ignore
the junk at the end of some POSIX Suffix rules found in the makefiles
of Xorg.</para></item>
        <item><para>Let smake warn about junk at the end of POSIX
suffix rules. This helps to flag broken makefiles like those found in
the Xorg tree.</para></item>
        <item><para>The dynmac expander now correctly handles the case
when the growable buffer has to be relocated when it
grows.</para></item>
        <item><para>The dynmac expander now does no longer adds
unneded spaces in lists. This allows smake to be used to compile
Xorg.</para></item>
        <item><para>Smake now gives better warnings with illegal
dynmac usage. This helps to locate illegal dynmac usage in highly
complex projects like Xorg.</para></item>
      </change>

      <change from="1.2a30" to="1.2a31">
        <item><para>Add snprintf.c to allow compilation on
HP-UX-10.x</para></item>
        <item><para>-k / -S Option implemented according to
POSIX</para></item>
        <item><para>.s.o: Assembly rules added to default rules and to
.SUFFIXES</para></item>
        <item><para>...move and ...touch messages now go to stdout as
the command verbose messages</para></item>
        <item><para>messages from exit handler now only if</para>
        <screen>
excode != 0 &amp;&amp; Mlevel &gt; 0
Debug &gt; 0   &amp;&amp; Mlevel &gt; 0
        </screen></item>
        <item><para>Check for NAMEMAX in getln()
deactivated</para></item>
        <item><para>Do not check for default rules in case of final ::
rules</para></item>
        <item><para>install-sh updated to know that BSDi chown is in
/usr/sbin</para></item>
      </change>

      <change from="1.2a29" to="1.2a30">
        <item><para>The top level Makefile in SRCROOT now calls
psmake/smake -r to make sure that no broken internal rules (that could
be loaded from a file) may be active.</para></item>
        <item><para>Support for the ':=' assignement oparator that may
be used with make macros:</para>
        <screen>
CFLAGS := $(OTHER_VAR)
        </screen>
        <para>Will not assign the text "$(OTHER_VAR)" to CFLAGS but
the content if the macro $(OTHER_VAR)</para>
        <para>As this feature is nonportable, smake warns when the
feature is used. (Note that Sun make uses := for conditional macro
assignement).</para></item>
        <item><para>Smake now detects endless recursions from bad
default rules.</para></item>
        <item><para>Smake now supports Termination pattern matching
rules</para>
        <screen>
target:: source
	command
        </screen>
        <para>If a Termination rule is found, smake does not search
for possible sources for intermediate source file names. This allows
to e.g. create a pattern rule for fetching SCCS files from the
repository:</para>
        <screen>
%:: s.%
	sccs get $@
        </screen>
        <para>Note that this rule would otherwise result in a endless
recusion.</para></item>
        <item><para>Smake now prints Command line Exit messages for
failed commaned even if not in debug mode.</para></item>
        <item><para>Better messages when exiting with exit code !=
0</para></item>
        <item><para>Makefile fixed to search for the make default
rules in $(INS_DIR)/lib/defaults.smk instead of
$(INS_DIR)/lib/default.smk</para></item>
        <item><para>New configure #ifdef DEFAULTS_PATH_SEARCH_FIRST
tells smake to search for lib/default.smk in PATH first.</para></item>
        <item><para>Smake now also searches for lib/default.smk in
case av[0] contains a path name with slashes.</para></item>
      </change>

      <change from="1.2a28" to="1.2a29">
        <item><para>Print the current directory in case it a exitcode
!= 0</para></item>
        <item><para>Support for :: rules added. This is not POSIX but
historic use in makefiles.</para></item>
        <item><para>Intermediate target nodes are now fully
initialized.</para></item>
        <item><para>Smake now appends to dependency lists even when
the new definition is found in a new makefile (-f option). Before,
smake did overwrite such definitions.</para></item>
        <item><para>Smake now changes the type from environment macro
definitions into target definitions if the same name is later found in
a Makefile. This is eg. needed if the environment contains host=foo
and the Makefile contains host: host.c</para></item>
        <item><para>If a second explicit rule for a target is found
and it contains command definitions, smake now no longer overwrites
the list of command line definitions with the new list but keeps the
first definition.</para></item>
        <item><para>If a second explicit rule for a target is found
and it contains no command definitions, smake now no longer kills the
old definitions.</para></item>
        <item><para>Smake now warns if the dynamic macros '$*' &amp;
'$&lt;' are used on commands for explicit Target Rules. Note that Sun
Make as well as GNU make are broken in this area (*) and smake's
behaviior is the best a make program may do:</para>
        <unorderedlist>
          <item><para>Sun Make calls (even though this is an
_explicit_ rule) the implicit rule check and looks for possible
implicit sources. If a possible implicit source file exists, '$&lt;'
is set to that name even though it is completely unrelated to the
explicit rule. If a fitting entry from .SUFFIXES: exists, '$@' is
stripped to create '$*'.</para></item>
          <item><para>GNU make returns the first name from the
dependency list for '$&lt;' and strips '$@' using a fitting entry from
.SUFFIXES: to create '$*'.</para></item>
        </unorderedlist></item>
        <item><para>smake no longer tries to "make" the content from
o_list of a NAME=val type object.</para></item>
        <item><para>smake no longer has a command line macro limit of
64, the command line macros are now inside allocated
memory</para></item>
        <item><para>smake no longer has a -f makefile option limit of
32, the makefile names are now inside allocated memory</para></item>
      </change>

      <change from="1.2a27" to="1.2a28">
        <item><para>make sure a rule like:</para>
        <screen>
../somedir/target: ../somedir/source
        </screen>
        <para>will not be falsely detected as Simple Suffix
rule</para></item>
        <item><para>Expand the right side if a VPATH= statement to
allow VPATH=$(srcdir) to work.</para></item>
        <item><para>.SUFFIXES Target will no longer be overwritten but
appended if asigned in a new Makefile. This allows a .SIFFIXES: .suf
line in Makefile to append to the likst of the internal
makefile.</para></item>
        <item><para>CFLAGS += now works again (parser
fixed).</para></item>
        <item><para>The dynamic macro $O (.OBJDIR or "." if .OBJDIR
has not been defined) may now be overwritten. This makes smake more
POSIX compliant as POSIX does not include a dynamic macro
$O.</para></item>
      </change>

      <change from="1.2a26" to="1.2a27">
        <item><para>smake now has been tested with various makefiles
from various software and is expected to be able to be used to compile
any piece of software that does not rely on bugs found in specific
make implementeations. The following problems are currently
known:</para>
        <unorderedlist>
          <item><para>GNU make comes with two files called 'SMakefile'
and thus feeds two files with the preferred Makefile name into smake.
Unfortunately, these two file in GNU make do not contain valid make
syntax.</para>
          <para>Solution: Before you like to compile GNU make using
smake, you need to remove "SMakefile" and
"glob/SMakefile".</para></item>
          <item><para>Samba comes with a Makefile that illegally
useses the '$&lt;' dynamic macro in commands for explicit rules. The
'$&lt;' dynamic macro is only expanded in case that an implicit
(inference) rule is processed. As samba uses '$&lt;' inside an
explicit rule where this dynamic macro has no meaning (see POSIX make
standard) it is expanded to nothing but space by smake.</para>
          <para>Solution: change '$&lt;' to a manual copy of the
source file for explicit rules.</para></item>
          <item><para>Samba comes with a Makefile that illegally
useses the '$*' dynamic macro in commands for explicit rules. The '$*'
dynamic macro is only expanded in case that an implicit (inference)
rule is processed. As samba uses '$*' inside an explicit rule where
this dynamic macro has no useful meaning (see POSIX make standard) and
smake cannot know the 'right' suffix, '$*' is expanded to the part of
'$@' being left to the rightmost '.' character in '$@' by
smake.</para>
          <para>Solution: change something like '$*.po.o' to '$@' for
explicit rules.</para></item>
          <item><para>If you find other problems, plese report and let
us find the reason..... It is most likely that the related Makefile is
buggy.</para></item>
        </unorderedlist></item>
        <item><para>smake -d now prints make level (in case of
recursive make calls) and the working directory for
smake.</para></item>
        <item><para>smake -d now prints .OBJDIR .OBJSEARCH .SEARCHLIST
(needed -dd before)</para></item>
        <item><para>The parser has been fixed so that white space at
the end of a list will no longer be expanded into a Null ('') object
name:</para>
        <screen>
DUMMY=
LIST= 1 2 3 4 $(DUMMY)

target: $(LIST)
        </screen>
        <para>Did create such a problem.</para></item>
        <item><para>Better source comments for FORCE: target type
special treatment.</para></item>
        <item><para>FORCE: Target type special treatment is now done
even when the target in question is the current default
target.</para></item>
        <item><para>Print the .PHONY: state of a target in various
debug output</para></item>
        <item><para>smake -t does no longer touch targets marked as
.PHONY:</para></item>
        <item><para>Debug print of default target is now also included
if the default target is explicitly named via argv[] from
main().</para></item>
        <item><para>Smake no longer strips off the directory name for
targets when expanding the '$*' Dynamic macro.</para>
        <unorderedlist>
          <item><para>Smake did previously expand '$*' for dir/name.o
-&gt; name</para></item>
          <item><para>Smake now           expands '$*' for dir/name.o
-&gt; dir/name</para></item>
        </unorderedlist></item>
      </change>

      <change from="1.2a25" to="1.2a26">
        <item><para>smake now should be useful as a general make
utility as it now includes all needed default rules required by
POSIX</para></item>
        <item><para>Starting to implement Termination pattern rules
using :: as Terminator (not yet ready).</para></item>
        <item><para>Syntax errors now are less verbose again, but
smake -d will turn on printing the read buffer of the parser to help
to debug the problem.</para></item>
        <item><para>Simple Suffix Rules are no longer allowed to start
with "./" as this is a valid target name.</para></item>
        <item><para>Better EOF checking in the parser to avoid infinite
loops. </para></item>
        <item><para>A parser bug has been fixed that did cause smake
not to stop parsing macro definitions in dependency lists if not
surrounded by () or {}. </para></item>
        <item><para>default_cmd() now returns NOTIME in case no
default rule could be found and the target has no prerequisites. This
avoids superfluous "all is up to date" messages in case that no suffix
rules have been defined. </para></item>
        <item><para>Switch from our own "Simple Pattern Rules" for
implicit rules to POSIX Single and Double suffix Rules. </para></item>
        <item><para>smake -p now includes comment headlines that allow
for better identification of the various sections in the output.
</para></item>
        <item><para>The directory rules for the Schily makefile system
have been modified to work around a bug in /bin/sh on BSDi
systems.</para></item>
      </change>

      <change from="1.2a24" to="1.2a25">
        <item><para>Checking for valid time in dyn macro expansion
(e.g. $?) because the time stamp of a not yet existent target may have
been intermediately set to RESOURCETIME. This would have caused $? to
be incorrectly expanded. </para></item>
        <item><para>Try to add a workaround for broken Makefiles
like:</para>
        <screen>
all: $(SUBDIRS)

$(SUBDIRS): FORCE
	cd $@ &amp; $(MAKE) $(MAKEDEFS)

FORCE:
        </screen>
        <para>The target FORCE is not only completely unneeded; it
would cause the Sub directories not to be made except when smake
introduces a special implict behavior that treats FORCE: as a target
that could be correctly made altohough there is no implicit dependency
FORCE.c as there is neither an explicit dependency not an explicit
command list.</para></item>
        <item><para>Support for Linux on amd64 has been
added</para></item>
      </change>

      <change from="1.2a23" to="1.2a24">
        <item><para>.POSIX target documented in the man
page</para></item>
        <item><para>Command execution now finally has been
fixed:</para>
        <unorderedlist>
          <item><para>/bin/sh -ce cmd is called by default to abort on
error</para></item>
          <item><para>/bin/sh -c cmd is called is for 'smake
-i'</para></item>
        </unorderedlist></item>
      </change>

      <change from="1.2a22" to="1.2a23">
        <item><para>Add a workaround for a SCO OpenServer C-compiler
bug. The bug causes the first function in a function to be called
before the new stack frame has been established and did cause scanning
the stack frame to fail. </para></item>
        <item><para>made snprintf() POSIX compliant </para></item>
        <item><para>Try to find sh.exe from PATH on
DJGPP</para></item>
        <item><para>We now call commands again via sh -ce 'cmd'
instead of sh -c 'cmd' (which is what POSIX requires). It turned out
that POSIX is wrong and causes complex commands (e.g. commands that
use ';') that fail not to cause smake to stop on this error.</para>
        <para>Note that smake originally has been correct and did use
sh -ce. Missleaded by the fact that GNU make (at this point) follows
the POSIX standard, smake has been changed to use sh -c. We now
correct our mistake.</para></item>
      </change>

      <change from="1.2a21" to="1.2a22">
        <item><para>'make install' now works on operating systems that
require a '.exe' suffix for executable binaries</para></item>
        <item><para>Fixed a bug in the parser that caused macro
expansions not to work in target lists, e.g.:</para>
        <screen>
$(TEST:a=b): foo
        </screen>
        <para>because the parser did stop reading the name at:
"$(TEST" believing that the colon is always a target list
terminator.</para></item>
        <item><para>Now, ${} &amp; $() macro expansions are handle
correctly even when nested</para></item>
      </change>

      <change from="1.2a20" to="1.2a21">
        <item><para>Support for the special .PHONY:
target.</para>
        <para>This helps to deal with files like INSTALL operating
systems like Win32 and Mac OS that don't honor file name case and
prevents the file named INSTALL to get into trouble with 'make
install'</para></item>
        <item><para>install-sh extended to avoid unremovable files
/tmp/xx.$$ on SCO UNIX that are a result of the root test. They are
unremovable because SCO UNIX allows to give away files to root ans
sets the sticky bit on /tmp.</para></item>
      </change>

      <change from="1.2a19" to="1.2a20">
        <item><para>strcatl()/execl() now cast NULL in last Arg to
(char *)NULL This avoids problems on platforms where sizeof(int) is !=
sizeof (ptr)</para></item>
        <item><para>Completely converted to use the rename() emulation
from libschily in case a OS does not support rename()</para></item>
        <item><para>Trying to support a compilation on DOS (32 Bit)
with DJGPP As GNU make does not work correctly on DOS, this allows
Schily SING programs to be compiled on DOS/DJGPP</para></item>
        <item><para>use #ifdef SIGBUS in avoffset.c as DOS/DJGPP does
not have SIGBUS</para></item>
        <item><para>Indented to be closer to official Cstyle
indentation</para></item>
      </change>

      <change from="1.2a18" to="1.2a19">
        <item><para>Renamed psmake/MAKE to psmake/MAKE-all to avoid
endless recursion on OS with non-POSIX filesystem semantics
(case-sensitivity) e.g. OS/2 and MacOS X with non-UNIX
FS</para></item>
        <item><para>Renamed psmake/MAKE.sh to psmake/MAKE-sh to avoid
problems with buggu shells like PDKSH which illegaly call 'MAKE.sh' if
you type 'MAKE'</para></item>
        <item><para>Changed a Makefile line from 'cd psmake; sh
MAKE-all' to 'cd psmake &amp;&amp; sh MAKE-all' to work arouns a bug
in either the shell or GNU make on OS/2</para></item>
        <item><para>New platforms: 9000-831-hp-ux sparc64-freebsd
macppc-netbsd sparc-bsd-os sparc-bsd-os3 i786-cygwin32_nt
i486-unixware i586-unixware pentium-iii-unixware
pentium-pro-unixware</para></item>
        <item><para>New install rules for hardlinks</para></item>
        <item><para>Use +DAportable for HP-UX cc</para></item>
        <item><para>BSD-OS-3.x does not need 'shlicc'
anymore</para></item>
        <item><para>Add $(RANLIB) -&gt; true for OS/2</para></item>
        <item><para>Added some prototypes for non ANSI-C OS in
include/unixstd.h</para></item>
        <item><para>fixed typo in include/fctldefa.h for
O_ACCMODE</para></item>
        <item><para>include/strdefs.h for better AIX
compatibility</para></item>
        <item><para>correctly evaluating HAVE_UNION_WAIT in
include/waitdefs.h for vanilla BSD-4.2 systems like
Next-Step</para></item>
        <item><para>nanosecond access macros for
include/statdefs.h</para></item>
        <item><para>several new autoconf tests</para></item>
        <item><para>dependency generation script conf/mkdep-sco.sh for
SCO unix fixed</para></item>
        <item><para>Using spawnl(P_NOWAIT, ...) on OS/2 EMX instead of
fork()/exec()</para></item>
        <item><para>include ctypes.h -&gt; past schily.h for OpenBSD
#define EOF BUG</para></item>
        <item><para>fcons.c changed because FI_APPEND problem in SCO
UnixWare and fileopen("/dev/null", "wca")</para></item>
        <item><para>Changed -pg (progiling compile option) to -p on
SCO UnixWare because there is no -pg on this platform.</para></item>
        <item><para>Changes related to the now portable software
signal system handlecond()/raisecond()</para></item>
        <item><para>Trying to better follow the 'cstyle' indentation
conventions</para></item>
        <item><para>Changes conf/cc-config.sh to better find out that
a user is incorrectly calling 'make' on Solaris with /usr/ucb in PATH
and with no real C-compiler</para></item>
      </change>
    </notes>

    <changelog>
      <change date="2010 November 6" revision="2"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Add support for RHEL 6</para></item>
      </change>
    </changelog>
  </program>
</programs>
