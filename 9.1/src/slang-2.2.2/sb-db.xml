<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="slang" version="2.2.2" revision="3">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}22</install-name>

    <sources>
      <source checksum="974437602a781cfe92ab61433dd16d03"
        checksum-type="md5" size="1366850"
        path="src/slang-2.2.2.tar.bz2"/>
      <patch checksum="fa682d2b4edf0217df2b64704fc3cda0"
        checksum-type="md5" size="32823"
        path="src/slang-2.2.2.tww.patch"/>
      <patch checksum="95c9852f397b9118b1b28476f6b873f4"
        checksum-type="md5" size="1164143"
        path="src/slang-2.2.2.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="libiconv" var="LIBICONV"
        install-name="libiconv113">v&gt;=1.13.1</depend>
      <depend program="libpng" var="LIBPNG"
        install-name="libpng14">v&gt;=1.4.4</depend>
      <depend program="pcre" var="LIBPCRE"
        install-name="libpcre811">v&gt;=8.11</depend>
      <depend program="zlib" var="LIBZ"
        install-name="libz12">v&gt;=1.2.5</depend>
    </dependencies>

    <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"
_datadir="${SB_INSTALL_PREFIX}/share"
_sysconfdir="${SB_INSTALL_PREFIX}/etc"
]]>
    </script-header>

    <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  CC_LD_RT="-Wl,-blibpath:"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib" ;;
ia64*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+b,"
  LDFLAGS="-Wl,+nodefaultrpath" ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-hpux11*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*)
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0"
  CC_LD_RT="-Wl,-rpath,"

  # Avoid c99 features
  export ac_cv_header_fenv_h=no
  export ac_cv_lib_m_feclearexcept=no
  export ac_cv_header_stdint_h=no ;; 
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"
  CC_LD_RT="-Wl,-rpath," ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-osf*)
  CC=cc CFLAGS="-O2 -arch ev5 -msym -readonly_strings"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4"
  CC_LD_RT="-R" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CC_LD_RT="-R" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis"
  CC_LD_RT="-R" ;;
esac

${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CPPFLAGS="${SB_VAR_LIBZ+-I${SB_VAR_LIBZ_INC}} \
${CPPFLAGS+${CPPFLAGS}}" \
LDFLAGS="${SB_VAR_LIBZ+-L${SB_VAR_LIBZ_LIB}} \
${CC_LD_RT}${SB_VAR_LIBPCRE+${SB_VAR_LIBPCRE_LIB}} \
${SB_VAR_LIBICONV+${CC_LD_RT}${SB_VAR_LIBICONV_LIB}} \
${SB_VAR_LIBPNG+${CC_LD_RT}${SB_VAR_LIBPNG_LIB}} \
${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} ${LDFLAGS+${LDFLAGS}}" \
--with-pcreinc=${SB_VAR_LIBPCRE_INC} \
--with-pcrelib=${SB_VAR_LIBPCRE_LIB} \
--with-png${SB_VAR_LIBPNG+=${SB_VAR_LIBPNG}} \
--with-iconv${SB_VAR_LIBICONV+=${SB_VAR_LIBICONV}} \
--with-z${SB_VAR_LIBZ+=${SB_VAR_LIBZ}} \
--docdir=${_docdir} --mandir="${SB_INSTALL_PREFIX}/man" \
--datadir=${_datadir} --datarootdir=${_datadir} \
--libdir=${SB_INSTALL_PREFIX_LIB} --sysconfdir=${_sysconfdir} \
--prefix=${SB_INSTALL_PREFIX}

${SB_PATH_SED} -i -e "\
s!-L\(\${libdir}\)!-L\1 ${CC_LD_RT}\1!;" slang.pc
]]>
    </configure>

    <notes>
      <change from="2.1.3" to="2.1.4">
        <item><para>src/slang.c: The identifier syntax was not being
checked for symbols added to the global namespace.</para></item>
        <item><para>slsh/slsh.c: If ENV_SLSH_PATH is undefined, set it
to SLSH_PATH</para></item>
        <item><para>*/mkfiles/*: Modified the various makefile.all
files to facilitate mingw32 builds. Read INSTALL.pc for
quick-start.</para></item>
        <item><para>mkfiles/install.sl: Added a function to install
the slang docs</para></item>
        <item><para>src/slvideo.c: #define UNICODE so that
wide-character functions are used instead of byte functions. Also
codepage set to 65001 in unicode mode.</para></item>
        <item><para>src/slvideo.c: Added
SLtt_is_utf8_mode.</para></item>
        <item><para>src/sltermin.c: Added support for new ncurses
hex-encoded terminfo directories.</para></item>
        <item><para>slsh/lib/tm/cmdopt.tm: Missing commas in the
documentation for cmdopt_add.</para></item>
        <item><para>src/slarrmisc.inc: Changed inner-product code to
use block arrays to be more cache friendly. Since the block size is
cpu-dependent, __get/set_innerprod_block_size functions have been
added. The default value is controlled by a variable in
src/sllimits.h.</para></item>
        <item><para>modules/termios-module.c: Added additional termios
constants</para></item>
        <item><para>src/slarray.c: Better optimization when indexing
arrays with ranges.</para></item>
        <item><para>src/slsignal.c: If SLsystem fails, set the
interpreter's errno value accordingly.</para></item>
        <item><para>modules/rand-module.c: A uniform random number
generator module, which also provides generators for some well-known
distributions.</para></item>
        <item><para>src/*.c: Changed field name for
SLang_Object_Type.data_type to o_data_type.</para></item>
        <item><para>src/slang.c: Optimization tweaks to improved
performance for small arrays and indexing via scalar
indices.</para></item>
        <item><para>doc/tm/rtl/stack.tm: Typos in the example for
__pop_list corrected</para></item>
        <item><para>src/slang.c: Improved optimizations for scalar
arithmetic operations.</para></item>
        <item><para>src/slarray.c: slices such as A[*,[0:-1],*] of
multi-dimensional arrays were producing single dimension
ones.</para></item>
        <item><para>src/sltoken.c: Changed the semantics of the
SLang_set_verbose_loading function. Previously this function accepted
a zero or non-zero value to disable or enable loading messages for .sl
files. Now this integer value is a bitmapped one: If bit 0 is set,
loading messages will be generated for .sl files. If bit 1 is set,
messages will be generated for dynamically loaded
modules.</para></item>
        <item><para>slsh/slsh.c: Calling slsh with -v will generate
loading messages for both modules and slang files. I also created a
new slsh-specific intrinsic called set_verbose_loading and bumped the
slsh version number.</para></item>
        <item><para>modules/cmaps: Added "ds9b" and "ds9sls" colormaps
--- these correspond to analogous colormaps in saotng
ds9.</para></item>
        <item><para>utf8/tools/mktables: Characters with general
category "Mc" or in the bi-directional category are nolonger flagged
as combining characters.</para></item>
        <item><para>utf8/tools/: Updated unicode database from 3.2 to
5.0 and recreated the internal character set tables.</para></item>
        <item><para>src/slsmg.c: If an ambiguous-width unicode line
drawing character is double width, then use a single-width
alternative.</para></item>
        <item><para>src/slsignal.c: Call SLang_handle_interrupt when
system calls are interrupted.</para></item>
        <item><para>src/slarray.c: Speed improvements when
transferring elements from one array to another via range indices,
e.g., a = b[[1:9]];</para></item>
        <item><para>src/slarrfun.c: transpose of multi-dim non-scalar
arrays was using unitialized memory.</para></item>
        <item><para>src/slarray.c: Improved speed of binary arithmetic
of range arrays.</para></item>
        <item><para>src/slstd.c: atoi, atof, atol, atoll, and integer
now accept an array arguments.</para></item>
        <item><para>demo/pager.c: args swapped in call to
memset</para></item>
        <item><para>src/slstring.c: Move last used string in the hash
table to the top if it is more than a few deep.</para></item>
        <item><para>slsh/doc/tm/slsh.1: Added a small section to the
slsh man page about customizing the readline environment.</para></item>
        <item><para>slsh/etc/slsh.rc: changed dir_exists from static
to private</para></item>
        <item><para>src/slposio.c: The low level read/write functions
should not be restarted when errno is EAGAIN.</para></item>
        <item><para>src/sltoken.c: When run in verbose mode,
SLns_load_file will display the name of the namespace the file is
being loaded into when the namespace is not the Global
one.</para></item>
        <item><para>slsh/lib/require.sl: If the "feature" is a
filename, then automatically "provide" that feature.</para></item>
        <item><para>slsh/lib/tm/require.tm: Fixed the typos for the
require function.</para></item>
        <item><para>src/slstrops.c: Until `|' is supported in REs,
glob_to_regexp cannot be made to produce a single RE that does not
match leading dots. Hence, the glob expression "*X" will match
".X".</para></item>
        <item><para>slsh/lib/glob.sl: Changed to compensate for
modification to glob_to_regexp. That is, glob("*X") will not match the
file ".X", which preserves the bahavior of the glob
function.</para></item>
        <item><para>src/slcommon.c: On win32 systems, if the codepage
is 65001, then use UTF-8 mode.</para></item>
        <item><para>src/slarray.c: Trivial change to avoid a warning
in gcc about the possible use of an uninitialized
variable.</para></item>
        <item><para>slsh/slsh.c: Added -q, --quiet command line option
to inhibit the printing of the startup messages.</para></item>
        <item><para>slsh/lib/print.sl: Added pager[=val] and nopager
qualifiers to the print function. Also if printing a single structure,
each field will appear on a separate line.</para></item>
        <item><para>src/slstrops.c, src/slbstr.c: Added
count_char/byte_occurances function to count the number of occurances
of a specific character or byte in a string.</para></item>
        <item><para>src/slparse.c: &amp;if was causing a
SEGV.</para></item>
        <item><para>src/slstd.c: Added get_float_format
intrinsic.</para></item>
        <item><para>doc/tm/Makefile: Added rules to make
cref.pdf</para></item>
        <item><para>slsh/lib/print.sl: Updated the usage message for
the print function.</para></item>
        <item><para>src/slang.h: Added __attribute_(format(printf)) to
SLsnprintf prototype.</para></item>
        <item><para>src/*.c: Function prototypes were changed from,
e.g., char *SLang_create_slstring (char *); to char
*SLang_create_slstring (SLFUTURE_CONST char *); where SLFUTURE_CONST
is defined to have no value. As a result, these changes has no effect
at present but will in a future version (slang-3) where SLFUTURE_CONST
will be defined to be `const'. The use of `const' now would constitute
a major API change, which is not permitted until a new major version
is released. 51. src/slmisc.c: SLFUTURE_CONST added to
SLextract_list_element prototype.</para></item>
        <item><para>src/slang.h: Added SLFUTURE_CONST to arg_type
field of SLcmd_Cmd_Type object.</para></item>
        <item><para>src/slarith.c: The return value of fmod was being
truncated to single precision.</para></item>
        <item><para>doc/tm/cslang.tm: COLORTERM was used instead of
COLORFGBG.</para></item>
        <item><para>configure,*/Makefile.in: Haiku systems do not
require -lm. -lm was replaced */Makefile.in by @M_LIB@ which is not
set from the configure script.</para></item>
        <item><para>src/slutty.c,src/slidsply.c: More Haiku-specific
patches from Scott McCreary.</para></item>
        <item><para>mkfiles/makefile.m32: Made changes to work with
recent versions of mingw32 and added a silly hack to work-around
CMD.EXE interpretation of '=' as whitespace on the command
line.</para></item>
        <item><para>doc/tm/rtl/rline.tm: New file containing
documentation for intrinsic functions dealing with the slang readline
interface.</para></item>
        <item><para>slsh/lib/print.sl: If a string is passed as a file
descriptor to the print function, then regard the string as a
filename.</para></item>
        <item><para>src/Makefile.in: Added _slang.h and sllimits.h as
a global dependency.</para></item>
        <item><para>slsh/lib/tm/print.tm: Documented the slsh print
function.</para></item>
        <item><para>slsh/lib/print.sl: Rewrote and simplified the code
that prints to the various output "devices" by using a
device-object.</para></item>
        <item><para>autoconf/Makefile.in: Added src/Makefile.in as a
dependency.</para></item>
      </change>

      <change from="2.1.2" to="2.1.3">
        <item><para>autoconf/Makefile.in: If any */Makefile.in is more
recent than the corresponding Makefile, request that the configure
script be rerun.</para></item>
        <item><para>src/slcmplex.c: If the complex number z is 0, then
return 1 for z^0.</para></item>
        <item><para>src/slerr.c: SLang_set_error: If the error code is
SL_UserBreak_Error, then do not add a string representation to the
queue in case this function was called from a signal handler. This
avoids a call to malloc, which is generally a bad idea on systems
where malloc is not reentrant.</para></item>
        <item><para>slsh/lib/sldbcore.sl: The "c" alias was not
working. </para></item>
        <item><para>src/slsmg.c: Avoid a possible segv if
SLsmg_Scroll_Hash_Border is greater than the display
size..</para></item>
        <item><para>src/slang.c: Line number information was not
always getting propagated in slang code involving function
dereferences, e.g., (@funcptr)(args). The bug-fix checks to see that
funcptr is callable.</para></item>
        <item><para>src/slparse.c: Generate bos/eos byte-code for
empty code blocks, e.g., while (1){}.</para></item>
        <item><para>lib/sldbcore.sl: When exiting the debugger via the
"exit" command, the old SIGINT handler was not getting
installed.</para></item>
        <item><para>src/slang.c: Make sure check_signals gets called
when returning from inner_interp.</para></item>
        <item><para>src/slsig.c: If a slang script establishes a
signal handler for SIGINT, then set SLKeyBoard_Quit to 1 if SIGINT is
received.</para></item>
        <item><para>src/slstruct.c: New intrinsic:__add_typecast. This
may be used to define a typecast function for a user-defined
type.</para></item>
        <item><para>autoconf/aclocal.m4: Added support for
ncurses5-config to query the terminfo path.</para></item>
        <item><para>src/slang.h: If __APPLE__ is defined, then also
define __unix__.</para></item>
        <item><para>src/slmath.c: Avoid a NULL pointer dereference
when feqs(a,b) is called with mixed scalar and array
arguments.</para></item>
        <item><para>src/slsmg,c: Avoid writing a double-wide character
to the last column of the display.</para></item>
        <item><para>src/sltermin.c: Search the autoconf-derived
terminfo dirs before the hard-coded paths.</para></item>
        <item><para>doc/tm/rtl/math.tm: feqs documentation updated to
reflect a default relative difference of 0.01.</para></item>
        <item><para>doc/tm/rtl/eval.tm: In one example,
get_path_delimiter is incorrectly used.</para></item>
        <item><para>src/slstrops.c: Memory corruption was occuring
when using a number greater than 10^256 in a "%f" format
statement.</para></item>
        <item><para>src/slstrops.c: Small tweak in the way #19 was
implemented.</para></item>
        <item><para>modules/socket-module.c: If INADDR_NONE is
defined, use it to test the return value of inet_addr.</para></item>
        <item><para>src/slang.c: SLang_start_arg_list made a wrapper
around start_arg_list.</para></item>
      </change>

      <change from="2.1.1" to="2.1.2">
        <item><para>slsh/lib/readascii.sl: Typo in the usage message
corrected.</para></item>
        <item><para>autoconf/aclocal.m4: Fixed elf link problem on
freebsd</para></item>
        <item><para>doc/tm/slang.tm: Some documentation
updates</para></item>
        <item><para>slsh/lib/cmdopt.sl: The value passed to a callback
function was not be converted to the specified type, e.g., for
<command>cmdopt_add (opt, "foo", &amp;callback; type="int");</command>
callback was not being passed an integer.</para></item>
        <item><para>src/slang.c,slassoc.c: Optimization tweaks for
inc/decrementing associative arrays (e.g., foo["bar"]++).</para></item>
        <item><para>src/slerr.c: When SLang_set_error is called, then
add the string representation of the error message to the message
queue.</para></item>
        <item><para>doc/tm/strops.tm: Corrected the documentation for
the string_match function.</para></item>
        <item><para>src/sllimits.h: Increased the size of the hash
table that stores SLstrings for better efficiency.</para></item>
        <item><para>src/slstrops.c:_pSLang_push_nstring: Inlined the
call to _pSLang_push_slstring.</para></item>
        <item><para>slsh/lib/structfuns.sl: Ignore any NULL
arguments.</para></item>
        <item><para>slsh/src/readline.c: Turned on output processing
in the call to SLang_init_tty.</para></item>
        <item><para>src/slang.h: Several functions were marked as
"extern" and not as SL_EXTERN. This makes a difference for CYGWIN and
WIN32.</para></item>
        <item><para>src/Makefile.in, autoconf/*: Better support for
the creation of cygwin DLLs.</para></item>
        <item><para>src/slang.h: Under windows+cygwin, if SLANG_DLL is
not defined, the it will get defined as 1. This means that by default,
the application will get compiled against the slang DLL. To build
against a static version of the library. compile your code using
-DSLANG_DLL=0.</para></item>
        <item><para>Backed out the previous change (#14) to avoid
breaking third-party code that compiles against the
library.</para></item>
        <item><para>Makefile: `make` will only build the shared
version of the library. Use `make static` to create the static
version.</para></item>
        <item><para>src/slcmplex.c; Division by zero errors are no
longer trapped. This has been the default behavior for reals; this
change applies to complex numbers.</para></item>
        <item><para>*/*/*.tm: Documentation updates</para></item>
        <item><para>src/slrline.c: When completing a quoted string,
the final quote character will automatically get added (instead of a
space as before).</para></item>
        <item><para>src/slrline.c: SLang_peek_at_stack+SLang_pop_int
recoded as wrappers around inlined versions.</para></item>
        <item><para>src/Makefile.in: Avoid creating a symlink if the
target is the same as the link (affects cygwin).</para></item>
        <item><para>src/slsh.c: If exit is called without arguments,
interpret that as exit(0).</para></item>
        <item><para>src/slsh.c: Prior to entering interactive mode,
turn tracebacks off.</para></item>
        <item><para>src/Makfile.in: LDFLAGS was not getting
used.</para></item>
        <item><para>doc/tm/: Some typos corrected</para></item>
        <item><para>slsh/Makefile.in: slsh/doc/html/*.html gets
installed in $prefix/share/doc/slsh/.</para></item>
      </change>

      <change from="2.1.0" to="2.1.1">
        <item><para>slsh/lib/print.sl: Only the first element of
arrays such as Float_Type[1,1,1,10] were getting printed.</para></item>
        <item><para>src/slscanf.c: strings containing only whitespace
were not parsed properly by _pSLang_sscanf when %s was used in the
format.</para></item>
        <item><para>slsh/lib/readascii.sl: A flexible ascii data file
reader.</para></item>
        <item><para>src/slang.ver: Updated the linker version
script.</para></item>
        <item><para>src/slang.ver: The wildcard for the SLANG2 symbols
was picking up the SLANG2.1.0 symbols.</para></item>
        <item><para>slsh/lib/readascii.sl: Added type and cols
qualifiers. Updated docs.</para></item>
        <item><para>src/slang.c: If auto_declare is non-zero, and a
reference to an undefined variable is made, that variable will be
automatically created and given static scope.</para></item>
        <item><para>slsh/lib/autoload.sl: readascii
added.</para></item>
        <item><para>src/slrline.c: The redraw function was ignoring
the application installed update hook, disrupting the display when a
redraw was requested.</para></item>
        <item><para>autoconf/configure.ac: -liconv was not getting
added when creating the iconv module on systems with a standalone
iconv library.</para></item>
        <item><para>slsh/lib/readascii.sl: Added "as_list" qualifier
to return values in lists rather than arrays.</para></item>
        <item><para>src/slscanf.c: Added inf/nan support to
sscanf.</para></item>
        <item><para>src/slboseos.c: Before calling the hooks, push the
error context so that they will work in the presence of
errors.</para></item>
        <item><para>lib/slsh/tm/profile.tm: Documented the profile_*
functions.</para></item>
        <item><para>doc/tm/slang.tm: Added documentation about
qualifiers.</para></item>
        <item><para>src/slarray.c,modules/*.c: Use SLindex_Type
instead of int for indexing arrays. Currently SLindex_Type is typedefd
as an int.</para></item>
        <item><para>src/slang.c: Added SLang_pop_array_index to the
API. Applications should use this function instead of SLang_pop_int
for getting array indices. This new symbol is versioned at
2.1.1.</para></item>
        <item><para>src/slstruct.c: SLang_pop_cstruct will now force
SLang_Array_Type objects to linear ones.</para></item>
        <item><para>./NEWS: Updated</para></item>
        <item><para>slsh/lib/test_readascii.sl: Changed the "list"
qualifier to "as_list".</para></item>
      </change>

      <change from="2.0.7" to="2.1.0">
        <item><para>src/slrline.c: SLrline_bol/eol functions were
missing from the interface.</para></item>
        <item><para>src/slarray.c: An optional reference argument may
be passed to the where function to get the complement indices.  That
is: <command>i = where (foo, &amp;j);</command> is equivalent to
<command>i = where (foo); j = where (not foo);</command></para></item>
        <item><para>src/slexcept.c: SLerr_throw added to allow
applications to mimic the semantics of "throw".</para></item>
        <item><para>src/slparse.c,slang.c: New short-circuit operators
|| and &amp;&amp;. Use of the "orelse" and "andelse" constructs has been
deprecated.</para></item>
        <item><para>src/slsmg.c: SLsmg_write_wrapped_string and
SLsmg_write_nstring were broken for double-width characters. Updated
demo/smgtest.c to test these functions in the presence of such
characters.</para></item>
        <item><para>demo/smgtest.sl: Embedded some control characters
in the double-wide character string for testing the handling of
them.</para></item>
        <item><para>doc/tm/cslang.tm: Updated some of the
documentation for the SLsmg interface.</para></item>
        <item><para>src/slstd.c,slang.c: Added new function intrinisc
called "_$" that expands embedded "dollar-escaped"
variables.</para></item>
        <item><para>src/sllist.c: Added __push_list/__pop_list
functions that push list elements to the stack or create a list from
objects on the stack. These functions may also be used as an
alternative to __push_args/__pop_args.</para></item>
        <item><para>slsh/lib/structfuns.sl: Modified struct_combine to
use __pop_list instead of __push_list.</para></item>
        <item><para>src/test/scircuit.sl used for regression testing
of the short-circuit operators was missing.</para></item>
        <item><para>src/slang.c: Small memory leak involving method
calls plugged.</para></item>
        <item><para>src/slparse.c,slang.c,slstruct.c: Added support
for embedded assignments in structure definitions, e.g., <command>X =
struct { a = 4, b = 3, c = sin(PI/4)};</command></para></item>
        <item><para>src/slang.c,slparse.c,slstruct.c: Added support
for "function-qualifiers", e.g,.</para>
        <screen>
define plot_point (x, y)
{
  set_color (qualifier ("color", "black"));
             .
             .
}
plot_point (2, 1; color="red");
        </screen>
        <para>See docs for more info.</para></item>
        <item><para>modules/png.sl: Added gmin and gmax qualifiers to
the png_gray_to_rgb function.</para></item>
        <item><para>src/kwhash.c: New keywords: "ifnot" and "then".
The "ifnot" keyword plays the same role as "!if", except the use of
"!if" is deprecated. Then "then" keyword is used in looping constructs
as described in #17.</para></item>
        <item><para>src/slparse.c,src/slang.c: All looping constructs
may be followed  either an "else" block, or a "then" block, or a
combination of both:</para>
        <screen>
loop (N)
           {
              if (foo)
                 break; % execute the else block if present
           }
         then
           {
               % This block executes if the loop ran to completion
           }
         else
           {
               % This block executes if the loop was broken prematurely
           }
        </screen>
        <para>*** NOTE: This change broke backward-compatibility.
For this reason, support for the else clause was dropped". See #48
below.</para></item>
        <item><para>slsh/scripts/slprof: Rewrote much of this script
to make it more friendly and useful.</para></item>
        <item><para>src/sldisply.c: When checking for the equality of
space characters, it is only necessary to see see if their background
colors are equal -- the foreground color does not matter. Miroslav
Lichvar mlichvar at redhat, com.</para></item>
        <item><para>modules/png.sl: A variable (bad_level) was
undefined.</para></item>
        <item><para>src/slparse.c: The meaning of constructs such as
(a&lt;b&lt;c) has been changed to have its mathematical meaning,
namely ((a&lt;b)and(b&lt;c)). Before, (a&lt;b&lt;c) was interpreted as
(a&lt;b)&lt;c. Also, == and != now have the same precedence level as
&lt;,&lt;=,&gt;,&gt;= to permit, e.g., (a==b&lt;c). Note that
(a&lt;b&lt;....&lt;c&lt;d) is also defined as
((a&lt;b)and(b&lt;...&lt;c)and(c&lt;d).</para></item>
        <item><para>src/slarray.c: New intrinsic: wherenot(x), which
means where(not x).</para></item>
        <item><para>src/slarray.c,slparse.c: [a:b:#n] may be used to
specify a floating point array with n elements running from a to b,
inclusive.</para></item>
        <item><para>src/slparse,slang.c: Fixed the bug where _NARGS
was incorrectly set in functions called via expressions such as
(@A[i])(x).</para></item>
        <item><para>src/slang.c,slarray.c,slparse.c,slstruct.c:
References to structure fields and array elements are now supported,
e.g., &amp;s.foo and &amp;A[20].</para></item>
        <item><para>slsh/slsh.c: Added '-e string' command-line
option.</para></item>
        <item><para>slsh/lib/profile.sl: Rewrote much of it to support
both profiling individual lines and functions.</para></item>
        <item><para>slsh/scripts/slprof: Added 'calibrate' and 'lines'
command-line options.</para></item>
        <item><para>src/slang.c: Unsigned ints were sometimes pushed
as signed ints.</para></item>
        <item><para>src/slrline.c: Added a new public function called
SLrline_move that moves the cursor a specified number of
columns.</para></item>
        <item><para>slsh/lib/glob.sl: If a glob pattern does not
include a path, the returned list of files will nolonger be prefixed
with "./", i.e., glob("foo") returns "foo" and not
"./foo".</para></item>
        <item><para>slsh/readline.c: If slsh_interactive_hook exists,
it will be called prior to going into interactive mode.</para></item>
        <item><para>src/slrline.c: A completion mechanism was added.
This works by making a callback to a user or application provied hook
that returns a list of possible completions. This functionality is
available if SLrline_init has be called to add readline-specific
intrinsics to the interpreter. The slang code implementing the
completion hook is in slsh/lib/complete.sl.</para></item>
        <item><para>modules/png.sl: Load the colormaps into the same
namespace that was used by png.sl.</para></item>
        <item><para>slsh/slsh.c: readline intrinsics were not getting
initialized.</para></item>
        <item><para> slsh/lib/rline/completion.sl: Avoid adding NULL
to the completion list when no completions are in the global or
current namespace.</para></item>
        <item><para>src/slerr.c: Added SLang_verror_va function. It is
like SLang_verror, except it takes a va_list argument instead of a
variable argument list.</para></item>
        <item><para>slsh/scripts/slprof: If atexit exists, use
it.</para></item>
        <item><para>src/slwclut.c: Typo in is_posix_charclass (&gt;
instead of &gt;=) was causing the long form of posix character class
names not to be properly recognized.</para></item>
        <item><para>src/slrline.c: SLrline_init was using SLfree
instead of SLang_free_slstring, causing a core-dump.</para></item>
        <item><para>slsh/lib/slshrl.sl: Use slsh_get_doc_string
defined in slshhelp.sl.</para></item>
        <item><para>autoconf/aclocal.m4: Add support for rpath on
OpenBSD.</para></item>
        <item><para>src/slarray.c: Single element arrays specified
via, e.g., [a:b:#1] produced the array [b] instead of the "more"
correct answer [a].</para></item>
        <item><para>src/slexcept.c: __get_exception_info will NULL if
no exception is active. Previously it reported an unknown
exception.</para></item>
        <item><para>src/slang.c: If a finally-block threw an exception
and then caught it, the outer exception was getting
lost.</para></item>
        <item><para>slsh/lib/glob.sl: glob("*") nolonger matches files
that begin with ".". A leading dot in a filename must be matched
explicitely. A similar change was made to
glob_to_regexp.</para></item>
        <item><para>src/slang.c,src/slexcept.c: An exception may be
rethrown by using "throw" without any arguments. This required support
for multiple error-queues.</para></item>
        <item><para>src/slparse.c: The "loop-else" feature added in
change #17 was  dropped because the change was not backwards
compatible, changing  the meaning of connstructs such as <command>if
(some_condition) loop (N) {...}  else something_else();</command>
"loop-then" is still supported.</para></item>
        <item><para>src/sldisply.c: If the terminal supports BCE, then
ignore the background color of space characters that occur as trailing
whitespace.</para></item>
        <item><para>src/slrline.c: Added additional rline intrinsic
functions: rline_call rline_set_point rline_set_line</para></item>
        <item><para>src/slrline.c: SLrline_init was using
SLang_free_slstring instead of SLfree. Also SLrline_set_point was
using &lt; instead of &gt; when comparing point to len.</para></item>
        <item><para>src/slrline.c: Added rline_getkey and
rline_input_pending intrinsic functions.</para></item>
        <item><para>src/slstd.c: If the "char" function is passed a
negative integer, byte-semantics will be used.</para></item>
        <item><para>src/slrline.c: When browsing previous history
items, the item that is currently being edited will not be
lost.</para></item>
        <item><para>src/slrline.c: A new function called SLrline_open2
was added to the API. It is like SLrline_open except that it
associates a name with the underlying SLrline_Type object and calls an
interpreter hook (rline_open_hook) with that name. This mechanism
permits the readline history to be saved to a file and then later
retrieved.</para></item>
        <item><para>slsh/lib/rline/*.sl: A few .sl files were
added:</para>
        <unorderedlist>
          <item><para>vikeys.sl:    A simple vi-like
emulation</para></item>
          <item><para>emacs.sl:   A emacs-like</para></item>
          <item><para>emulation editfuns.sl: Some utility editing
functions</para></item>
          <item><para>history.sl: Functions to save/restore
history</para></item>
        </unorderedlist></item>
        <item><para>slsh/scripts/sldb: If the file was specified using
a relative path, prefix its name with the cwd to ensure that it
loads.</para></item>
        <item><para>src/slmath.c: Add "fuzzy" floating point
comparison functions feqs, fneqs, flteqs, fgteqs, which compare
numbers using a specified relative and absolute error.</para></item>
        <item><para>slsh/readline.c: Readline objects were made
available to the interpreter.</para></item>
        <item><para>slsh/scripts/svnsh, slsh/lib/sldb.sl: Added
readline-specific calls to enable the saving/loading of
history.</para></item>
        <item><para>src/slrline.c: Added rline_get_edit_width
intrinsic.</para></item>
        <item><para>src/slarrfuns.c: prod function
added.</para></item>
        <item><para>src/slstrops.c: %b may be used in sprintf to
specify a byte conversion. This is equivalent to %c when UTF-8 mode is
not in effect.</para></item>
        <item><para>src/slarrfuns.c: PROD_RESULT_TYPE was not getting
defined on 64 bit systems</para></item>
        <item><para>src/Makefile.in,autoconf/Makefile.in: Now `make
install` installs the shared library but not the static one. Use `make
install-static` to install the static one.</para></item>
        <item><para>autoconf/aclocal.m4: rpath support for
netbsd</para></item>
        <item><para>slsh/slsh.c: A preprocessor symbol may be added
using -Dname command-line option.</para></item>
        <item><para>src/slstd.c: changed __is_numeric to return 1 if
an integer, 2 if a floating point, and 3 if complex.</para></item>
        <item><para>src/slang.c: missing break statement in the
handling of the qualifier token. This bug manifested itself only when
running with slprof or sldb.</para></item>
        <item><para>slsh/lib/cmdopt.sl: Functions to facilitate the
processing of command line options.</para></item>
        <item><para>slsh/scripts/slprof: modified slprof to use the
cmdopt interface.</para></item>
        <item><para>slsh/lib/structfuns.sl: Enhanced the struct_filter
function to filter on specific array dimensions and to return a new
structure when given the "copy" qualifier.</para></item>
        <item><para>src/slimport.c: Allow pathname in an import
statement, e.g., import("/path/to/module");</para></item>
        <item><para>src/slarrfun.c: Added minabs/maxabs
functions.</para></item>
        <item><para>lib/cmdopt.sl: Added support for type="str"
qualifier. Also, cmdopt documentation corrected.</para></item>
        <item><para>src/slassoc.c: When resizing an associative array
that had elements deleted, the num_occupied field was not being
properly updated. This was causing the length of the array to be
incorrectly computed.</para></item>
        <item><para>src/slproc.c: Added getpgrp,setpgrp,getgid
functions.</para></item>
        <item><para>src/slutty.c: In the getkey function, if a SIGINT
caused SLKeyBoard_Quit to be a non-zero value, the interrupt_hook was
not getting executed.</para></item>
        <item><para>autoconf/Makefile.in: Tell the user to re-run the
configure script if it is more recent than the Makefile.</para></item>
        <item><para>src/slstd.c: __is_numeric was not returning 3 for
Complex_Type.</para></item>
        <item><para>src/slexcept.c: Do not log traeback messages
unless _traceback is non-zero.</para></item>
        <item><para>src/slclass.c: Added
SLclass_patch_intrin_fun_table to the library and modified the code in
modules/ to make use of this function.</para></item>
        <item><para>src/slang.c: SLang_Traceback is now a bitmapped
variable, but defined in a backward compatible manner. See slang.h and
the documentation for the _traceback variable for more
information.</para></item>
        <item><para>src/slang.c,slexcept.c: Change 83 required a small
tweak to the testing of traceback variable.</para></item>
        <item><para>src/slparse.c: MAX_TOKEN_LISTS increased to
256.</para></item>
        <item><para>src/slparse.c: Added a couple of #if..#endif
constructs to avoid compiling bos/eos hooks when the debug feature has
been disabled. </para></item>
        <item><para>src/slproc.c: The setpgrp function that was added
in change #77 has been removed because on some systems it takes
arguments, and on others it takes none. It is also equivalent to
setpgid(0,0), so there is no net loss.</para></item>
        <item><para>src/slutty.c: Set the FD_CLOEXEC flag on the
/dev/tty file descriptor.</para></item>
        <item><para>src/doc/tm/cslang.tm: Changed the array examples
to use `SLindex_Type' instead of `int'. I also added a note about this
to the NEWS file.</para></item>
        <item><para>modules/iconv-module.c: a new
module.</para></item>
        <item><para>src/slsig.c: SLsignal was used instead of
SLsignal_intr. The difference is that SLsignal_intr interrupts system
calls, which is a better choice for the interpreter.</para></item>
        <item><para>src/slproc.c: added setsid intrinsic</para></item>
        <item><para>src/slarray.c: [a:b:#1] was producing [NaN]
instead of [a].</para></item>
        <item><para>src/sldbcore.c: The debugger was not stopping upon
SIGINT.</para></item>
        <item><para>src/sltermin.c: Added _pSLtt_tifreeent to free the
SLterminfo_Type object and avoid a memory leak</para></item>
        <item><para>slsh/lib/cmdopt.sl: Add bor=FLAG and band=MASK
qualifiers to support bitmapped options.</para></item>
        <item><para>modules/onig-module.c: New module that wraps the
oniguruma regular expression library.</para></item>
        <item><para>src/slang.c: If a file defining a namespace was
loaded, a duplicate namespace error was getting generated when also
loading a byte-compiled version of the same file.</para></item>
        <item><para>src/slclass.c: In _pSLclass_copy_class, a possible
NULL return value by alloc_class_slot was not being
handled.</para></item>
      </change>

      <change from="2.0.6" to="2.0.7">
        <item><para>src/slmath.c: if a double precision array was
passed to nint, it was treated as a single precision one leading to a
core dump.</para></item>
        <item><para>src/sldisply.c: The Is_Fg_BGR variable was
re-introduced and a typo affecting it was corrected.</para></item>
        <item><para>src/slinclud.h: Do not include malloc.h on
FreeBSD.</para></item>
        <item><para>doc/tm/cslang.tm: Changed a couple of occurances
of "unsigned char" to "SLtype". </para></item>
        <item><para>doc/tm/rtl/list.tm: Documentation changed to
indicate that the third parameters to list_append/insert are optional.
.</para></item>
        <item><para>src/slwcwidth.c: Added a new function to the API
called SLwchar_set_wcwidth_flags. This may be used to force
SLwchar_wcwidth to 1 for double width characters. Such a feature is
sometimes needed for fixed fonts that treat single and double width
characters the same.</para></item>
        <item><para>slsh/lib/slshrl.sl: The readline-massage hook was
interpreting lines beginning with a '.' as RPN.</para></item>
        <item><para>slsh/lib/sldb*.sl: The debugger was not stopping
upon errors generated by the deprecated function verror.</para></item>
        <item><para>src/slparse.c: "++()" was flagged by the parser as
an error, but no error message for it was being
generated.</para></item>
        <item><para>src/slang.h: #if HAVE_LONG_LONG changed to #ifdef
HAVE_LONG_LONG</para></item>
        <item><para>src/slsmg.c: Return right away if
SLsmg_write_chars is told to write 0 characters. Also a bug fixed in
the logic of this routine involving the test for overwriting the
second half of a double width character.</para></item>
        <item><para>src/slrline.c: Finished the UTF-8 support by the
readline functions.</para></item>
        <item><para>slsh/*.c: Added slsh_get/set_prompt_hook functions
for setting of the slsh command-line prompt. </para></item>
        <item><para>src/sltoken.c: Added additional string
representations for tokens so that some error messages will not appear
to be so cryptic.</para></item>
        <item><para>src/sltoken.c: _pSLparse_error: Use the line
number of the input stream if the linenumber associated with a token
is unknown.</para></item>
        <item><para>src/slparse.c: Inline arrays and lists are allowed
to have a trailing comma, e.g., [1,2,] is the same as
[1,2].</para></item>
        <item><para>doc/tm/rtl/type.tm: typo in example for atof
corrected.</para></item>
        <item><para>Improvements for building on
DOS/Windows</para></item>
        <item><para>Added module support for cygwin. This involved a
few minor changes to the Makefiles and aclocal.m4 </para></item>
        <item><para>slsh/slsh.c: Brief copyright message displayed
when started up in interactive mode.</para></item>
        <item><para>src/slarray.c: Improved support for mixed-type
inline arrays: NULLs supported (["foo", NULL]) where it makes sense,
and type-promotion rules are used to determine the resulting type when
concatenating mix-type arrays (["foo"], NULL,
["bar\0"]);</para></item>
        <item><para>src/slrline.c: SLrline_close was not freeing the
history creating a memory leak.</para></item>
        <item><para>src/keywhash.c: Removed obsolete and unused
"do_while" keyword, and regenerated keywhash.c</para></item>
        <item><para>doc/tm/slang.tm: List of keywords updated to
reflect the actual keywords used.</para></item>
        <item><para>modules/mkfiles/makefile.all: Updated VC-specific
LINK_CMD macro to support the changes outlines in 18
above.</para></item>
        <item><para>src/slang.c,src/slboseos.c: Added hooks for
entering and leaving a function. The beginning-of-statement and
end-of-statement hooks were found insufficient to support a debugger
support. See the documentation for _bofeof_info for more
information.</para></item>
        <item><para>slsh/lib/sldbcore.sl: Modified to use the bof/eof
hooks introduced in #26.</para></item>
        <item><para>Various documentation tweaks.</para></item>
        <item><para>src/slboseos.c: Changed the beginning-of-function
handler to include the filename.</para></item>
        <item><para>src/slsh/lib/require.sl: Removed the "feature not
provided" message.</para></item>
        <item><para>src/slrline.c: Tabs were not being expanded
properly when the window was horizontally scrolled. Also, the last
column of the display is not used in case the terminal has automatic
margins.</para></item>
        <item><para>lib/sldbcore.sl: The debugger's "finish" command
was not quite working as it should have.</para></item>
        <item><para>lib/sldbcore.sl: Added an sldb_initialize function
that can be overridden by the debugger.</para></item>
        <item><para>src/slposio.c: Made changes to allow arbitrary
objects to be attached to file descriptors.</para></item>
        <item><para>src/sl*tty.c: Set SLKeyBoard_Quit to 0 in the
init_tty routines.</para></item>
        <item><para>modules/socket-module.c: A new module that defines
various socket functions. This required additions to the configure
script and related files.</para></item>
        <item><para>src/slstrops.c, slsh/readline.c: Removed
statements that were never reached.</para></item>
        <item><para>src/sltypes.c: foreach(X) where X is String_Type
produces a sequence of UChar_Type objects. This is consistent with
typeof(X[i]). Also added "using" forms to specify char or
byte-semantics: foreach (X) using ("bytes"|"chars"). The default is
byte semantics. Updated the corresponding docs.</para></item>
        <item><para>src/slang.h: Added SLang_push/pop_wchar
macros.</para></item>
        <item><para>src/sldisply.c: This file was failing to compile
with Kanji support enabled. Kanji is unsupported in
slang-2.</para></item>
        <item><para>src/slcurses.*: Alt-character set handling was not
working. Once again, I strongly encourage you to modify your programs
to use the native SLsmg routines instead of the partial curses
emulation hacks.</para></item>
        <item><para>slsh/lib/sldbsock.sl: New file to implement
socket-based debugger.</para></item>
        <item><para>slsh/scripts/sldb: Added --pid &lt;pid&gt; option
for debugging a separate process via the socket-based debugger
interface.</para></item>
        <item><para>src/slang.c: If a try-finally block contained a
return statement, the function would sometimes continue after the
finally block.</para></item>
        <item><para>modules/termios-module.c: Added tcget/seti/ospeed
functions for setting baudrates of termios structures. Also added
CRTSCTS constant to the module.</para></item>
        <item><para>src/slclass.c: If an application calls
SLang_pop_mmt with a non-MMT type specified, a SL_Application_Error
exception will be generated.</para></item>
        <item><para>src/slang.c: A misplaced return statement was
introduced by #44 above.</para></item>
        <item><para>src/slparse.c: Allow the "finally" keyword to be
followed by a colon, e.g., try foo; finally: bar;</para></item>
        <item><para>src/sltoken.c,slang,c: "Dollar" and long-longs
were not being properly handled in byte-compiled files.</para></item>
        <item><para>src/test/Makefile: Changes were made to test
byte-compiled versions of the test scripts.</para></item>
        <item><para>modules/socket-module.c: added #include
&lt;time.h&gt; to get it to compile on mac osx.</para></item>
        <item><para>src/slmath.c: The data field was not properly used
by the nint function.</para></item>
        <item><para>modules/select-module.c: Call
SLang_handle_interrupt when the select system calls gets
interrupted.</para></item>
        <item><para>src/slposio.c: Add == and != operators to FD_Type
objects so that fileno(stdin)==fileno(stdin) works as
expected.</para></item>
        <item><para>src/slarray.c: wherefirst and wherelast were not
working with empty arrays.</para></item>
        <item><para>src/slmisc.c: SLang_guess_type was failing on
numbers containing a leading '+' sign.</para></item>
        <item><para>src/slimport.c: The name of the SLANG_MODULE_PATH
environment variable may be changed in src/Makefile.</para></item>
        <item><para>src/slrline.c: Added a delete-to-beginning-of-line
(delbol) function and bound it to ^U.</para></item>
        <item><para>slsh/Makefile.in: $(CFLAGS) added to the final
link line.</para></item>
        <item><para>src/slmath.c: Avoid the use of function pointers
to standard math functions to support a wider range of
compilers.</para></item>
        <item><para>autoconf/aclocal.m4: IRIX compilers do not require
"-K pic"</para></item>
        <item><para>autoconf/configure.ac: Probe for
socklen_t.</para></item>
        <item><para>*/Makefile.in: Added support for the $LIBS env
variable</para></item>
        <item><para>src/slerr.c: Added fflush(stdout) to
SLang_vmessage.</para></item>
        <item><para>slsh/lib/sldbcore.sl: The eof hook was improperly
handling the debugger step.</para></item>
        <item><para>src/slarray.c: Optimization added for index-array
operations on double, float, and int arrays.</para></item>
        <item><para>src/slarith.c: Optimization added for boolean
operations between [U]Char_Types.</para></item>
        <item><para>lib/structfuns.sl: Typo in the documentation
corrected</para></item>
        <item><para>lib/*.sl, lib/tm/*.tm, lib/help/*.hlp:
Documentation for the functions in *.sl has been moved to *.tm and
integrated into the help system.</para></item>
        <item><para>src/slwclut.c: a missing "default" label in a
switch statement was causing invalid character class specifiers to
pass.</para></item>
        <item><para>src/slang.c: Optimization added for struct method
calls. In addition, linenumber information was propagated for such
function calls to permit better interaction with the
debugger.</para></item>
        <item><para>slsh/lib/profile.sl: profile_on was not being
called with an argument.</para></item>
      </change>

      <change from="2.0.5" to="2.0.6">
        <item><para>src/slmath.c: nint was returning the wrong value
for numbers 0.5&lt;=x&lt;1.</para></item>
        <item><para>src/slarrfuns.c: sum(Double_Type[0,0],1) was
generating an access error.</para></item>
        <item><para>src/*.c: Removed some unused
variables.</para></item>
        <item><para>src/slcommon.c: '=' instead of '==' was being used
in the utf8_enable function.</para></item>
        <item><para>doc/tm/*.tm: corrected some documentation
typos.</para></item>
        <item><para>src/sltime.c: times function was returning a
structure containing incorrect values.</para></item>
        <item><para>src/sldisply.c: Writing a multi-byte character to
the lower-right corner of terminals with automatic margins was not
working.</para></item>
        <item><para>src/slwclut.c: Allow \\^ in character set
specifications to represent a literal '^'. See the documentation for
strtrans for more information.</para></item>
        <item><para>src/slcommon.c: Some systems that have nl_langinfo
do not have CODESET. The configure script now checks for
both.</para></item>
        <item><para>autoconf/Makefile.in: Added ".PHONY" and "check"
targets.</para></item>
        <item><para>src/slstrops.c: "%c" in an sprintf style format
descriptor made to work with wide-character arguments. It is nolonger
necessary to use "%lc".</para></item>
        <item><para>src/slmisc.c: Semantics of "\x{...}" changed to be
more useful  when the interpreter is running in non-UTF8 mode.
Previously,  "\x{...}" always expanded to a UTF-8 encoded string,
regardless of  the UTF-8 mode.  Now, in non-UTF8 mode, \x{...} will
expand to a  UTF-8 encoded string when "..." consists of 3 or more
characters, and for less than 2 characters, it specifies a byte. The
behavior in UTF-8 mode has not changed: \x{...} always returns a UTF-8
encoded string. The upshot is that "\x{FF}" will produce the byte 0xFF
when not in UTF-8 mode, and the 2 byte UTF-8 encoding when run in
UTF-8 mode. "\x{FFF}" will expand to the apropriate UTF-8 encoding
regardless of the mode. Note that the behavior of the non-brace form
such as \xAB has not changed--- the result is still a single byte
0xAB.</para></item>
        <item><para>src/slmisc.c: \u{...} may be used in string
literals to specify a unicode character, regardless of the UTF-8 mode
(on or off). Previously, \x{...} had this behavior. (See
#13).</para></item>
        <item><para>src/test: Tests are run in both UTF-8 and
non-UTF-8 modes.</para></item>
        <item><para>src/slvideo.c: djgpp version of write_attributes
was broken</para></item>
        <item><para>slsh/readline.c: Call SLang_handle_interrupt if a
read was interrupted by a signal. This will ensure that signal
handlers will execute at the prompt.</para></item>
        <item><para>src/sldisply.c: Added a check for buffer-overflow
by tgetstr on TERMCAP based systems.</para></item>
        <item><para>autoconf/: Updated config.sub and
config.guess</para></item>
        <item><para>slsh/readline.c: Added slsh_readline_noecho
function. Also, strip trailing newline from string returned by
slsh_readline* when in --no-readline mode.</para></item>
      </change>

      <change from="2.0.4" to="2.0.5">
        <item><para>slsh/slsh.c: Error messages were not being printed
if an error occured during an atexit hook.</para></item>
        <item><para>src/slstrops.c: Use _pSLstring_bytelen instead of
strlen to get the number of bytes.</para></item>
        <item><para>src/slstring.c: Several tweaks were made for
faster string handling.</para></item>
        <item><para>src/slparse.c: A negative integer literal raised
to a power was not being properly parsed.</para></item>
        <item><para>doc/tm/cslang.tm: Documentation updated to reflect
the changed SLang_pop_double API, as well as other C API documentation
tweaks.</para></item>
        <item><para>doc/tm/rtl/type.tm: Documentation for "integer"
changed to indicate that integer throws a SyntaxError exception if the
string does not have a valid syntax.</para></item>
        <item><para>src/slmath.c: Added nint (round to the nearest
integer) intrinsic.</para></item>
        <item><para>src/slarray.c: NULL arguments to array_map were
not getting converted to arrays of NULL.</para></item>
        <item><para>src/slang.h: Added SLclass_set_length_function for
setting the length method of application-defined
classes.</para></item>
        <item><para>src/slang.ver: A versioning script is used to
restrict the visibility of the _pSL* symbols. </para></item>
        <item><para>slsh/slsh.c: Ignore SIGPIPE.</para></item>
        <item><para>src/slutf8.c: If SLutf8_decode is passed an
inproperly encoded UTF-8 sequence, then set the target of the
SLwchar_Type pointer to the ascii value of the byte, in addition to
returning NULL.</para></item>
        <item><para> src/slposdir.c: Added "access"
intrinsic.</para></item>
        <item><para>src/slsmg.c: Fixed a buffer-overflow in the
SLsmg_write_chars function.</para></item>
        <item><para>src/slsig.c: A missing return statement was
causing sigsuspend to fail when called with 0 arguments.</para></item>
        <item><para>src/slarray.c: Added wherefirst and wherelast
intrinsics.</para></item>
        <item><para>src/slang.c: Inline attribute removed from some
functions that were failing to be inlined by the
compiler.</para></item>
        <item><para>src/slstdio.c: SLang_get_fileptr added to permit
an application to get the FILE* object associated with a
SLANG_FILE_PTR_TYPE.</para></item>
        <item><para>src/slang.c: It was failing to compile when
SLANG_HAS_DEBUGGER_SUPPORT was set to 0.</para></item>
        <item><para>src/sltime.c: strftime intrinsic
added.</para></item>
      </change>

      <change from="2.0.3" to="2.0.4">
        <item><para>slsh/scripts/svnsh: Empty lines were not being
handled.</para></item>
        <item><para>src/slutf.c: Incorrect bracketing in the
IS_ILLEGAL_UNICODE macro.</para></item>
        <item><para>src/sllist.c: A prev link was not always getting
set by the list_insert function.</para></item>
        <item><para>doc/tm/rtl/eval.tm: Tweaked the documentation for
the eval function</para></item>
        <item><para>modules/png.sl: Make sure the scale factor is a
float and not an int.</para></item>
        <item><para>src/sltime.c: The tic/toc functions were changed
to use gettimeofday or its equivalent. This change results in greater
resolution for these interval timers, but not necessarily greater
accuracy. Also, previously the tic/toc functions measured the time
used by the current process but now they measure elapsed time. The old
behavior is still available via _tic/_toc.</para></item>
        <item><para>slsh/lib/profile.sl: The above change made it
possible to create a more accurate profiling tool. The functions in
this file are used by the slsh/scripts/slprof profiling
tool.</para></item>
        <item><para>src/slarith.c: Missing break statement caused
signed long long values to be printed as unsigned long
longs.</para></item>
        <item><para>tm/doc/cslang.tm: Two small typos
corrected</para></item>
        <item><para>autoconf/aclocal.m4: Support for GNU Hurd and GNU
KFreeBSD / KNetBSD systems</para></item>
        <item><para>src/slstrops.sl: Added support for long long to
the sprintf intrinsic function (e.g., sprintf ("%lld",
1234LL))</para></item>
        <item><para>modules/png-module.c: 8 bit gray scale images were
being written out as 8 bit images with an alpha channel. Bug fixed and
version bumped to 0.1.1.</para></item>
      </change>

      <change from="2.0.2" to="2.0.3">
        <item><para>src/slang.c: Optimization of multiple assignment
statements involving binary operators was generating bad byte-code
causing a run-time error.  In order to see this effect, code such as
<command>w = 3*t+s;  x = 2*z+1;  y = z*z;</command>  would have to be
written as a as multiple assignment statement: <command>(w,x,y) =
(3*t+s, 2*z+1, z*z);</command></para></item>
        <item><para>src/sltypes.c: Added SLang_push_function to
complement SLang_pop_function.</para></item>
        <item><para>src/slkeymap.c: SLkm_define_slkey implemented. It
was already declared in slang.h but never implemented until
now.</para></item>
      </change>

      <change from="2.0.1" to="2.0.2">
        <item><para>src/slang.h: Forgot to bump SLANG_VERSION to
20001.</para></item>
      </change>

      <change from="2.0.0" to="2.0.1">
        <item><para>modules/png.sl: png_gray_to_rgb was missing an
assignment after normalization.</para></item>
        <item><para>slsh/lib/print.sl: Ignore SIGPIPE while in the
pager.</para></item>
        <item><para>src/slang.c: SLang_peek_at_stack1_n was
broken.</para></item>
        <item><para>src/slsmg.c: If the cursor is left outside the
visible display area during SLsmg_refresh, then "clip" its position to
the visible area.</para></item>
        <item><para>src/slarray.c: Typo (= vs ==) was corrected in the
array_eqs_method function.</para></item>
        <item><para>src/slmath.c: Use IS_NAN macro instead of
isnan</para></item>
        <item><para>src/mkfiles/makefile.all: Added dll support for
the mingw32 build</para></item>
        <item><para>src/slang.c: Removed a while loop that did
nothing.</para></item>
        <item><para>src/mkfiles/makefile.all, src/slconfig.h,
src/slposdir.c: Support added for 16 bit systems using watcom
C</para></item>
        <item><para>doc/tm/*.tm: Some spelling errors
corrected</para></item>
        <item><para>src/slang.c, src/slnspace.c: There was a conflict
between private and static namespaces that arose when _implicitly_
loading a file into a specified namespace. Resolving this issue
involved the complete separation of the private and static
namespaces.</para></item>
        <item><para>The _get_frame_info function now provides the name
of the active namespace.</para></item>
        <item><para>src/sldisply.c: Line drawing characters were not
activated when xterm was started in locale mode. Escape sequences were
tweaked. </para></item>
        <item><para>slsh/lib/print.sl: If an element of an array of
structs is NULL then print the element as NULL.</para></item>
        <item><para>modules/varray.c: typo was preventing mmapping of
a file from working properly.</para></item>
        <item><para>slsh/lib/*.sl: changed "static" to "private" to
protect the functions when loaded into a namespace.</para></item>
        <item><para>autoconf/configure.ac: Add tests for atoll and
strtoll. Some versions of MacOS X do not have atoll.</para></item>
        <item><para>modules/png.sl: Added png_get_colormap_names and
changed examples/colormap.sl to use it.</para></item>
        <item><para>src/slarrfun.c: Ignore _NaNs in min/max
functions.</para></item>
        <item><para>slsh/lib/sldbcore.sl: Added several aliases to the
debugger: b(reak), c(ont), d(elete), h(elp), l(ist), n(ext), p(rint),
pp(rint), q(uit), s(tep)</para></item>
      </change>

      <change from="2.0.0 pre-release 8" to="2.0.0">
        <item><para>src/slang.c: Under some conditions, no line number
information was being reported for stack underflow
errors.</para></item>
        <item><para>lib/sldbcore.sl: Missing return value was causing
a stack-underflow error.</para></item>
        <item><para>src/slmisc.c,src/sltoken.c: In UTF-8 mode, an
escaped sequence of the form "\xAB" is interpreted as a byte.
Previously, it was interpreted as a wide character. To encode a wide
character using an escape sequence, use braces
("\x{AB}").</para></item>
        <item><para>src/slstd.c: The putenv function now throws an
OSError exception upon failure. Previously it threw a
RunTimeError.</para></item>
        <item><para>src/slerr.c: Added NamespaceError exception and
changed some of the namespace specific function to throw this
exception instead of a RunTimeError exception.</para></item>
        <item><para>src/slang.h: SL_Domain_Error was missing from the
file.</para></item>
        <item><para>src/slerrno.c: If errno_string is called without
an errno argument, the current value of _pSLerrno_errno will be
used.</para></item>
        <item><para>src/sltime.c: The "time" functions were changed
from using an unsigned long to a long to match time_t.</para></item>
        <item><para>src/slvideo.c: Corrected a typo in the
non-Unix/non-VMS specific SLtt_utf8_enable function.</para></item>
      </change>

      <change from="2.0.0 pre-release 7" to="2.0.0 pre-release 8">
        <item><para>slsh/lib/structfuns.sl was missing from the
distribution.</para></item>
        <item><para>src/sldisply.c: SLtt_Blink_Mode set to have a
default of 0 instead of 1.</para></item>
        <item><para>slsh/slsh.c: Add -t option, which causes slsh_main
(if defined) to not be executed.</para></item>
        <item><para>src/sltoken.c:SLang_load_object: Do not reset the
line_num field. This gives the line numbers in slsh interactive mode
some meaning.</para></item>
        <item><para>src/slsh/lib/slshrl.sl: Usage message for
"exit"</para></item>
        <item><para>src/slvideo.c: SLtt_utf8_enable function
added</para></item>
        <item><para>src/slexcept.c: If tracebacks are turned off, make
sure that the line number field in exception objects is
meaningful.</para></item>
        <item><para>src/slang.c: SLang_peek_at_stack1_n was not
working. .</para></item>
        <item><para>src/slang.c: Small optimization tweak when dealing
with a single array index.</para></item>
        <item><para>src/slposio.c: found and fixed a leak in the
"read" function.</para></item>
        <item><para>modules/png-module.c: New module to read/write png
files. It includes about 20 colormaps. See
examples/colormap.sl.</para></item>
        <item><para>src/slclass.c: SLang_get_int_type returns the
SLtype for the integer with the specified number of
bits.</para></item>
        <item><para>src/slarray.c: array_shape intrinsic function
added as an alternative to array_info for getting the dimensionality
of an array.</para></item>
        <item><para>src/slospath.c: new intrinsic:
path_basename_sans_extname</para></item>
        <item><para>src/, slsh/: A number of win32 tweaks to support
dynamic linking under windows..</para></item>
        <item><para>src/slstruct.c: Check for duplicate fields in a
struct..</para></item>
        <item><para>src/slarrfun.c: New matlab-like functions "any"
and "all"..</para></item>
        <item><para>src/slang.c: Calling SLang_restart will also clear
the slang error state. There is no need to call SLang_set_error(0)
after calling SLang_restart.</para></item>
        <item><para>src/sltoken.c: Allow the evaluation of '#if
(expr)' when created a pre-parsed file (.slc).</para></item>
        <item><para>src/slang.c: If a function defined in the
currently loading file is to also be autoloaded into another
namespace, and that namespace is not current one, then make sure an
anonymous namespace is being used.</para></item>
        <item><para>src/slang.c, slboseos.c: Experimental support for
a debugger.  New  functions:      _set_frame_variable
_get_frame_variable  _get_frame_depth _get_frame_info
_use_frame_namespace</para></item>
        <item><para>slsh/lib/sdb*.sl: An experimental source code
debugger based on jed debugger.</para></item>
        <item><para>src/slang.c: The "_pSL" prefix was dropped from a
few file-local variables. Also calls to _pSLclass_push_* were changed
to calls to file-local specific versions of the
functions.</para></item>
        <item><para>src/slsh/mkfiles/: A couple of win32 icons for
slsh were provided by Marko Mahnic</para></item>
        <item><para>src/slarray.c: If typeof(t)==DataType_Type, then
put back the old behavior of array creation via t[N].</para></item>
        <item><para>doc/tm/slang.tm: The slang manual has been updated
for version 2, with numerous typos corrected.</para></item>
        <item><para>slsh/scripts/sldb: New script that invokes the
debugger.</para></item>
        <item><para>src/slstruct.c: Added _is_struct_type. This works
like is_struct_type excepted if the object is an array, it returns
information about the array elements.</para></item>
        <item><para>slsh/lib/print.sl: The "print" defined by this
file may be used to print arrays, structures, lists, etc. It is also
used by sldb's pprint command.</para></item>
      </change>

      <change from="2.0.0 pre-release 6" to="2.0.0 pre-release 7">
        <item><para>The _traceback variable was being ignored. As a
result, error messages were more verbose than requested.</para></item>
        <item><para>I fixed the negative indexing issues and made such
indexing much more consistent. Before it was possible to index the
first through last elements of an array using the index [0:-1].
However, there were too many inconsistencies associated with this
feature. Negative indices are still supported but in a much more
consistent fashion. See UPGRADE.txt for more details.</para></item>
      </change>

      <change from="2.0.0 pre-release 5" to="2.0.0 pre-release 6">
        <item><para>src/slang.h+others: I created a new typedef in
slang.h representing array indices (SLindex_Type). This is used in the
SLang_Array_Type structure. Previously the affected fields were ints.
For backward compatibility, SLindex_Type is defined as an int. This
change was made with an eye to the future when 64 bit platforms become
more common with physical memory such that one wants to index arrays
with more than MAX_INT elements per dimensions (the current
limit).</para></item>
        <item><para>src/slarith.c: missing comma in a code block
specific to 64 bit systems prevented compilation.</para></item>
        <item><para>src/: OS/2 specific patches.</para></item>
        <item><para>src/mkfiles/makefile.all: Added some ranlib
commands for the mingw32, cygwin, and EMX compilers.</para></item>
        <item><para>*/mkfiles/makefile.all: Add TOOL_PREFIX variable
to support cross-compilation.</para></item>
        <item><para>slsh/slsh.c: win32 specific changes to get path to
slsh.rc via the GetModuleFileName function).</para></item>
        <item><para>slsh/mkfiles/makefile.all: Corrected the values of
the SLANGINC and SLANGLIB variables.</para></item>
        <item><para>src/slstd.c: atoll intrinsic was not getting
defined.).</para></item>
        <item><para>src/test/longlong.sl: Add test for
atoll</para></item>
        <item><para>src/slerr.c: SLang_set_error: Allow an error to be
cleared but not changed to another value in the presence of an
error.</para></item>
        <item><para>src/slarray.c: Allow a 1-d integer array to always
address a multidimensional array. Not just "sometimes".</para></item>
        <item><para>slsh/lib/arrayfuns.sl: local variable a was
multiply defined in reverse function.</para></item>
        <item><para>src/slpack.c: Add support for long long and 64 bit
types. Also 'z' specifier added as an alternative to
's'.</para></item>
        <item><para>src/slstdio.c: Previously,
fread(&amp;v,Char_Type,n,fp) would assign a BString_Type object to v
if n&gt;1 or Char_Type if n==1. Now, for consistency it returns
Char_Type[n] for n &gt; 1. To get the value as a binary string, use
fread_bytes. This change is not backwards compatible and may break
code that relies upon the old behavior. See UPGRADE.txt for additional
information.</para></item>
        <item><para>src/slrline.c: A silly typo prevented multiple
instances of readline objects.</para></item>
        <item><para>slsh/: New intrinsic: slsh_readline. This allows a
script to get input from the user using the readline
interface.</para></item>
        <item><para>slsh/scripts/svnsh: A simple shell for interacting
with an SVN repository.</para></item>
        <item><para>src/slang.h: The SLANG_MODULE macro was
incorrectly defined when compiled with C++.</para></item>
        <item><para>src/slkeymap.c: A small memory leak was
found</para></item>
        <item><para>src/slarith.c,...: Some problems were found on
64bit big-endian machines. Correcting this involved adding new
functions to the interface long and short intrinsic
constants.</para></item>
        <item><para>src/slang.c: Inside a finally block, loops were
not working if the exception handler issued a break or return
statement.</para></item>
        <item><para>src/slrline.c: On a 64bit big-endian system a SEGV
would result when inserting text.</para></item>
        <item><para>configure: CFLAGS added to the ELF_CFLAGS
variable. LDFLAGS added to the ELF_LINK variable.</para></item>
        <item><para>src/slposdir.c: hardlink intrinsic
added.</para></item>
        <item><para>src/slexcept.c: "function" field added to the
exception object.</para></item>
        <item><para>src/slang.c: The way line number information is
stored has been changed. Now it is nolonger necessary to get line
number information by setting the _debug_info variable. In the process
I tried to make the error messages somewhat more useful.</para></item>
        <item><para>src/slang.h: SLvsnprintf and SLsnprintf functions
made public Previously these were _pSLvsnprinf and
_pSLsnprintf..</para></item>
        <item><para>src/slang.c, _slang.h: Bytecodes were made enums
instead of preprocessor symbols.</para></item>
        <item><para>src/slang.h: External symbols have been prefixed
with SL_EXTERN to facilitate the construction of a slang DLL on
windows. When compiling against the slang DLL, be sure to define
SLANG_DLL. .</para></item>
        <item><para>src/sllist.c: Added foreach method to
lists.</para></item>
        <item><para>src/slsmg.c: Experimental feature: If rendering a
character string  that contains an character sequence of the form
<command>'ESC [ x m'</command>, or  <command>'ESC [ x ]'</command>,
where x represents a decimal integer, then the  current color will be
switched to the value of x.  If x is omitted  (ESC[m) then the color
will be set to the color active at the time of the function call.
<command>SLsmg_set_color (1); SLsmg_write_string ("This is a
\033[123mnew\033[m feature");</command> is equivalent to:
<command>SLsmg_set_color (1); SLsmg_write_string ("This is a ");
SLsmg_set_color (123); SLsmg_write_string ("new"); SLsmg_set_color
(1); SLsmg_write_string (" feature");</command>  By default, this
feature is turned off but may be turned on via
<command>SLsmg_embedded_escape_mode (1);</command> Although this
special color-changing-byte-sequence looks like an ANSI escape
sequence, the semantics are very different.</para></item>
        <item><para>doc/tm/rtl/type.tm: The "string" function was
documented as returning an integer. </para></item>
      </change>

      <change from="2.0.0 pre-release 4" to="2.0.0 pre-release 5">
        <item><para>src/*: For POSIX compliance, all _SL* symbols were
changed to _pSL*. If you experience a linker error such as "undefined
symbol: _SLChg_UCase_Lut" after upgrading, then you will have to
recompile your application.</para></item>
        <item><para>src/slstring.c: Bug fix. For some strings, a
substring would produce the same hash as the full string. As a result,
the substring was not being properly generated.</para></item>
        <item><para>src/slerr.c: For applications not using the
interpreter, _pSLerr_init was not getting called. As a result, the
error-codes were not getting initialized.</para></item>
        <item><para>src/slsmg.c: Bug fix affecting
SLsmg_Newline_Behavior.</para></item>
        <item><para>src/doc/tm/rtl/strops.tm: typo</para></item>
        <item><para>src/slstd.c: added atoi, atol, atoll as simple
wrappers around corrsponding standard library functions--- same
caveats apply.</para></item>
        <item><para>src/slstd.c: New intrinsics: add_doc_file,
get_doc_files, set_doc_files. These functions facilitate the addition
of documentation via a standard mechanism across all apps using the
interpreter.</para></item>
        <item><para>slsh: Interactive support with readline-editing
added to slsh. By default, the slang library readline functions are
used. If you want GNU readline, then run configure with the
appropriate option..</para></item>
        <item><para>slsh: A man page for slsh.</para></item>
        <item><para>src/slwclut.c: No provision was allowed for
backslashes in ranges that also permitted character
classes.</para></item>
        <item><para>slsh/mkfiles/makefile.all: New file for non-unix
systems. ).</para></item>
      </change>

      <change from="2.0.0 pre-release 3" to="2.0.0 pre-release 4">
        <item><para>New intrinsics: array_swap,
array_reverse</para></item>
        <item><para>src/slrline.c:SLrline_open: If the display width
argument is 0, set it to 80.</para></item>
        <item><para>sldisply.c: Initialize SLtt_Screen_Cols/Rows to
(80,24) instead of (0,0).</para></item>
        <item><para>src/slparse.c: Expressions such as &amp;s.foo and
&amp;s[0] are flagged as unsupported at parse time.</para></item>
        <item><para>src/slimport.c: A module may now be imported into
more than one namespace. See modules/README if you are a module
writer.</para></item>
        <item><para>slsh/Makefile.in, modules/Makefile.in: Made
changes so that nothing gets compiled during the install
step.</para></item>
        <item><para>src/slimport.c: If "import" is called without a
namespace argument, the current namespace will be used. If the current
namespace is anonymous, the global namespace will be
used.</para></item>
        <item><para>slsh/lib/require.sl: The provide/require functions
have been changed to take a namespace argument.</para></item>
        <item><para>doc/tm/slang.tm: Added section on operator
overloading for user-defined types.</para></item>
        <item><para>doc/tm/tools/fixtxt: a jed-script to repair the
text files generated by the linuxdoc sgml2txt program.</para></item>
        <item><para>doc/tm/slang.tm: Corrected some typos</para></item>
        <item><para>src/mkfiles/makefile.all: DOS/Windows: The
response file was not being properly generated</para></item>
        <item><para>src/slang.c: The autoload function may be used to
load a file into a namespace.</para></item>
        <item><para>src/slstring.c: New hash function</para></item>
        <item><para>src/slassoc.c: rewritten to use double
hashing.</para></item>
      </change>

      <change from="2.0.0 pre-release 2" to="2.0.0 pre-release 3">
        <item><para>autoconf/aclocal.m4: "if [...]" replaced by "if
test ..."</para></item>
        <item><para>src/slsearch.c: BM searches for a string with the
same length as the string to be searched was failing.</para></item>
        <item><para>slsh/scripts/jpegsize: New demo script that finds
the dimensions of jpeg-encoded images.</para></item>
        <item><para>src/slstd.c: Added _slang_install_prefix intrinsic
variable.</para></item>
        <item><para>src/slboseos.c: New file. This file allows to
define callback functions that will be called at the beginning (BOS)
and end (EOS) of every statement executed by the
interpreter.</para></item>
        <item><para>slsh/lib/stkcheck,sl: The code in this file makes
use of the new BOS/EOS hooks to display lines in a source file that
leave something on the slang stack.</para></item>
        <item><para>examples/profile.sl: This file defines a few
functions that take advantage of the BOS/EOS hooks to profile slang
code.</para></item>
        <item><para>src/slarrfun.inc: sum and cumsum tweaked to use a
"compensated summation" technique to reduce the effect of roundoff and
truncation errors.</para></item>
        <item><para>src/slmisc.c: SLatoi("h") was producing 0, and not
an exception.</para></item>
        <item><para>src/slmath.c: On VMS, slang is compiled with IEEE
support.</para></item>
        <item><para>src/slassoc.c: Rewrote the implementation to use a
double hashing scheme.</para></item>
      </change>

      <change from="2.0.0 pre-release 1" to="2.0.0 pre-release 2">
        <item><para>slsh/lib/require.sl: Protect the Features variable
against multiple loading.</para></item>
        <item><para>src/*.c: VMS-specific patches.</para></item>
        <item><para>src/slsearch.c: non-UTF-8 case-insensitive
searches were not working.</para></item>
        <item><para>src/SLwchar*.c: SLwchar_xxxx functions will use
the current locale if UTF-8 has not been enabled for the
interpreter.</para></item>
        <item><para>src/sldisply.c: The display of double-wide unicode
characters was not working properly under some
conditions.</para></item>
        <item><para>src/slsmg.c: If a double wide character is being
displayed, then if a character is written to either of the cells
occupied by the double wide character, then the opposing cell will be
overwritten with a space.</para></item>
        <item><para>src/sltoken.c: Characters specified as 'x' where 0
!=(x&amp;0x80) were not being properly parsed.</para></item>
        <item><para>src/aclocal.m4: --without-foo was not
working.</para></item>
        <item><para>src/slstrops.sl: Fixed an access error in the
"string_match" function.</para></item>
      </change>

      <change from="2.0.0 pre-release 0" to="2.0.0 pre-release 1">
        <item><para>src/slpath.c: slpath_dirname on VMS was failing to
include the closing "]" in its return value.</para></item>
        <item><para>src/slprep.c: A comment in a slang "#ifdef"
directive would cause an infinite loop.</para></item>
        <item><para>src/slarray.c: An integer array such as [a:b:c]
where a&gt;b and c&gt;b was being improperly computed.</para></item>
        <item><para>src/slparse.c: Function calls with missing
arguments was not being properly handled, e.g., func(,);</para></item>
        <item><para>src/slang.h, src/slclass.h:
SLclass_set_foreach_functions added.</para></item>
        <item><para>src/slcurses.[ch]: changes added to support
UTF-8</para></item>
        <item><para>src/Makefile.in: $(prefix)/doc changed to
$(prefix)/share/doc</para></item>
        <item><para>src/sldisply.c: Missing "break" added to
tt_sprintf.</para></item>
        <item><para>src/slang.c: SLang_peek_at_stack_n and
SLang_peek_at_stack1_n functions added to peek deeper into the
stack</para></item>
        <item><para>src/slang.c: The actual name of the local variable
is used in the traceback messages.</para></item>
        <item><para>src/slsig.c: Support for the signals added to the
interpreter. The new intrinsics include: signal, sigsuspend,
sigprocmask, alarm.</para></item>
        <item><para>src/slcommon.c, slang.h: When system calls are
interrupted, a set of "interrupt" hooks may be called. The return
values of the hooks determine whether or not the system call is
restarted.</para></item>
        <item><para>src/slang.c: If a string has a $ suffix, then
variable name expansion will take place on the string, e.g.,
"$CC"$.</para></item>
        <item><para>src/sldisply.c: misc patches (optimization and
buffer overflow)</para></item>
        <item><para>src/slprep.c: #&lt;whatever&gt; was not
working.</para></item>
        <item><para>src/sldisply.c: Applied a patch from Andriy I
Pylypenko dealing with tgetstr on termcap-based systems.</para></item>
        <item><para>src/slcurses.c: combining character support added
to curses emulation</para></item>
        <item><para>src/slsmg.c: New function SLsmg_strwidth returns
the displayable width of a character string assuming it will be
displayed at the current position.</para></item>
        <item><para>src/slstrops.c: string_match and string_match_nth
work in terms of byte-offsets, not character offsets. New intrinsics:
strbytesub and substrbytes that substitute a byte and return a byte
sequence, resp.</para></item>
        <item><para>src/slarray.c: If A is a string, the A[n] returns a UChar_Type. Indexing a string using array notation uses byte-semantics.</para></item>
        <item><para>src/slang.h: Tracing messages were being queued instead of processed right away.</para></item>
        <item><para>src/slcommon.c: SLutf8_enable will use nl_langinfo if available.</para></item>
        <item><para>src/slstdio.c: new intrinsic: fputslines</para></item>
        <item><para>src/slerr.c: Explicit CRs (\r) removed from error
and message handling routines.</para></item>
        <item><para>modules/: smg-module.c renamed to slsmg-module.c,
with similar name changes to the module symbols. Also, for each
xxx-module.c, a new xxx.sl was added to be installed in the slsh
install-dir so that slsh's "require" will pick up the specified
module.</para></item>
      </change>

      <change from="1.4.9" to="2.x">
        <item><para>There have been many changes for the version 2
release. See NEWS and UPGRADE.txt for some of the changes. The ones
listed here were to appear in 1.4.10, if released. Version 2 contains
these changes and many more.</para></item>
        <item><para>src/slang.c: Test for local variable stack
overflow was using &gt; instead of &gt;=.</para></item>
        <item><para>src/slarray.c: Fixed a bug that prevented 7 dim
arrays from being indexed. Similar problem to #1 above: &gt; vs
&gt;=.</para></item>
        <item><para>src/slassoc.c: The following caused a segv: X =
Assoc_Type[Int_Type]; X["foo"] = [1:10]; Now a type-mismatch error
will get generated.</para></item>
        <item><para>src/slerr.c,sltermin.c: Off by 1 calculations of
buffer-sizes fixed.</para></item>
        <item><para>src/slkeypad.c: More escape
sequences</para></item>
        <item><para>src/slerr.c: SLang_get/set_error functions have
been added to the API to get and set the value of SLang_Error, resp.
The variable SLang_Error will be removed from slang 2. Applications
should start using these functions to ease migration to the next
version.</para></item>
        <item><para>src/slstruct.c: Added SLang_push/pop/free_struct
functions to public API. The objects themselves are still
opaque.</para></item>
        <item><para>src/slparse.c: allow the semi-colon to be used as
a field separator in a structure declaration.</para></item>
        <item><para>src/slpath.c: path_sans_extname was failing when a dot was in a directory part of the name.</para></item>
        <item><para>slsh/slsh.c: The names of environment variables
defining the location of the global slsh.rc and the slsh library files
may be specified in slsh/Makefile.</para></item>
        <item><para>src/sltoken.c: Local buffer overflow when the size
of an identifier exceeds 256 characters was found and
corrected.</para></item>
        <item><para>src/slarray.c: Leak fixed: Under some
circumstances, a memory leak was  generated when using user-defined
"typedefd" objects in an array, e.g., typedef struct {a} Foo_Type;
()=[Struct_Type[1],@Foo_Type];</para></item>
        <item><para>src/slarray.c: Indexing a multi-dimensional array
using a mult-dimensional array was broken. Now A[I] returns an array
with the same dimensionality as I, regardless of the dimensionality of
A.</para></item>
        <item><para>New intrinsics:  __is_callable  __is_numeric
__datatype mktime symlink</para></item>
      </change>
    </notes>

    <changelog>
      <change date="2012 January 23" revision="3"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Update libiconv dependency from 1.12 to
1.13.1</para></item>
        <item><para>Update libpng dependency from 1.2.29 to
1.4.4</para></item>
        <item><para>Update pcre dependency from 7.8 to
8.11</para></item>
        <item><para>Update zlib dependency from 1.2.3 to
1.2.5</para></item>
        <item><para>Add support for AIX 7.1</para></item>
      </change>

      <change date="2010 November 11" revision="2"
      author="Gary V. Vaughan" email="gary@thewrittenword.com">
        <item><para>Add support for RHEL 6</para></item>
      </change>
    </changelog>
  </program>
</programs>
