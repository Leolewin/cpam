<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="coreutils" version="8.11" revision="1">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}811</install-name>

    <sources>
      <source checksum="eabaf2593f4b978dea13044d6acc2dc8"
        checksum-type="md5" size="11495445"
        path="src/coreutils-8.11.tar.gz"/>
      <patch checksum="1724d30b14e27aeee1a3439bf77d78ff"
        checksum-type="md5" size="35996"
        path="src/coreutils-8.11.c99-to-c89.diff"/>
      <patch checksum="1aca3ca14920627bc3d3639769ad288a"
        checksum-type="md5" size="4998"
        path="src/coreutils-8.11.tww.patch"/>
      <patch checksum="ebda0048d9fad01c09aa0603e52cb009"
        checksum-type="md5" size="800"
        path="src/coreutils-8.11.gnulib-tweaks.patch"/>
      <patch checksum="b55dce094aef7b3adfff30313c1ecb33"
        checksum-type="md5" size="959023"
        path="src/coreutils-8.11.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="bison" install-name="bison24"
        add-path="prepend" type="build">v&gt;=2.4.3</depend>
      <depend program="grep" install-name="grep29" add-path="prepend"
        type="build">v&gt;=2.9</depend>
      <depend program="gettext" var="GETTEXT"
        install-name="gettext018"
        add-path="prepend">v&gt;=0.18.1.1</depend>
      <depend program="gmp" var="LIBGMP"
        install-name="libgmp43">v&gt;=4.3.2</depend>
      <depend program="libiconv" var="LIBICONV"
        install-name="libiconv113"
        add-path="prepend">v&gt;=1.13.1</depend>
      <depend program="perl" add-path="prepend"
        type="build">v==5.12.2</depend>
    </dependencies>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix5*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib"
  CC_LD_RT="-Wl,-blibpath:" ;;
*-aix*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib"
  CC_LD_RT="-Wl,-blibpath:"

  ARGS="ac_cv_func_getppriv=no" ;;
ia64*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  LDFLAGS="-Wl,+nodefaultrpath"
  CC_LD_RT="-Wl,+b," ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*)
  CC=cc CFLAGS="-c99 -Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0"
  CC_LD_RT="-Wl,-rpath,"

  ARGS="ac_cv_search_pthread_create=-lpthread ac_cv_prog_cc_c99=no" ;;
*-freebsd*)
  CFLAGS="-O2 -mtune=pentium4 -march=pentium4"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"
  CC_LD_RT="-Wl,-rpath," ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-osf*)
  CC=cc CFLAGS="-O2 -msym -arch ev5 -readonly_strings"
  CPPFLAGS="-D_REENTRANT"
  CC_LD_RT="-Wl,-rpath,"

  # isblank is declared in /usr/include.dtk/ctypes.h, but does not
  # exist.
  ARGS="--disable-acl ac_cv_search_pthread_create=-lpthread \
ac_cv_have_decl_isblank=no" ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4"
  CC_LD_RT="-R"

  ARGS="ac_cv_prog_cc_c99=no" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CC_LD_RT="-R"

  ARGS="ac_cv_prog_cc_c99=no" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xO2 -xtarget=generic -m32 -xarch=sparcvis"
  CC_LD_RT="-R"

  ARGS="ac_cv_prog_cc_c99=no" ;;
esac

${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CPPFLAGS="${SB_VAR_LIBGMP+-I$SB_VAR_LIBGMP_INC} ${CPPFLAGS+$CPPFLAGS}" \
LDFLAGS="${SB_VAR_LIBGMP+-L$SB_VAR_LIBGMP_LIB} ${LDFLAGS+$LDFLAGS} \
${SB_VAR_LIBGMP+${CC_LD_RT}$SB_VAR_LIBGMP_LIB}" \
${SB_VAR_LIBICONV+--with-libiconv-prefix=${SB_VAR_LIBICONV}} \
${SB_VAR_GETTEXT+--with-libintl-prefix=${SB_VAR_GETTEXT}} \
--program-prefix=g --disable-dependency-tracking ${ARGS+${ARGS}} \
--datarootdir=${_datadir} --datadir=${_datadir} \
--mandir="${SB_INSTALL_PREFIX}/man" \
--infodir="${SB_INSTALL_PREFIX}/info" \
--prefix=${SB_INSTALL_PREFIX}
]]>
    </configure>

    <test auto-include="0">
<![CDATA[
RUN_EXPENSIVE_TESTS=yes gmake check
]]>
    </test>

    <install>
<![CDATA[
gmake install

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/texinfo
${SB_PATH_INSTALL} -m 644 -o root -g 0 doc/*.texi \
${_docdir}/texinfo

# remove su and [
rm -f ${SB_INSTALL_PREFIX}/bin/g[
]]>
    </install>

    <licenses>
      <license path="gpl-3.license"/>

      <license path="gfdl-1.3.license"/>
    </licenses>

    <notes>
      <change from="8.10" to="8.11">
        <items name="Bug fixes">
          <item><para>cp -a --link would not create a hardlink to a
symlink, instead copying the symlink and then not preserving its
timestamp.</para></item>
          <item><para>cp now avoids FIEMAP issues with BTRFS before
Linux 2.6.38, which could result in corrupt copies of sparse
files.</para></item>
          <item><para>cut could segfault when invoked with a
user-specified output delimiter and an unbounded range like
"-f1234567890-".</para></item>
          <item><para>du would infloop when given
--files0-from=DIR</para></item>
          <item><para>sort no longer spawns 7 worker threads to sort 16
lines</para></item>
          <item><para>touch built on Solaris 9 would segfault when run
on Solaris 10</para></item>
          <item><para>wc would dereference a NULL pointer upon an early
out-of-memory error</para></item>
        </items>

        <items name="New features">
          <item><para>dd now accepts the 'nocache' flag to the iflag and
oflag options, which will discard any cache associated with the files,
or processed portion thereof.</para></item>
          <item><para>dd now warns that 'iflag=fullblock' should be
used, in various cases where partial reads can cause
issues.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>cp now avoids syncing files when possible, when
doing a FIEMAP copy. The sync is only needed on Linux kernels before
2.6.39.</para></item>
          <item><para>cp now copies empty extents efficiently, when
doing a FIEMAP copy. It no longer reads the zero bytes from the input,
and also can efficiently create a hole in the output file when
--sparse=always is specified.</para></item>
          <item><para>df now aligns columns consistently, and no longer
wraps entries with longer device identifiers, over two
lines.</para></item>
          <item><para>install now rejects its long-deprecated
--preserve_context option. Use --preserve-context instead.</para></item>
          <item><para>test now accepts "==" as a synonym for
"="</para></item>
        </items>
      </change>

      <change from="8.9" to="8.10">
        <items name="Bug fixes">
          <item><para>du would abort with a failed assertion when two
conditions are met: part of the hierarchy being traversed is moved to a
higher level in the directory tree, and there is at least one more
command line directory argument following the one containing the moved
sub-tree.</para></item>
          <item><para>join --header now skips the ordering check for the
first line even if the other file is empty.</para></item>
          <item><para>rm -f no longer fails for EINVAL or EILSEQ on file
systems that reject file names invalid for that file
system.</para></item>
          <item><para>uniq -f NUM no longer tries to process fields
after end of line.</para></item>
        </items>

        <items name="New features">
          <item><para>cp now copies sparse files efficiently on file
systems with FIEMAP support (ext4, btrfs, xfs, ocfs2).  Before, it had
to read 2^20 bytes when copying a 1MiB sparse file.  Now, it copies
bytes only for the non-sparse sections of a file.  Similarly, to induce
a hole in the output file, it had to detect a long sequence of zero
bytes.  Now, it knows precisely where each hole in an input file is, and
can reproduce them efficiently in the output file.  mv also benefits
when it resorts to copying, e.g., between file systems.</para></item>
          <item><para>join now supports -o 'auto' which will
automatically infer the output format from the first line in each file,
to ensure the same number of fields are output for each
line.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>join no longer reports disorder when one of the
files is empty. This allows one to use join as a field extractor like:
join -a1 -o 1.3,1.1 - /dev/null</para></item>
        </items>
      </change>

      <change from="8.8" to="8.9">
        <items name="Bug fixes">
          <item><para>split no longer creates files with a suffix length
that is dependent on the number of bytes or lines per
file.</para></item>
        </items>
      </change>

      <change from="8.7" to="8.8">
        <items name="Bug fixes">
          <item><para>cp -u no longer does unnecessary copying merely
because the source has finer-grained time stamps than the
destination.</para></item>
          <item><para>od now prints floating-point numbers without
losing information, and it no longer omits spaces between floating-point
columns in some cases.</para></item>
          <item><para>sort -u with at least two threads could attempt to
read through a corrupted pointer.</para></item>
          <item><para>sort with at least two threads and with blocked
output would busy-loop (spinlock) all threads, often using 100% of
available CPU cycles to do no work.  I.e., "sort &lt; big-file | less"
could waste a lot of power.</para></item>
          <item><para>sort with at least two threads no longer segfaults
due to use of pointers into the stack of an expired
thread.</para></item>
          <item><para>sort --compress no longer mishandles subprocesses'
exit statuses, no longer hangs indefinitely due to a bug in waiting for
subprocesses, and no longer generates many more than NMERGE
subprocesses.</para></item>
          <item><para>sort -m -o f f ... f no longer dumps core when
file descriptors are limited.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>sort will not create more than 8 threads by
default due to diminishing performance gains.  Also the --parallel
option is no longer restricted to the number of available
processors.</para></item>
        </items>

        <items name="New features">
          <item><para>split accepts the --number option to generate a
specific number of files.</para></item>
        </items>
      </change>

      <change from="8.6" to="8.7">
        <items name="Bug fixes">
          <item><para>cp, install, mv, and touch no longer crash when
setting file times on Solaris 10 Update 9.</para></item>
          <item><para>csplit no longer corrupts heap when writing more
than 999 files, nor does it leak memory for every chunk of input
processed</para></item>
          <item><para>tail -F once again notices changes in a currently
unavailable remote directory.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>cp --attributes-only now completely overrides
--reflink. Previously a reflink was needlessly attempted.</para></item>
          <item><para>stat's %X, %Y, and %Z directives once again print
only the integer part of seconds since the epoch.  This reverts a change
from coreutils-8.6, that was deemed unnecessarily disruptive. To obtain
a nanosecond-precision time stamp for %X use %.X; if you want (say) just
3 fractional digits, use %.3X. Likewise for %Y and %Z.</para></item>
          <item><para>stat's new %W format directive would print
floating point seconds. However, with the above change to %X, %Y and %Z,
we've made %W work the same way as the others.</para></item>
        </items>
      </change>

      <change from="8.5" to="8.6">
        <items name="Bug fixes">
          <item><para>du no longer multiply counts a file that is a
directory or whose link count is 1, even if the file is reached multiple
times by following symlinks or via multiple arguments.</para></item>
          <item><para>du -H and -L now consistently count pointed-to
files instead of symbolic links, and correctly diagnose dangling
symlinks.</para></item>
          <item><para>du --ignore=D now ignores directory D even when
that directory is found to be part of a directory cycle.  Before, du
would issue a "NOTIFY YOUR SYSTEM MANAGER" diagnostic and
fail.</para></item>
          <item><para>split now diagnoses read errors rather than
silently exiting.</para></item>
          <item><para>tac would perform a double-free when given an
input line longer than 16KiB.</para></item>
          <item><para>tail -F once again notices changes in a currently
unavailable directory, and works around a Linux kernel bug where inotify
runs out of resources.</para></item>
          <item><para>tr now consistently handles case conversion
character classes. In some locales, valid conversion specifications
caused tr to abort, while in all locales, some invalid specifications
were undiagnosed.</para></item>
        </items>

        <items name="New features">
          <item><para>cp now accepts the --attributes-only option to not
copy file data, which is useful for efficiently modifying
files.</para></item>
          <item><para>du recognizes -d N as equivalent to --max-depth=N,
for compatibility with FreeBSD.</para></item>
          <item><para>sort now accepts the --debug option, to highlight
the part of the line significant in the sort, and warn about
questionable options.</para></item>
          <item><para>sort now supports -d, -f, -i, -R, and -V in any
combination.</para></item>
          <item><para>stat now accepts the %m format directive to output
the mount point for a file.  It also accepts the %w and %W format
directives for outputting the birth time of a file, if one is
available.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>df now consistently prints the device name for a
bind mounted file, rather than its aliased target.</para></item>
          <item><para>du now uses less than half as much memory when
operating on trees with many hard-linked files.  With --count-links
(-l), or when operating on trees with no hard-linked files, there is no
change.</para></item>
          <item><para>ls -l now uses the traditional three field time
style rather than the wider two field numeric ISO style, in locales
where a style has not been specified.  The new approach has nicer
behavior in some locales, including English, which was judged to
outweigh the disadvantage of generating less-predictable and often worse
output in poorly-configured locales where there is an onus to specify
appropriate non-default styles.</para></item>
          <item><para>rm's -d now evokes an error;  before, it was
silently ignored.</para></item>
          <item><para>sort -g now uses long doubles for greater range
and precision.</para></item>
          <item><para>sort -h no longer rejects numbers with leading or
trailing ".", and no longer accepts numbers with multiple ".".  It now
considers all zeros to be equal.</para></item>
          <item><para>sort now uses the number of available processors
to parallelize the sorting operation.  The number of sorts run
concurrently can be limited with the --parallel option or with external
process control like taskset for example.</para></item>
          <item><para>stat now provides translated output when no format
is specified.</para></item>
          <item><para>stat no longer accepts the --context (-Z) option.
Initially it was merely accepted and ignored, for compatibility.
Starting two years ago, with coreutils-7.0, its use evoked a warning.
Printing the SELinux context of a file can be done with the %C format
directive, and the default output when no format is specified now
automatically includes %C when context information is
available.</para></item>
          <item><para>stat no longer accepts the %C directive when the
--file-system option is in effect, since security context is a file
attribute rather than a file system attribute.</para></item>
          <item><para>stat now outputs the full sub-second resolution
for the atime, mtime, and ctime values since the Epoch, when using the
%X, %Y, and %Z directives of the --format option.  This matches the fact
that %x, %y, and %z were already doing so for the human-readable
variant.</para></item>
          <item><para>touch's --file option is no longer recognized.
Use --reference=F (-r) instead.  --file has not been documented for 15
years, and its use has elicited a warning since
coreutils-7.1.</para></item>
          <item><para>truncate now supports setting file sizes relative
to a reference file. Also errors are no longer suppressed for
unsupported file types, and relative sizes are restricted to supported
file types.</para></item>
        </items>
      </change>

      <change from="8.4" to="8.5">
        <items name="Bug fixes">
          <item><para>cp and mv once again support preserving extended
attributes.</para></item>
          <item><para>cp now preserves "capabilities" when also
preserving file ownership.</para></item>
          <item><para>ls --color once again honors the 'NORMAL'
dircolors directive.</para></item>
          <item><para>sort -M now handles abbreviated months that are
aligned using blanks in the locale database.  Also locales with 8 bit
characters are handled correctly, including multi byte locales with the
caveat that multi byte characters are matched case
sensitively.</para></item>
          <item><para>sort again handles obsolescent key formats (+POS
-POS) correctly. Previously if -POS was specified, 1 field too many was
used in the sort.</para></item>
        </items>

        <items name="New features">
          <item><para>join now accepts the --header option, to treat
the first line of each file as a header line to be joined and printed
unconditionally.</para></item>
          <item><para>timeout now accepts the --kill-after option which
sends a kill signal to the monitored command if it's still running the
specified duration after the initial signal was sent.</para></item>
          <item><para>who: the "+/-" --mesg (-T) indicator of whether a
user/tty is accepting messages could be incorrectly listed as "+", when
in fact, the user was not accepting messages (mesg no).  Before, who
would examine only the permission bits, and not consider the group of
the TTY device file. Thus, if a login tty's group would change somehow
e.g., to "root", that would make it unwritable (via write(1)) by normal
users, in spite of whatever the permission bits might imply.  Now, when
configured using the --with-tty-group[=NAME] option, who also compares
the group of the TTY device with NAME (or "tty" if no group name is
specified).</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>ls --color no longer emits the final 3-byte
color-resetting escape sequence when it would be a no-op.</para></item>
          <item><para>join -t '' no longer emits an error and instead
operates on each line as a whole (even if they contain NUL
characters).</para></item>
        </items>
      </change>

      <change from="8.3" to="8.4">
        <items name="Bug fixes">
          <item><para>nproc --all is now guaranteed to be as large as
the count of available processors, which may not have been the case on
GNU/Linux systems with neither /proc nor /sys available.</para></item>
        </items>

        <items name="Build-related">
          <item><para>Work around a build failure when using buggy
&lt;sys/capability.h&gt;. Alternatively, configure with
--disable-libcap.</para></item>
          <item><para>Compilation would fail on systems using
glibc-2.7..2.9 due to changes in gnulib's wchar.h that tickled a bug in
at least those versions of glibc's own &lt;wchar.h&gt; header.  Now,
gnulib works around the bug in those older glibc &lt;wchar.h&gt;
headers.</para></item>
          <item><para>Building would fail with a link error (cp/copy.o)
when XATTR headers were installed without the corresponding library.
Now, configure detects that and disables xattr support, as one would
expect.</para></item>
        </items>
      </change>

      <change from="8.2" to="8.3">
        <items name="Bug fixes">
          <item><para>cp -p, install -p, mv, and touch -c could trigger
a spurious error message when using new glibc coupled with an old
kernel.</para></item>
          <item><para>ls -l --color no longer prints "argetm" in front
of dangling symlinks when the 'LINK target' directive was given to
dircolors.</para></item>
          <item><para>pr's page header was improperly formatted for
long file names.</para></item>
          <item><para>rm -r --one-file-system works once again. The
rewrite to make rm use fts introduced a regression whereby a commmand
of the above form would fail for all subdirectories.</para></item>
          <item><para>stat -f recognizes more file system types: k-afs,
fuseblk, gfs/gfs2, ocfs2, and rpc_pipefs. Also Minix V3 is displayed
correctly as minix3, not minux3.</para></item>
          <item><para>tail -f (inotify-enabled) once again works with
remote files. The use of inotify with remote files meant that any
changes to those files that was not done from the local system would go
unnoticed.</para></item>
          <item><para>tail -F (inotify-enabled) would abort when a
tailed file is repeatedly renamed-aside and then
recreated.</para></item>
          <item><para>tail -F (inotify-enabled) could fail to follow
renamed files. E.g., given a "tail -F a b" process, running "mv a b"
would make tail stop tracking additions to "b".</para></item>
          <item><para>touch -a and touch -m could trigger bugs in some
file systems, such as xfs or ntfs-3g, and fail to update
timestamps.</para></item>
          <item><para>wc now prints counts atomically so that
concurrent processes will not intersperse their output.</para></item>
        </items>
      </change>

      <change from="8.1" to="8.2">
        <items name="Bug fixes">
          <item><para>id's use of mgetgroups no longer writes beyond
the end of a malloc'd buffer</para></item>
          <item><para>id no longer crashes on systems without
supplementary group support.</para></item>
          <item><para>rm once again handles zero-length arguments
properly. The rewrite to make rm use fts introduced a regression
whereby a command like "rm a '' b" would fail to remove "a" and "b",
due to the presence of the empty string argument.</para></item>
          <item><para>sort is now immune to the signal handling of its
parent. Specifically sort now doesn't exit with an error message if it
uses helper processes for compression and its parent ignores CHLD
signals.</para></item>
          <item><para>tail without -f no longer access uninitialized
memory</para></item>
          <item><para>timeout is now immune to the signal handling of
its parent. Specifically timeout now doesn't exit with an error message
if its parent ignores CHLD signals.</para></item>
          <item><para>a user running "make distcheck" in the coreutils
source directory, with TMPDIR unset or set to the name of a
world-writable directory, and with a malicious user on the same system
was vulnerable to arbitrary code execution</para></item>
        </items>
      </change>

      <change from="8.0" to="8.1">
        <items name="Bug fixes">
          <item><para>chcon no longer exits immediately just because
SELinux is disabled. Even then, chcon may still be
useful.</para></item>
          <item><para>chcon, chgrp, chmod, chown and du now diagnose an
ostensible directory cycle and arrange to exit nonzero.  Before, they
would silently ignore the offending directory and all
"contents."</para></item>
          <item><para>env -u A=B now fails, rather than silently adding
A to the environment.  Likewise, printenv A=B silently ignores the
invalid name.</para></item>
          <item><para>ls --color now handles files with capabilities
correctly.  Previously files with capabilities were often not colored,
and also sometimes, files without capabilites were colored in
error.</para></item>
          <item><para>md5sum now prints checksums atomically so that
concurrent processes will not intersperse their output. This also
affected sum, sha1sum, sha224sum, sha384sum and
sha512sum.</para></item>
          <item><para>mktemp no longer leaves a temporary file behind
if it was unable to output the name of the file to
stdout.</para></item>
          <item><para>nice -n -1 PROGRAM now runs PROGRAM even when its
internal setpriority call fails with errno == EACCES.</para></item>
          <item><para>nice, nohup, and su now refuse to execute the
subsidiary program if they detect write failure in printing an
otherwise non-fatal warning message to stderr.</para></item>
          <item><para>stat -f recognizes more file system types: afs,
cifs, anon-inode FS, btrfs, cgroupfs, cramfs-wend, debugfs, futexfs,
hfs, inotifyfs, minux3, nilfs, securityfs, selinux, xenfs</para></item>
          <item><para>tail -f (inotify-enabled) now avoids a race
condition. Before, any data appended in the tiny interval between the
initial read-to-EOF and the inotify watch initialization would be
ignored initially (until more data was appended), or forever, if the
file were first renamed or unlinked or never modified.</para></item>
          <item><para>tail -F (inotify-enabled) now consistently tails
a file that has been replaced via renaming.  That operation provokes
either of two sequences of inotify events.  The less common sequence is
now handled as well.</para></item>
          <item><para>timeout now doesn't exit unless the command it is
monitoring does, for any specified signal.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>chroot, env, nice, and su fail with status 125,
rather than 1, on internal error such as failure to parse command line
arguments; this is for consistency with stdbuf and timeout, and avoids
ambiguity with the invoked command failing with status 1.  Likewise,
nohup fails with status 125 instead of 127.</para></item>
          <item><para>du (due to a change in gnulib's fts) can now
traverse NFSv4 automounted directories in which the stat'd device
number of the mount point differs during a traversal.  Before, it would
fail, because such a mismatch would usually represent a serious error
or a subversion attempt.</para></item>
          <item><para>echo and printf now interpret \e as the Escape
character (0x1B).</para></item>
          <item><para>rm -f /read-only-fs/nonexistent now succeeds and
prints no diagnostic on systems with an unlinkat syscall that sets
errno to EROFS in that case. Before, it would fail with a "Read-only
file system" diagnostic. Also, "rm /read-only-fs/nonexistent" now
reports "file not found" rather than the less precise "Read-only file
system" error.</para></item>
        </items>

        <items name="New programs">
          <item><para>nproc: Print the number of processing units
available to a process.</para></item>
        </items>

        <items name="New features">
          <item><para>env and printenv now accept the option --null
(-0), as a means to avoid ambiguity with newlines embedded in the
environment.</para></item>
          <item><para>md5sum --check now also accepts openssl-style
checksums. So do sha1sum, sha224sum, sha384sum and
sha512sum.</para></item>
          <item><para>mktemp now accepts the option --suffix to provide
a known suffix after the substitution in the template.  Additionally,
uses such as "mktemp fileXXXXXX.txt" are able to infer an appropriate
--suffix.</para></item>
          <item><para>touch now accepts the option --no-dereference
(-h), as a means to change symlink timestamps on platforms with enough
support.</para></item>
        </items>
      </change>

      <change from="7.6" to="8.0">
        <items name="Bug fixes">
          <item><para>cp --preserve=xattr and --archive now preserve
extended attributes even when the source file doesn't have write
access.</para></item>
          <item><para>touch -t [[CC]YY]MMDDhhmm[.ss] now accepts a
timestamp string ending in .60, to accommodate leap
seconds.</para></item>
          <item><para>ls --color now reverts to the color of a base
file type consistently when the color of a more specific type is
disabled.</para></item>
          <item><para>ls -LR exits with status 2, not 0, when it
encounters a cycle</para></item>
          <item><para>ls -is is now consistent with ls -lis in ignoring
values returned from a failed stat/lstat.  For example ls -Lis now
prints "?", not "0", for the inode number and allocated size of a
dereferenced dangling symlink.</para></item>
          <item><para>tail --follow --pid now avoids a race condition
where data written just before the process dies might not have been
output by tail. Also, tail no longer delays at all when the specified
pid is not live.</para></item>
        </items>

        <items name="Portability">
          <item><para>On Solaris 9, many commands would mistakenly
treat file/ the same as file.  Now, even on such a system, path
resolution obeys the POSIX rules that a trailing slash ensures that the
preceeding name is a directory or a symlink to a
directory.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>id no longer prints SELinux " context=..." when
the POSIXLY_CORRECT environment variable is set.</para></item>
          <item><para>readlink -f now ignores a trailing slash when
deciding if the last component (possibly via a dangling symlink) can be
created, since mkdir will succeed in that case.</para></item>
        </items>

        <items name="New features">
          <item><para>ln now accepts the options --logical (-L) and
--physical (-P), added by POSIX 2008.  The default behavior is -P on
systems like GNU/Linux where link(2) creates hard links to symlinks,
and -L on BSD systems where link(2) follows symlinks.</para></item>
          <item><para>stat: without -f, a command-line argument of "-"
now means standard input. With --file-system (-f), an argument of "-"
is now rejected. If you really must operate on a file named "-",
specify it as "./-" or use "--" to separate options from
arguments.</para></item>
        </items>

        <items name="Improvements">
          <item><para>rm: rewrite to use gnulib's fts This makes rm -rf
significantly faster (400-500%) in some pathological cases, and
slightly slower (20%) in at least one pathological case.</para></item>
          <item><para>rm -r deletes deep hierarchies more efficiently.
Before, execution time was quadratic in the depth of the hierarchy, now
it is merely linear. However, this improvement is not as pronounced as
might be expected for very deep trees, because prior to this change,
for any relative name length longer than 8KiB, rm -r would sacrifice
official conformance to avoid the disproportionate quadratic
performance penalty.  Leading to another improvement:</para></item>
          <item><para>rm -r is now slightly more standards-conformant
when operating on write-protected files with relative names longer than
8KiB.</para></item>
        </items>
      </change>

      <change from="7.5" to="7.6">
        <items name="Bug fixes">
          <item><para>cp, mv now ignore failure to preserve a symlink
time stamp, when it is due to their running on a kernel older than what
was implied by headers and libraries tested at configure
time.</para></item>
          <item><para>cp --reflink --preserve now preserves attributes
when cloning a file.</para></item>
          <item><para>cp --preserve=xattr no longer leaks resources on
each preservation failure.</para></item>
          <item><para>dd now exits with non-zero status when it
encounters a write error while printing a summary to
stderr.</para></item>
          <item><para>dd cbs=N conv=unblock would fail to print a final
newline when the size of the input was not a multiple of N
bytes.</para></item>
          <item><para>df no longer requires that each command-line
argument be readable</para></item>
          <item><para>ls -i now prints consistent inode numbers also
for mount points. This makes ls -i DIR less efficient on systems with
dysfunctional readdir, because ls must stat every file in order to
obtain a guaranteed-valid inode number.</para></item>
          <item><para>tail -f (inotify-enabled) now flushes any initial
output before blocking. Before, this would print nothing and wait:
stdbuf -o 4K tail -f /etc/passwd Note that this bug affects tail -f
only when its standard output is buffered, which is relatively
unusual.</para></item>
          <item><para>tail -f once again works with standard input.
inotify-enabled tail -f would fail when operating on a nameless stdin.
I.e., tail -f &lt; /etc/passwd would say "tail: cannot watch `-': No such
file or directory", yet the relatively baroque tail -f /dev/stdin &lt;
/etc/passwd would work.  Now, the offending usage causes tail to revert
to its conventional sleep-based (i.e., not inotify-based)
implementation.</para></item>
        </items>

        <items name="Portability">
          <item><para>ln, link: link f z/ would mistakenly succeed on
Solaris 10, given an existing file, f, and nothing named "z".  ln -T f
z/ has the same problem. Each would mistakenly create "z" as a link to
"f".  Now, even on such a system, each command reports the error, e.g.,
link: cannot create link `z/' to `f': Not a directory</para></item>
        </items>

        <items name="New features">
          <item><para>cp --reflink accepts a new "auto" parameter which
falls back to a standard copy if creating a copy-on-write clone is not
possible.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>tail -f now ignores "-" when stdin is a pipe or
FIFO. tail-with-no-args now ignores -f unconditionally when stdin is a
pipe or FIFO. Before, it would ignore -f only when no file argument was
specified, and then only when POSIXLY_CORRECT was set.  Now, :|tail -f
- terminates immediately.  Before, it would block
indefinitely.</para></item>
        </items>
      </change>

      <change from="7.4" to="7.5">
        <items name="Bug fixes">
          <item><para>dd's oflag=direct option now works even when the
size of the input is not a multiple of e.g., 512 bytes.</para></item>
          <item><para>dd now handles signals consistently even when
they're received before data copying has started.</para></item>
          <item><para>install runs faster again with SELinux
enabled</para></item>
          <item><para>ls -1U (with two or more arguments, at least one
a nonempty directory) would print entry names *before* the name of the
containing directory. Also fixed incorrect output of ls -1RU and ls
-1sU.</para></item>
          <item><para>sort now correctly ignores fields whose ending
position is specified before the start position. Previously in numeric
mode the remaining part of the line after the start position was used
as the sort key.</para></item>
          <item><para>truncate -s failed to skip all whitespace in the
option argument in some locales.</para></item>
        </items>

        <items name="New programs">
          <item><para>stdbuf: A new program to run a command with
modified stdio buffering for its standard streams.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>ls --color: files with multiple hard links are no
longer colored differently by default. That can be enabled by changing
the LS_COLORS environment variable. You can control that using the
MULTIHARDLINK dircolors input variable which corresponds to the 'mh'
LS_COLORS item. Note these variables were renamed from 'HARDLINK' and
'hl' which were available since coreutils-7.1 when this feature was
introduced.</para></item>
        </items>

        <items name="Deprecated options">
          <item><para>nl --page-increment: deprecated in favor of
--line-increment, the new option maintains the previous semantics and
the same short option, -i.</para></item>
        </items>

        <items name="New features">
          <item><para>chroot now accepts the options --userspec and
--groups.</para></item>
          <item><para>cp accepts a new option, --reflink: create a
lightweight copy using copy-on-write (COW).  This is currently only
supported within a btrfs file system.</para></item>
          <item><para>cp now preserves time stamps on symbolic links,
when possible</para></item>
          <item><para>sort accepts a new option, --human-numeric-sort
(-h): sort numbers while honoring human readable suffixes like KiB and
MB etc.</para></item>
          <item><para>tail --follow now uses inotify when possible, to
be more responsive to file changes and more efficient when monitoring
many files.</para></item>
        </items>
      </change>

      <change from="7.3" to="7.4">
        <items name="Bug fixes">
          <item><para>date -d 'next mon', when run on a Monday, now
prints the date 7 days in the future rather than the current day.  Same
for any other day-of-the-week name, when run on that same day of the
week.</para></item>
          <item><para>date -d tuesday, when run on a Tuesday -- using
date built from the 7.3 release tarball, not from git -- would print
the date 7 days in the future. Now, it works properly and prints the
current date.  That was due to human error (including not-committed
changes in a release tarball) and the fact that there is no check to
detect when the gnulib/ git submodule is dirty.</para></item>
        </items>

        <items name="Build-related">
          <item><para>make check: two tests have been
corrected</para></item>
        </items>

        <items name="Portability">
          <item><para>There have been some ACL-related portability
fixes for *BSD, inherited from gnulib.</para></item>
        </items>
      </change>

      <change from="7.2" to="7.3">
        <items name="Bug fixes">
          <item><para>cp now diagnoses failure to preserve
selinux/xattr attributes when --preserve=context,xattr is specified in
combination with -a. Also, cp no longer suppresses
attribute-preservation diagnostics when preserving SELinux context was
explicitly requested.</para></item>
          <item><para>ls now aligns output correctly in the presence of
abbreviated month names from the locale database that have differing
widths.</para></item>
          <item><para>ls -v and sort -V now order names like "#.b#"
properly</para></item>
          <item><para>mv: do not print diagnostics when failing to
preserve xattr's on file systems without xattr support.</para></item>
          <item><para>sort -m no longer segfaults when its output file
is also an input file. E.g., with this, touch 1; sort -m -o 1 1, sort
would segfault.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>shred, sort, shuf: now use an internal
pseudorandom generator by default. This is mainly noticable in shred
where the 3 random passes it does by default should proceed at the
speed of the disk.  Previously /dev/urandom was used if available,
which is relatively slow on GNU/Linux systems.</para></item>
        </items>

        <items name="Improved robustness">
          <item><para>cp would exit successfully after copying less
than the full contents of a file larger than ~4000 bytes from a
linux-/proc file system to a destination file system with a fundamental
block size of 4KiB or greater. Reading into a 4KiB-or-larger buffer,
cp's "read" syscall would return a value smaller than 4096, and cp
would interpret that as EOF (POSIX allows this).  This optimization,
now removed, saved 50% of cp's read syscalls when copying small files.
Affected linux kernels: at least 2.6.9 through 2.6.29.</para></item>
        </items>

        <items name="Portability">
          <item><para>df now pre-mounts automountable directories even
with automounters for which stat-like syscalls no longer provoke
mounting.  Now, df uses open.</para></item>
          <item><para>`id -G $USER` now works correctly even on Darwin
and NetBSD. Previously it would either truncate the group list to 10,
or go into an infinite loop, due to their non-standard getgrouplist
implementations.</para></item>
        </items>
      </change>

      <change from="7.1" to="7.2">
        <items name="New features">
          <item><para>pwd now accepts the options --logical (-L) and
--physical (-P).  For compatibility with existing scripts, -P is the
default behavior unless POSIXLY_CORRECT is requested.</para></item>
        </items>

        <items name="Bug fixes">
          <item><para>cat once again immediately outputs data it has
processed. Previously it would have been buffered and only output if
enough data was read, or on process exit.</para></item>
          <item><para>comm's new --check-order option would fail to
detect disorder on any pair of lines where one was a prefix of the
other.  For example, this would fail to report the disorder: printf
'Xb\nX\n'&gt;k; comm --check-order k k</para></item>
          <item><para>cp once again diagnoses the invalid "cp -rl dir
dir" right away, rather than after creating a very deep dir/dir/dir/...
hierarchy. The bug strikes only with both --recursive (-r, -R) and
--link (-l).</para></item>
          <item><para>ls --sort=version (-v) sorted names beginning
with "." inconsistently. Now, names that start with "." are always
listed before those that don't.</para></item>
          <item><para>pr: fix the bug whereby --indent=N (-o) did not
indent header lines</para></item>
          <item><para>sort now handles specified key ends correctly.
Previously -k1,1b would have caused leading space from field 2 to be
included in the sort while -k2,3.0 would have not included field
3.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>cat,cp,install,mv,split: these programs now read
and write a minimum of 32KiB at a time.  This was seen to double
throughput when reading cached files on GNU/Linux-based
systems.</para></item>
          <item><para>cp -a now tries to preserve extended attributes
(xattr), but does not diagnose xattr-preservation failure.  However, cp
--preserve=all still does.</para></item>
          <item><para>ls --color: hard link highlighting can be now
disabled by changing the LS_COLORS environment variable. To disable it
you can add something like this to your profile: eval `dircolors | sed
s/hl=[^:]*:/hl=:/`</para></item>
        </items>
      </change>

      <change from="7.0" to="7.1">
        <items name="New features">
          <item><para>Add extended attribute support available on
certain filesystems like ext2 and XFS. cp: Tries to copy xattrs when
--preserve=xattr or --preserve=all specified mv: Always tries to copy
xattrs install: Never copies xattrs</para></item>
          <item><para>cp and mv accept a new option, --no-clobber (-n):
silently refrain from overwriting any existing destination
file</para></item>
          <item><para>dd accepts iflag=cio and oflag=cio to open the
file in CIO (concurrent I/O) mode where this feature is
available.</para></item>
          <item><para>install accepts a new option, --compare (-C):
compare each pair of source and destination files, and if the
destination has identical content and any specified owner, group,
permissions, and possibly SELinux context, then do not modify the
destination at all.</para></item>
          <item><para>ls --color now highlights hard linked files,
too</para></item>
          <item><para>stat -f recognizes the Lustre file system
type</para></item>
        </items>

        <items name="Bug fixes">
          <item><para>chgrp, chmod, chown --silent (--quiet, -f) no
longer print some diagnostics</para></item>
          <item><para>cp uses much less memory in some
situations</para></item>
          <item><para>cp -a now correctly tries to preserve SELinux
context (announced in 6.9.90), doesn't inform about failure, unlike
with --preserve=all</para></item>
          <item><para>du --files0-from=FILE no longer reads all of FILE
into RAM before processing the first file name</para></item>
          <item><para>seq 9223372036854775807 9223372036854775808 now
prints only two numbers on systems with extended long double support
and good library support. Even with this patch, on some systems, it
still produces invalid output, from 3 to at least 1026 lines
long.</para></item>
          <item><para>seq -w now accounts for a decimal point added to
the last number to correctly print all numbers to the same
width.</para></item>
          <item><para>wc --files0-from=FILE no longer reads all of FILE
into RAM, before processing the first file name, unless the list of
names is known to be small enough.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>cp and mv: the --reply={yes,no,query} option has
been removed. Using it has elicited a warning for the last three
years.</para></item>
          <item><para>dd: user specified offsets that are too big are
handled better. Previously, erroneous parameters to skip and seek could
result in redundant reading of the file with no warnings or
errors.</para></item>
          <item><para>du: -H (initially equivalent to --si) is now
equivalent to --dereference-args, and thus works as POSIX
requires</para></item>
          <item><para>shred: now does 3 overwrite passes by default
rather than 25.</para></item>
          <item><para>ls -l now marks SELinux-only files with the less
obtrusive '.', rather than '+'.  A file with any other combination of
MAC and ACL is still marked with a '+'.</para></item>
        </items>
      </change>

      <change from="6.12" to="7.0">
        <items name="New programs">
          <item><para>timeout: Run a command with bounded time.
truncate: Set the size of a file to a specified size.</para></item>
        </items>

        <items name="New features">
          <item><para>chgrp, chmod, chown, chcon, du, rm: now all
display linear performance, even when operating on million-entry
directories on ext3 and ext4 file systems.  Before, they would exhibit
O(N^2) performance, due to linear per-entry seek time cost when
operating on entries in readdir order. Rm was improved directly, while
the others inherit the improvement from the newer version of fts in
gnulib.</para></item>
          <item><para>comm now verifies that the inputs are in sorted
order.  This check can be turned off with the --nocheck-order
option.</para></item>
          <item><para>comm accepts new option, --output-delimiter=STR,
that allows specification of an output delimiter other than the default
single TAB.</para></item>
          <item><para>cp and mv: the deprecated --reply=X option is now
also undocumented.</para></item>
          <item><para>dd accepts iflag=fullblock to make it accumulate
full input blocks. With this new option, after a short read, dd
repeatedly calls read, until it fills the incomplete block, reaches
EOF, or encounters an error.</para></item>
          <item><para>df accepts a new option --total, which produces a
grand total of all arguments after all arguments have been
processed.</para></item>
          <item><para>If the GNU MP library is available at configure
time, factor and expr support arbitrarily large numbers.  Pollard's rho
algorithm is used to factor large numbers.</para></item>
          <item><para>install accepts a new option --strip-program to
specify the program used to strip binaries.</para></item>
          <item><para>ls now colorizes files with capabilities if
libcap is available</para></item>
          <item><para>ls -v now uses filevercmp function as sort
predicate (instead of strverscmp)</para></item>
          <item><para>md5sum now accepts the new option, --quiet, to
suppress the printing of 'OK' messages.  sha1sum, sha224sum, sha384sum,
and sha512sum accept it, too.</para></item>
          <item><para>sort accepts a new option, --files0-from=F, that
specifies a file containing a null-separated list of files to sort.
This list is used instead of filenames passed on the command-line to
avoid problems with maximum command-line (argv) length.</para></item>
          <item><para>sort accepts a new option --batch-size=NMERGE,
where NMERGE represents the maximum number of inputs that will be
merged at once. When processing more than NMERGE inputs, sort uses
temporary files.</para></item>
          <item><para>sort accepts a new option --version-sort (-V,
--sort=version), specifying that ordering is to be based on
filevercmp.</para></item>
        </items>

        <items name="Bug fixes">
          <item><para>chcon --verbose now prints a newline after each
message</para></item>
          <item><para>od no longer suffers from platform bugs in
printf(3).  This is probably most noticeable when using 'od -tfL' to
print long doubles.</para></item>
          <item><para>seq -0.1 0.1 2 now prints 2,0 when locale's
decimal point is ",". Before, it would mistakenly omit the final number
in that example.</para></item>
          <item><para>shuf honors the --zero-terminated (-z) option,
even with --input-range=LO-HI</para></item>
          <item><para>shuf --head-count is now correctly documented.
The documentation previously claimed it was called
--head-lines.</para></item>
        </items>

        <items name="Improvements">
          <item><para>Improved support for access control lists (ACLs):
On MacOS X, Solaris 7..10, HP-UX 11, Tru64, AIX, IRIX 6.5, and Cygwin,
"ls -l" now displays the presence of an ACL on a file via a '+' sign
after the mode, and "cp -p" copies ACLs.</para></item>
          <item><para>join has significantly better performance due to
better memory management</para></item>
          <item><para>ls now uses constant memory when not sorting and
using one_per_line format, no matter how many files are in a given
directory</para></item>
          <item><para>od now aligns fields across lines when printing
multiple -t specifiers, and no longer prints fields that resulted
entirely from padding the input out to the least common multiple
width.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>stat's --context (-Z) option has always been a
no-op. Now it evokes a warning that it is obsolete and will be
removed.</para></item>
        </items>
      </change>

      <change from="6.11" to="6.12">
        <items name="Bug fixes">
          <item><para>chcon, runcon: --help output now includes the
bug-reporting address</para></item>
          <item><para>cp -p copies permissions more portably.  For
example, on MacOS X 10.5, "cp -p some-fifo some-file" no longer fails
while trying to copy the permissions from the some-fifo
argument.</para></item>
          <item><para>id with no options now prints the SELinux
context only when invoked with no USERNAME argument.</para></item>
          <item><para>id and groups once again print the AFS-specific
nameless group-ID (PAG). Printing of such large-numbered, kernel-only
(not in /etc/group) group-IDs was suppressed in 6.11 due to ignorance
that they are useful.</para></item>
          <item><para>uniq: avoid subtle field-skipping malfunction
due to isblank misuse. In some locales on some systems, isblank(240)
(aka &amp;nbsp) is nonzero. On such systems, uniq --skip-fields=N
would fail to skip the proper number of fields for some
inputs.</para></item>
          <item><para>tac: avoid segfault with --regex (-r) and
multiple files, e.g., "echo &gt; x; tac -r x x".  [bug present at
least in textutils-1.8b, from 1992]</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>install once again sets SELinux context, when
possible [it was deliberately disabled in 6.9.90]</para></item>
        </items>
      </change>

      <change from="6.10" to="6.11">
        <items name="Bug fixes">
          <item><para>configure --enable-no-install-program=groups now
works.</para></item>
          <item><para>"cp -fR fifo E" now succeeds with an existing E.
Before this fix, using -fR to copy a fifo or "special" file onto an
existing file would fail with EEXIST.  Now, it once again unlinks the
destination before trying to create the destination file.  [bug
introduced in coreutils-5.90]</para></item>
          <item><para>dd once again works with unnecessary options
like if=/dev/stdin and of=/dev/stdout.  [bug introduced in
fileutils-4.0h]</para></item>
          <item><para>id now uses getgrouplist, when possible.  This
results in much better performance when there are many users and/or
groups.</para></item>
          <item><para>ls no longer segfaults on files in /proc when
linked with an older version of libselinux.  E.g., ls -l /proc/sys
would dereference a NULL pointer.</para></item>
          <item><para>md5sum would segfault for invalid BSD-style
input, e.g., echo 'MD5 (' | md5sum -c -  Now, md5sum ignores that
line. sha1sum, sha224sum, sha384sum, and sha512sum are affected, too.
[bug introduced in coreutils-5.1.0]</para></item>
          <item><para>md5sum -c would accept a NUL-containing checksum
string like "abcd\0..." and would unnecessarily read and compute the
checksum of the named file, and then compare that checksum to the
invalid one: guaranteed to fail. Now, it recognizes that the line is
not valid and skips it. sha1sum, sha224sum, sha384sum, and sha512sum
are affected, too. [bug present in the original version, in
coreutils-4.5.1, 1995]</para></item>
          <item><para>"mkdir -Z x dir" no longer segfaults when
diagnosing invalid context "x" mkfifo and mknod would fail similarly.
Now they're fixed.</para></item>
          <item><para>mv would mistakenly unlink a destination file
before calling rename, when the destination had two or more hard
links.  It no longer does that. [bug introduced in
coreutils-5.3.0]</para></item>
          <item><para>"paste -d'\' file" no longer overruns memory
(heap since coreutils-5.1.2, stack before then) [bug present in the
original version, in 1992]</para></item>
          <item><para>"pr -e" with a mix of backspaces and TABs no
longer corrupts the heap [bug present in the original version, in
1992]</para></item>
          <item><para>"ptx -F'\' long-file-name" would overrun a
malloc'd buffer and corrupt the heap.  That was triggered by a lone
backslash (or odd number of them) at the end of the option argument to
--flag-truncation=STRING (-F), --word-regexp=REGEXP (-W), or
--sentence-regexp=REGEXP (-S).</para></item>
          <item><para>"rm -r DIR" would mistakenly declare to be
"write protected" -- and prompt about -- full DIR-relative names
longer than MIN (PATH_MAX, 8192).</para></item>
          <item><para>"rmdir --ignore-fail-on-non-empty" detects and
ignores the failure in more cases when a directory is
empty.</para></item>
          <item><para>"seq -f % 1" would issue the erroneous
diagnostic "seq: memory exhausted" rather than reporting the invalid
string format. [bug introduced in coreutils-6.0]</para></item>
        </items>

        <items name="New features">
          <item><para>join now verifies that the inputs are in sorted
order.  This check can be turned off with the --nocheck-order
option.</para></item>
          <item><para>sort accepts the new option --sort=WORD, where
WORD can be one of general-numeric, month, numeric or random.  These
are equivalent to the options --general-numeric-sort/-g,
--month-sort/-M, --numeric-sort/-n and --random-sort/-R,
resp.</para></item>
        </items>

        <items name="Improvements">
          <item><para>id and groups work around an AFS-related bug
whereby those programs would print an invalid group number, when given
no user-name argument.</para></item>
          <item><para>ls --color no longer outputs unnecessary escape
sequences</para></item>
          <item><para>seq gives better diagnostics for invalid
formats.</para></item>
        </items>

        <items name="Portability">
          <item><para>rm now works properly even on systems like BeOS
and Haiku, which have negative errno values.</para></item>
        </items>

        <items name="Consistency">
          <item><para>install, mkdir, rmdir and split now write
--verbose output to stdout, not to stderr.</para></item>
        </items>
      </change>

      <change from="6.9.92" to="6.10">
        <items name="Bug fixes">
          <item><para>Fix a non-portable use of sed in configure.ac.
[bug introduced in coreutils-6.9.92]</para></item>
        </items>
      </change>

      <change from="6.9.91" to="6.9.92">
        <items name="Bug fixes">
          <item><para>cp --parents no longer uses uninitialized memory
when restoring the permissions of a just-created destination
directory. [bug introduced in coreutils-6.9.90]</para></item>
          <item><para>tr's case conversion would fail in a locale with
differing numbers of lower case and upper case characters.  E.g., this
would fail: env LC_CTYPE=en_US.ISO-8859-1 tr '[:upper:]' '[:lower:]'
[bug introduced in coreutils-6.9.90]</para></item>
        </items>

        <items name="Improvements">
          <item><para>"touch -d now
writable-but-owned-by-someone-else" now succeeds whenever that same
command would succeed without "-d now". Before, it would work fine
with no -d option, yet it would fail with the ostensibly-equivalent
"-d now".</para></item>
        </items>
      </change>

      <change from="6.9.90" to="6.9.91">
        <items name="Bug fixes">
          <item><para>"ls -l" would not output "+" on SELinux hosts
unless -Z was also given.</para></item>
          <item><para>"rm" would fail to unlink a non-directory when
run in an environment in which the user running rm is capable of
unlinking a directory. [bug introduced in coreutils-6.9]</para></item>
        </items>
      </change>

      <change from="6.9" to="6.9.90">
        <items name="New programs">
          <item><para>arch: equivalent to uname -m, not installed by
default But don't install this program on Solaris
systems.</para></item>
          <item><para>chcon: change the SELinux security context of a
file</para></item>
          <item><para>mktemp: create a temporary file or directory (or
names)</para></item>
          <item><para>runcon: run a program in a different SELinux
security context</para></item>
        </items>

        <items name="Programs no longer installed by default">
          <item><para>hostname, su</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>cp, by default, refuses to copy through a
dangling destination symlink Set POSIXLY_CORRECT if you require the
old, risk-prone behavior.</para></item>
          <item><para>pr -F no longer suppresses the footer or the
first two blank lines in the header.  This is for compatibility with
BSD and POSIX.</para></item>
          <item><para>tr now warns about an unescaped backslash at end
of string. The tr from coreutils-5.2.1 and earlier would fail for such
usage, and Solaris' tr ignores that final byte.</para></item>
        </items>

        <items name="New features">
          <item><para>Add SELinux support:</para>
          <unorderedlist>
            <item><para>cp accepts new --preserve=context
option.</para></item>
            <item><para>"cp -a" works with SELinux:</para>
            <para>Now, cp -a attempts to preserve context, but
failure to do so does not change cp's exit status.  However "cp
--preserve=context" is similar, but failure *does* cause cp to exit
with nonzero status.</para></item>
            <item><para>install accepts new "-Z, --context=C"
option.</para></item>
            <item><para>id accepts new "-Z" option.</para></item>
            <item><para>stat honors the new %C format directive:
SELinux security context string</para></item>
            <item><para>ls accepts a slightly modified -Z
option.</para></item>
            <item><para>ls: contrary to Fedora version, does not
accept --lcontext and --scontext</para></item>
          </unorderedlist></item>
          <item><para>The following commands and options now support
the standard size suffixes kB, M, MB, G, GB, and so on for T, P, Y, Z,
and Y: head -c, head -n, od -j, od -N, od -S, split -b, split -C, tail
-c, tail -n.</para></item>
          <item><para>cp -p tries to preserve the GID of a file even
if preserving the UID is not possible.</para></item>
          <item><para>uniq accepts a new option: --zero-terminated
(-z).  As with the sort option of the same name, this makes uniq
consume and produce NUL-terminated lines rather than
newline-terminated lines.</para></item>
          <item><para>wc no longer warns about character decoding
errors in multibyte locales. This means for example that "wc /bin/sh"
now produces normal output (though the word count will have no real
meaning) rather than many error messages.</para></item>
        </items>

        <items name="New build options">
          <item><para>By default, "make install" no longer attempts to
install (or even build) su. To change that, use ./configure
--enable-install-program=su. If you also want to install the new
"arch" program, do this: ./configure
--enable-install-program=arch,su.</para></item>
          <item><para>You can inhibit the compilation and installation
of selected programs at configure time.  For example, to avoid
installing "hostname" and "uptime", use ./configure
--enable-no-install-program=hostname,uptime Note: currently, "make
check" passes, even when arch and su are not built (that's the new
default). However, if you inhibit the building and installation of
other programs, don't be surprised if some parts of "make check"
fail.</para></item>
        </items>

        <items name="Remove deprecated options">
          <item><para>df no longer accepts the --kilobytes
option.</para></item>
          <item><para>du no longer accepts the --kilobytes or
--megabytes options.</para></item>
          <item><para>ls no longer accepts the --kilobytes
option.</para></item>
          <item><para>ptx longer accepts the --copyright
option.</para></item>
          <item><para>who no longer accepts -i or
--idle.</para></item>
          <item><para>Improved robustness</para></item>
          <item><para>ln -f can no longer silently clobber a
just-created hard link. In some cases, ln could be seen as being
responsible for data loss. For example, given directories a, b, c, and
files a/f and b/f, we should be able to do this safely: ln -f a/f b/f
c &amp;&amp; rm -f a/f b/f However, before this change, ln would
succeed, and thus cause the loss of the contents of a/f.</para></item>
          <item><para>stty no longer silently accepts certain invalid
hex values in its 35-colon command-line argument</para></item>
        </items>

        <items name="Bug fixes">
          <item><para>chmod no longer ignores a dangling symlink.
Now, chmod fails with a diagnostic saying that it cannot operate on
such a file. [bug introduced in coreutils-5.1.0]</para></item>
          <item><para>cp attempts to read a regular file, even if stat
says it is empty. Before, "cp /proc/cpuinfo c" would create an empty
file when the kernel reports stat.st_size == 0, while "cat
/proc/cpuinfo &gt; c" would "work", and create a nonempty one. [bug
introduced in coreutils-6.0]</para></item>
          <item><para>cp --parents no longer mishandles symlinks to
directories in file name components in the source, e.g., "cp --parents
symlink/a/b d" no longer fails.  Also, 'cp' no longer considers a
destination symlink to be the same as the referenced file when copying
links or making backups.  For example, if SYM is a symlink to FILE,
"cp -l FILE SYM" now reports an error instead of silently doing
nothing.  The behavior of 'cp' is now better documented when the
destination is a symlink.</para></item>
          <item><para>"cp -i --update older newer" no longer prompts;
same for mv</para></item>
          <item><para>"cp -i" now detects read errors on standard
input, and no longer consumes too much seekable input; same for ln,
install, mv, and rm.</para></item>
          <item><para>cut now diagnoses a range starting with zero
(e.g., -f 0-2) as invalid; before, it would treat it as if it started
with 1 (-f 1-2).</para></item>
          <item><para>"cut -f 2-0" now fails; before, it was
equivalent to "cut -f 2-"</para></item>
          <item><para>cut now diagnoses the '-' in "cut -f -" as an
invalid range, rather than interpreting it as the unlimited range,
"1-".</para></item>
          <item><para>date -d now accepts strings of the form e.g.,
'YYYYMMDD +N days', in addition to the usual 'YYYYMMDD N
days'.</para></item>
          <item><para>du -s now includes the size of any
stat'able-but-inaccessible directory in the total size.</para></item>
          <item><para>du (without -s) prints whatever it knows of the
size of an inaccessible directory.  Before, du would print nothing for
such a directory.</para></item>
          <item><para>ls -x DIR would sometimes output the wrong
string in place of the first entry.  [introduced in
coreutils-6.8]</para></item>
          <item><para>ls --color would mistakenly color a dangling
symlink as if it were a regular symlink.  This would happen only when
the dangling symlink was not a command-line argument and in a
directory with d_type support. [introduced in
coreutils-6.0]</para></item>
          <item><para>ls --color, (with a custom LS_COLORS envvar
value including the ln=target attribute) would mistakenly output the
string "target" before the name of each symlink.  [introduced in
coreutils-6.0]</para></item>
          <item><para>od's --skip (-j) option now works even when the
kernel says that a nonempty regular file has stat.st_size = 0.  This
happens at least with files in /proc and linux-2.6.22.</para></item>
          <item><para>"od -j L FILE" had a bug: when the number of
bytes to skip, L, is exactly the same as the length of FILE, od would
skip *no* bytes.  When the number of bytes to skip is exactly the sum
of the lengths of the first N files, od would skip only the first N-1
files. [introduced in textutils-2.0.9]</para></item>
          <item><para>./printf %.10000000f 1 could get an internal
ENOMEM error and generate no output, yet erroneously exit with status
0.  Now it diagnoses the error and exits with nonzero status.
[present in initial implementation]</para></item>
          <item><para>seq no longer mishandles obvious cases like "seq
0 0.000001 0.000003", so workarounds like "seq 0 0.000001 0.0000031"
are no longer needed.</para></item>
          <item><para>seq would mistakenly reject some valid format
strings containing %%, and would mistakenly accept some invalid ones.
e.g., %g%% and %%g, resp.</para></item>
          <item><para>"seq .1 .1" would mistakenly generate no output
on some systems</para></item>
          <item><para>Obsolete sort usage with an invalid
ordering-option character, e.g., "env _POSIX2_VERSION=199209 sort +1x"
no longer makes sort free an invalid pointer [introduced in
coreutils-6.5]</para></item>
          <item><para>sorting very long lines (relative to the amount
of available memory) no longer provokes unaligned memory
access</para></item>
          <item><para>split --line-bytes=N (-C N) no longer creates an
empty file [this bug is present at least as far back as textutils-1.22
(Jan, 1997)]</para></item>
          <item><para>tr -c no longer aborts when translating with
Set2 larger than the complement of Set1.  [present in the original
version, in 1992]</para></item>
          <item><para>tr no longer rejects an unmatched [:lower:] or
[:upper:] in SET1. [present in the original version]</para></item>
        </items>
      </change>

      <change from="6.8" to="6.9">
        <items name="Bug fixes">
          <item><para>cp -x (--one-file-system) would fail to set
mount point permissions</para></item>
          <item><para>The default block size and output format for df
-P are now unaffected by the DF_BLOCK_SIZE, BLOCK_SIZE, and BLOCKSIZE
environment variables.  It is still affected by POSIXLY_CORRECT,
though.</para></item>
          <item><para>Using pr -m -s (i.e. merging files, with TAB as
the output separator) no longer inserts extraneous spaces between
output columns.</para></item>
        </items>
      </change>

      <change from="6.7" to="6.8">
        <items name="Bug fixes">
          <item><para>chgrp, chmod, and chown now honor the
--preserve-root option. Before, they would warn, yet continuing
traversing and operating on /.</para></item>
          <item><para>chmod no longer fails in an environment (e.g., a
chroot) with openat support but with insufficient /proc
support.</para></item>
          <item><para>"cp --parents F/G D" no longer creates a
directory D/F when F is not a directory (and F/G is therefore
invalid).</para></item>
          <item><para>"cp --preserve=mode" would create directories
that briefly had too-generous permissions in some cases.  For example,
when copying a directory with permissions 777 the destination
directory might temporarily be setgid on some file systems, which
would allow other users to create subfiles with the same group as the
directory.  Fix similar problems with 'install' and
'mv'.</para></item>
          <item><para>cut no longer dumps core for usage like "cut
-f2- f1 f2" with two or more file arguments.  This was due to a
double-free bug, introduced in coreutils-5.3.0.</para></item>
          <item><para>dd bs= operands now silently override any later
ibs= and obs= operands, as POSIX and tradition require.</para></item>
          <item><para>"ls -FRL" always follows symbolic links on
Linux.  Introduced in coreutils-6.0.</para></item>
          <item><para>A cross-partition "mv /etc/passwd ~" (by
non-root) now prints a reasonable diagnostic.  Before, it would print
this: "mv: cannot remove `/etc/passwd': Not a
directory".</para></item>
          <item><para>pwd and "readlink -e ." no longer fail
unnecessarily when a parent directory is unreadable.</para></item>
          <item><para>rm (without -f) could prompt when it shouldn't,
or fail to prompt when it should, when operating on a full name longer
than 511 bytes and getting an ENOMEM error while trying to form the
long name.</para></item>
          <item><para>rm could mistakenly traverse into the wrong
directory under unusual conditions: when a full name longer than 511
bytes specifies a search-only directory, and when forming that name
fails with ENOMEM, rm would attempt to open a truncated-to-511-byte
name with the first five bytes replaced with "[...]".  If such a
directory were to actually exist, rm would attempt to remove
it.</para></item>
          <item><para>"rm -rf /etc/passwd" (run by non-root) now
prints a diagnostic. Before it would print nothing.</para></item>
          <item><para>"rm --interactive=never F" no longer prompts for
an unwritable F</para></item>
          <item><para>"rm -rf D" would emit an misleading diagnostic
when failing to remove a symbolic link within the unwritable
directory, D. Introduced in coreutils-6.0.  Similarly, when a
cross-partition "mv" fails because the source directory is unwritable,
it now gives a reasonable diagnostic.  Before, this would
print</para>
          <screen>
$ mkdir /tmp/x; touch /tmp/x/y; chmod -w /tmp/x;
$ test $(stat -c %d /tmp/x) -ne $(stat -c %d .) &amp;&amp; mv /tmp/x/y .
mv: cannot remove `/tmp/x/y': Not a directory
          </screen>
          <para>Now it prints this:</para>
          <screen>
mv: cannot remove `/tmp/x/y': Permission denied.
          </screen></item>
        </items>

        <items name="New features">
          <item><para>sort's new --compress-program=PROG option
specifies a compression program to use when writing and reading
temporary files. This can help save both time and disk space when
sorting large inputs.</para></item>
          <item><para>sort accepts the new option -C, which acts like
-c except no diagnostic is printed.  Its --check option now accepts an
optional argument, and --check=quiet and --check=silent are now
aliases for -C, while --check=diagnose-first is an alias for -c or
plain --check.</para></item>
        </items>
      </change>

      <change from="6.6" to="6.7">
        <items name="Bug fixes">
          <item><para>When cp -p copied a file with special mode bits
set, the same bits were set on the copy even when ownership could not
be preserved. This could result in files that were setuid to the wrong
user. To fix this, special mode bits are now set in the copy only if
its ownership is successfully preserved.  Similar problems were fixed
with mv when copying across file system boundaries.  This problem
affects all versions of coreutils through 6.6.</para></item>
          <item><para>cp --preserve=ownership would create output
files that temporarily had too-generous permissions in some cases.
For example, when copying a file with group A and mode 644 into a
group-B sticky directory, the output file was briefly readable by
group B. Fix similar problems with cp options like -p that imply
--preserve=ownership, with install -d when combined with either -o or
-g, and with mv when copying across file system boundaries. This bug
affects all versions of coreutils through 6.6.</para></item>
          <item><para>du --one-file-system (-x) would skip
subdirectories of any directory listed as second or subsequent command
line argument.  This bug affects coreutils-6.4, 6.5 and
6.6.</para></item>
        </items>
      </change>

      <change from="6.5" to="6.6">
        <items name="Bug fixes">
          <item><para>ls would segfault (dereference a NULL pointer)
for a file with a nameless group or owner.  This bug was introduced in
coreutils-6.5.</para></item>
          <item><para>A bug in the latest official m4/gettext.m4 (from
gettext-0.15) made configure fail to detect gettext support, due to
the unusual way in which coreutils uses AM_GNU_GETTEXT.</para></item>
        </items>

        <items name="Improved robustness">
          <item><para>Now, du (and the other fts clients: chmod,
chgrp, chown) honor a trailing slash in the name of a
symlink-to-directory even on Solaris 9, by working around its buggy
fstatat implementation.</para></item>
        </items>
      </change>

      <change from="6.4" to="6.5">
        <items name="Bug fixes">
          <item><para>du (and the other fts clients: chmod, chgrp,
chown) would exit early when encountering an inaccessible directory on
a system with native openat support (i.e., linux-2.6.16 or newer along
with glibc-2.4 or newer). This bug was introduced with the switch to
gnulib's openat-based variant of fts, for coreutils-6.0.</para></item>
          <item><para>"ln --backup f f" now produces a sensible
diagnostic</para></item>
        </items>

        <items name="New features">
          <item><para>rm accepts a new option:
--one-file-system</para></item>
        </items>
      </change>

      <change from="6.3" to="6.4">
        <items name="Bug fixes">
          <item><para>chgrp and chown would malfunction when invoked
with both -R and -H and with one or more of the following:
--preserve-root, --verbose, --changes, --from=o:g (chown only).  This
bug was introduced with the switch to gnulib's openat-based variant of
fts, for coreutils-6.0.</para></item>
          <item><para>cp --backup dir1 dir2, would rename an existing
dir2/dir1 to dir2/dir1~. This bug was introduced in
coreutils-6.0.</para></item>
          <item><para>With --force (-f), rm no longer fails for
ENOTDIR. For example, "rm -f existing-non-directory/anything" now
exits successfully, ignoring the error about a nonexistent
file.</para></item>
        </items>
      </change>

      <change from="6.2" to="6.3">
        <items name="Improved robustness">
          <item><para>pinky no longer segfaults on Darwin 7.9.0 (MacOS
X 10.3.9) due to a buggy native getaddrinfo function.</para></item>
          <item><para>rm works around a bug in Darwin 7.9.0 (MacOS X
10.3.9) that would sometimes keep it from removing all entries in a
directory on an HFS+ or NFS-mounted partition.</para></item>
          <item><para>sort would fail to handle very large input
(around 40GB) on systems with a mkstemp function that returns a file
descriptor limited to 32-bit offsets.</para></item>
        </items>

        <items name="Bug fixes">
          <item><para>chmod would fail unnecessarily in an unusual
case: when an initially- inaccessible argument is rendered accessible
by chmod's action on a preceding command line argument.  This bug also
affects chgrp, but it is harder to demonstrate.  It does not affect
chown.  The bug was introduced with the switch from explicit recursion
to the use of fts in coreutils-5.1.0 (2003-10-15).</para></item>
          <item><para>cp -i and mv -i occasionally neglected to prompt
when the copy or move action was bound to fail.  This bug dates back
to before fileutils-4.0.</para></item>
          <item><para>With --verbose (-v), cp and mv would sometimes
generate no output, or neglect to report file removal.</para></item>
          <item><para>For the "groups" command:</para>
          <unorderedlist>
            <item><para>"groups" no longer prefixes the output with
"user :" unless more than one user is specified; this is for
compatibility with BSD.</para></item>
            <item><para>"groups user" now exits nonzero when it gets
a write error.</para></item>
            <item><para>"groups" now processes options like --help
more compatibly.</para></item>
          </unorderedlist></item>
          <item><para>shuf would infloop, given 8KB or more of piped
input</para></item>
        </items>

        <items name="Portability">
          <item><para>Versions of chmod, chown, chgrp, du, and rm
(tools that use openat etc.) compiled for Solaris 8 now also work when
run on Solaris 10.</para></item>
        </items>
      </change>

      <change from="6.1" to="6.2">
        <items name="Changes in behavior">
          <item><para>mkdir -p and install -d (or -D) now use a method
that forks a child process if the working directory is unreadable and
a later argument uses a relative file name.  This avoids some race
conditions, but it means you may need to kill two processes to stop
these programs.</para></item>
          <item><para>rm now rejects attempts to remove the root
directory, e.g., `rm -fr /' now fails without removing anything.
Likewise for any file name with a final `./' or `../'
component.</para></item>
          <item><para>tail now ignores the -f option if
POSIXLY_CORRECT is set, no file operand is given, and standard input
is any FIFO; formerly it did this only for pipes.</para></item>
        </items>

        <items name="Infrastructure changes">
          <item><para>Coreutils now uses gnulib via the gnulib-tool
script. If you check the source out from CVS, then follow the
instructions in README-cvs.  Although this represents a large change
to the infrastructure, it should cause no change in how the tools
work.</para></item>
        </items>

        <items name="Bug fixes">
          <item><para>cp --backup no longer fails when the last
component of a source file name is "." or "..".</para></item>
          <item><para>"ls --color" would highlight other-writable and
sticky directories no differently than regular directories on a file
system with dirent.d_type support.</para></item>
          <item><para>"mv -T --verbose --backup=t A B" now prints the
" (backup: B.~1~)" suffix when A and B are directories as well as when
they are not.</para></item>
          <item><para>mv and "cp -r" no longer fail when invoked with
two arguments where the first one names a directory and the second
name ends in a slash and doesn't exist.  E.g., "mv dir B/", for
nonexistent B, now succeeds, once more.  This bug was introduced in
coreutils-5.3.0.</para></item>
        </items>
      </change>

      <change from="6.0" to="6.1">
        <items name="Changes in behavior">
          <item><para>df now considers BSD "kernfs" file systems to be
dummies</para></item>
        </items>

        <items name="New features">
          <item><para>printf now supports the 'I' flag on hosts whose
underlying printf implementations support 'I', e.g., "printf %Id
2".</para></item>
        </items>

        <items name="Bug fixes">
          <item><para>cp --sparse preserves sparseness at the end of a
file, even when the file's apparent size is not a multiple of its
block size. [introduced with the original design, in fileutils-4.0r,
2000-04-29]</para></item>
          <item><para>df (with a command line argument) once again
prints its header [introduced in coreutils-6.0]</para></item>
          <item><para>ls -CF would misalign columns in some cases
involving non-stat'able files [introduced in
coreutils-6.0]</para></item>
        </items>
      </change>

      <change from="5.9.x" to="6.0">
        <items name="Improved robustness">
          <item><para>df: if the file system claims to have more
available than total blocks, report the number of used blocks as being
"total - available" (a negative number) rather than as
garbage.</para></item>
          <item><para>dircolors: a new autoconf run-test for AIX's
buggy strndup function prevents malfunction on that system;  may also
affect cut, expand, and unexpand.</para></item>
          <item><para>fts no longer changes the current working
directory, so its clients (chmod, chown, chgrp, du) no longer
malfunction under extreme conditions.</para></item>
          <item><para>pwd and other programs using lib/getcwd.c work
even on file systems where dirent.d_ino values are inconsistent with
those from stat.st_ino.</para></item>
          <item><para>rm's core is now reentrant: rm --recursive (-r)
now processes hierarchies without changing the working directory at
all.</para></item>
        </items>

        <items name="Changes in behavior">
          <item><para>basename and dirname now treat // as different
from / on platforms where the two are distinct.</para></item>
          <item><para>chmod, install, and mkdir now preserve a
directory's set-user-ID and set-group-ID bits unless you explicitly
request otherwise.  E.g., `chmod 755 DIR' and `chmod u=rwx,go=rx DIR'
now preserve DIR's set-user-ID and set-group-ID bits instead of
clearing them, and similarly for `mkdir -m 755 DIR' and `mkdir -m
u=rwx,go=rx DIR'.  To clear the bits, mention them explicitly in a
symbolic mode, e.g., `mkdir -m u=rwx,go=rx,-s DIR'.  To set them,
mention them explicitly in either a symbolic or a numeric mode, e.g.,
`mkdir -m 2755 DIR', `mkdir -m u=rwx,go=rx,g+s' DIR.  This change is
for convenience on systems where these bits inherit from parents.
Unfortunately other operating systems are not consistent here, and
portable scripts cannot assume the bits are set, cleared, or
preserved, even when the bits are explicitly mentioned.  For example,
OpenBSD 3.9 `mkdir -m 777 D' preserves D's setgid bit but `chmod 777
D' clears it. Conversely, Solaris 10 `mkdir -m 777 D', `mkdir -m g-s
D', and `chmod 0777 D' all preserve D's setgid bit, and you must use
something like `chmod g-s D' to clear it.</para></item>
          <item><para>`cp --link --no-dereference' now works also on
systems where the link system call cannot create a hard link to a
symbolic link. This change has no effect on systems with a Linux-based
kernel.</para></item>
          <item><para>csplit and nl now use POSIX syntax for regular
expressions, not Emacs syntax.  As a result, character classes like
[[:print:]] and interval expressions like A\{1,9\} now have their
usual meaning, . no longer matches the null character, and \ must
precede the + and ? operators.</para></item>
          <item><para>date: a command like date -d '2006-04-23 21 days
ago' would print the wrong date in some time zones.  (see the test for
an example)</para></item>
          <item><para>df changes:</para>
          <unorderedlist>
            <item><para>df now considers "none" and "proc" file
systems to be dummies and therefore does not normally display them.
Also, inaccessible file systems (which can be caused by shadowed mount
points or by chrooted bind mounts) are now dummies, too.</para></item>
            <item><para>df now fails if it generates no output, so
you can inspect the exit status of a command like "df -t ext3 -t
reiserfs DIR" to test whether DIR is on a file system of type "ext3"
or "reiserfs".</para></item>
          </unorderedlist></item>
          <item><para>expr no longer complains about leading ^ in a
regular expression (the anchor is ignored), or about regular
expressions like A** (the second "*" is ignored).  expr now exits with
status 2 (not 3) for errors it detects in the expression's values;
exit status 3 is now used only for internal errors (such as integer
overflow, which expr now checks for).</para></item>
          <item><para>install and mkdir now implement the X permission
symbol correctly, e.g., `mkdir -m a+X dir'; previously the X was
ignored.</para></item>
          <item><para>install now creates parent directories with mode
u=rwx,go=rx (755) instead of using the mode specified by the -m
option; and it does not change the owner or group of parent
directories.  This is for compatibility with BSD and closes some race
conditions.</para></item>
          <item><para>ln now uses different (and we hope clearer)
diagnostics when it fails. ln -v now acts more like FreeBSD, so it
generates output only when successful and the output is easier to
parse.</para></item>
          <item><para>ls now defaults to --time-style='locale', not
--time-style='posix-long-iso'. However, the 'locale' time style now
behaves like 'posix-long-iso' if your locale settings appear to be
messed up.  This change attempts to have the default be the best of
both worlds.</para></item>
          <item><para>mkfifo and mknod no longer set special mode bits
(setuid, setgid, and sticky) with the -m option.</para></item>
          <item><para>nohup's usual diagnostic now more precisely
specifies the I/O redirections, e.g., "ignoring input and appending
output to nohup.out".  Also, nohup now redirects stderr to nohup.out
(or $HOME/nohup.out) if stdout is closed and stderr is a tty; this is
in response to Open Group XCU ERN 71.</para></item>
          <item><para>rm --interactive now takes an optional argument,
although the default of using no argument still acts like
-i.</para></item>
          <item><para>rm no longer fails to remove an empty,
unreadable directory</para></item>
          <item><para>seq changes:</para>
          <unorderedlist>
            <item><para>seq defaults to a minimal fixed point format
that does not lose information if seq's operands are all fixed point
decimal numbers. You no longer need the `-f%.f' in `seq -f%.f 1048575
1024 1050623', for example, since the default format now has the same
effect.</para></item>
            <item><para>seq now lets you use %a, %A, %E, %F, and %G
formats.</para></item>
            <item><para>seq now uses long double internally rather
than double.</para></item>
          </unorderedlist></item>
          <item><para>sort now reports incompatible options (e.g., -i
and -n) rather than silently ignoring one of them.</para></item>
          <item><para>stat's --format=FMT option now works the way it
did before 5.3.0: FMT is automatically newline terminated.  The first
stable release containing this change was 5.92.</para></item>
          <item><para>stat accepts the new option --printf=FMT, where
FMT is *not* automatically newline terminated.</para></item>
          <item><para>stat: backslash escapes are interpreted in a
format string specified via --printf=FMT, but not one specified via
--format=FMT.  That includes octal (\ooo, at most three octal digits),
hexadecimal (\xhh, one or two hex digits), and the standard sequences
(\a, \b, \f, \n, \r, \t, \v, \", \\).</para></item>
          <item><para>With no operand, 'tail -f' now silently ignores
the '-f' only if standard input is a FIFO or pipe and POSIXLY_CORRECT
is set. Formerly, it ignored the '-f' when standard input was a FIFO,
pipe, or socket.</para></item>
        </items>

        <items name="Scheduled for removal">
          <item><para>ptx's --copyright (-C) option is scheduled for
removal in 2007, and now evokes a warning.  Use --version
instead.</para></item>
          <item><para>rm's --directory (-d) option is scheduled for
removal in 2006.  This option has been silently ignored since
coreutils 5.0.  On systems that support unlinking of directories, you
can use the "unlink" command to unlink a directory.</para></item>
          <item><para>Similarly, we are considering the removal of
ln's --directory (-d, -F) option in 2006.  Please write to
&lt;bug-coreutils@gnu.org&gt; if this would cause a problem for you.
On systems that support hard links to directories, you can use the
"link" command to create one.</para></item>
        </items>

        <items name="New programs">
          <item><para>base64: base64 encoding and decoding (RFC 3548)
functionality.</para></item>
          <item><para>sha224sum: print or check a SHA224 (224-bit)
checksum</para></item>
          <item><para>sha256sum: print or check a SHA256 (256-bit)
checksum</para></item>
          <item><para>sha384sum: print or check a SHA384 (384-bit)
checksum</para></item>
          <item><para>sha512sum: print or check a SHA512 (512-bit)
checksum</para></item>
          <item><para>shuf: Shuffle lines of text.</para></item>
        </items>

        <items name="New features">
          <item><para>chgrp now supports --preserve-root,
--no-preserve-root (default), as it was documented to do, and just as
chmod, chown, and rm do.</para></item>
          <item><para>New dd iflag= and oflag= flags:</para>
          <unorderedlist>
            <item><para>'directory' causes dd to fail unless the
file is a directory, on hosts that support this (e.g., Linux kernels,
version 2.1.126 and later).  This has limited utility but is present
for completeness.</para></item>
            <item><para>'noatime' causes dd to read a file without
updating its access time, on hosts that support this (e.g., Linux
kernels, version 2.6.8 and later).</para></item>
            <item><para>'nolinks' causes dd to fail if the file has
multiple hard links, on hosts that support this (e.g., Solaris 10 and
later).</para></item>
          </unorderedlist></item>
          <item><para>ls accepts the new option
--group-directories-first, to make it list directories before
files.</para></item>
          <item><para>rm now accepts the -I (--interactive=once)
option.  This new option prompts once if rm is invoked recursively or
if more than three files are being deleted, which is less intrusive
than -i prompting for every file, but provides almost the same level
of protection against mistakes.</para></item>
          <item><para>shred and sort now accept the --random-source
option.</para></item>
          <item><para>sort now accepts the --random-sort (-R) option
and `R' ordering option.</para></item>
          <item><para>sort now supports obsolete usages like "sort +1
-2" unless POSIXLY_CORRECT is set.  However, when conforming to POSIX
1003.1-2001 "sort +1" still sorts the file named "+1".</para></item>
          <item><para>wc accepts a new option --files0-from=FILE,
where FILE contains a list of NUL-terminated file names.</para></item>
        </items>

        <items name="Bug fixes">
          <item><para>cat with any of the options, -A -v -e -E -T,
when applied to a file in /proc or /sys (linux-specific), would
truncate its output, usually printing nothing.</para></item>
          <item><para>cp -p would fail in a /proc-less chroot, on some
systems</para></item>
          <item><para>When `cp -RL' encounters the same directory more
than once in the hierarchy beneath a single command-line argument, it
no longer confuses them with hard-linked directories.</para></item>
          <item><para>fts-using tools (chmod, chown, chgrp, du) no
longer fail due to a double-free bug -- it could be triggered by
making a directory inaccessible while e.g., du is traversing the
hierarchy under it.</para></item>
          <item><para>fts-using tools (chmod, chown, chgrp, du) no
longer misinterpret a very long symlink chain as a dangling symlink.
Before, such a misinterpretation would cause these tools not to
diagnose an ELOOP error.</para></item>
          <item><para>ls --indicator-style=file-type would sometimes
stat a symlink unnecessarily.</para></item>
          <item><para>ls --file-type worked like
--indicator-style=slash (-p), rather than like
--indicator-style=file-type.</para></item>
          <item><para>mv: moving a symlink into the place of an
existing non-directory is now done atomically;  before, mv would first
unlink the destination.</para></item>
          <item><para>mv -T DIR EMPTY_DIR no longer fails
unconditionally.  Also, mv can now remove an empty destination
directory: mkdir -p a b/a; mv a b</para></item>
          <item><para>rm (on systems with openat) can no longer exit
before processing all command-line arguments.</para></item>
          <item><para>rm is no longer susceptible to a few
low-probability memory leaks.</para></item>
          <item><para>rm -r no longer fails to remove an inaccessible
and empty directory</para></item>
          <item><para>rm -r's cycle detection code can no longer be
tricked into reporting a false positive (introduced in
fileutils-4.1.9).</para></item>
          <item><para>shred --remove FILE no longer segfaults on
Gentoo systems</para></item>
          <item><para>sort would fail for large inputs (~50MB) on
systems with a buggy mkstemp function.  sort and tac now use the
replacement mkstemp function, and hence are no longer subject to
limitations (of 26 or 32, on the maximum number of files from a given
template) on HP-UX 10.20, SunOS 4.1.4, Solaris 2.5.1 and OSF1/Tru64
V4.0F&amp;V5.1.</para></item>
          <item><para>tail -f once again works on a file with the
append-only attribute (affects at least Linux ext2, ext3, xfs file
systems)</para></item>
        </items>
      </change>
    </notes>
  </program>
</programs>
