<?xml version="1.0"?>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
<programs>
  <program name="bison" version="2.4.3" revision="1">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}24</install-name>

    <sources>
      <source checksum="c1d3ea81bc370dbd43b6f0b2cd21287e"
        checksum-type="md5" size="1652612"
        path="src/bison-2.4.3.tar.bz2"/>
      <patch checksum="cec57ed3bf6b96197ec65c10bc1a2a29"
        checksum-type="md5" size="668"
        path="src/bison-2.4.3.tww.patch"/>
      <patch checksum="7eecd0f7cc541187afb7be759ea10655"
        checksum-type="md5" size="269489"
        path="src/bison-2.4.3.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="gawk" install-name="gawk31" add-path="prepend"
        type="build">v&gt;=3.1.8</depend>
      <depend program="m4" install-name="m414"
        add-path="prepend">v&gt;=1.4.15</depend>
      <depend program="gettext" var="GETTEXT"
        install-name="gettext018"
        add-path="prepend">v&gt;=0.18.1.1</depend>
      <depend program="libiconv" var="LIBICONV"
        install-name="libiconv113"
        add-path="prepend">v&gt;=1.13.1</depend>
    </dependencies>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  CXX=xlC_r CXXFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib" ;;
ia64*-hpux*)
  CC=cc CFLAGS="-z +O2 +Onofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Onofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit" ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="-z +O2 +Onofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Onofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit" ;;
*-hpux*)
  CC=cc CFLAGS="-z +O2 +Onofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Onofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit" ;;
*-irix*)
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0"
  CXX=CC CXXFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0" ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"
  CXXFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro" ;;
*-osf*)
  CC=cc CFLAGS="-O2 -msym -readonly_strings"
  CXX="cxx" CXXFLAGS="-O2 -model ansi -msym -readonly_strings \
-timplicit_local -D__USE_STD_IOSTREAM" ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4"
  CXX=CC CXXFLAGS="-mr -xO2 -xtarget=pentium4" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CXX=CC CXXFLAGS="-xO2 -xtarget=ultra2 -xarch=v8plusa" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis"
  CXX=CC CXXFLAGS="-xO2 -xtarget=ultra2 -m32 -xarch=sparcvis" ;;
esac

${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CXX="${CXX:-g++}" CXXFLAGS="${CXXFLAGS:--O2}" \
LDFLAGS="${LDFLAGS+${LDFLAGS}}" \
${SB_VAR_LIBICONV+--with-libiconv-prefix=${SB_VAR_LIBICONV}} \
${SB_VAR_GETTEXT+--with-libintl-prefix=${SB_VAR_GETTEXT}} \
--disable-yacc --datarootdir=${_datadir} --datadir=${_datadir} \
--disable-dependency-tracking --infodir="${SB_INSTALL_PREFIX}/info" \
--mandir="${SB_INSTALL_PREFIX}/man" ${ARGS+${ARGS}} \
--prefix=${SB_INSTALL_PREFIX}

# Ensure no need for flex
touch src/*-c.c
]]>
    </configure>

    <build>
<![CDATA[
gmake pkgdatadir=${_datadir}
]]>
    </build>

    <test>
<![CDATA[
touch tests/package.m4
sleep 1
touch tests/testsuite
gmake check
]]>
    </test>

    <install>
<![CDATA[
gmake install pkgdatadir=${_datadir}

# install texinfo source files
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/texinfo
${SB_PATH_INSTALL} -m 644 -o root -g 0 NEWS doc/bison.texinfo \
doc/fdl.texi doc/gpl-3.0.texi doc/version.texi ${_docdir}/texinfo

rmdir ${SB_INSTALL_PREFIX}/lib >/dev/null 2>&1 || :
]]>
    </install>

    <licenses>
      <license path="gpl-3.license"/>

      <license module="documentation" path="gfdl-1.2.license"/>
    </licenses>

    <notes>
      <change from="2.4.2" to="2.4.3">
        <item><para>Bison now obeys -Werror and --warnings=error for
warnings about grammar rules that are useless in the parser due to
conflicts.</para></item>
        <item><para>Problems with spawning M4 on at least FreeBSD 8
and FreeBSD 9 have been fixed.</para></item>
        <item><para>Failures in the test suite for GCC 4.5 have been
fixed.</para></item>
        <item><para>Failures in the test suite for some versions of
Sun Studio C++ have been fixed.</para></item>
        <item><para>Contrary to Bison 2.4.2's NEWS entry, it has been
decided that warnings about undefined %prec identifiers will not be
converted to errors in Bison 2.5.  They will remain warnings, which
should be sufficient for POSIX while avoiding backward compatibility
issues.</para></item>
        <item><para>Minor documentation fixes.</para></item>
      </change>

      <change from="2.4.1" to="2.4.2">
        <item><para>Some portability problems that resulted in
failures and livelocks in the test suite on some versions of at least
Solaris, AIX, HP-UX, RHEL4, and Tru64 have been addressed.  As a
result, fatal Bison errors should no longer cause M4 to report a
broken pipe on the affected platforms.</para></item>
        <item><para>`%prec IDENTIFIER' requires IDENTIFIER to be
defined separately.</para></item>
        <item><para>POSIX specifies that an error be reported for any
identifier that does not appear on the LHS of a grammar rule and that
is not defined by %token, %left, %right, or %nonassoc.  Bison 2.3b and
later lost this error report for the case when an identifier appears
only after a %prec directive.  It is now restored.  However, for
backward compatibility with recent Bison releases, it is only a
warning for now.  In Bison 2.5 and later, it will return to being an
error.</para></item>
        <item><para>Detection of GNU M4 1.4.6 or newer during
configure is improved.</para></item>
        <item><para>Warnings from gcc's -Wundef option about undefined
YYENABLE_NLS, YYLTYPE_IS_TRIVIAL, and __STRICT_ANSI__ in C/C++ parsers
are now avoided.</para></item>
        <item><para>%code is now a permanent feature.</para>
        <para>A traditional Yacc prologue directive is written in
the form: <command>%{CODE%}</command></para>
        <para>To provide a more flexible alternative, Bison 2.3b
introduced the %code directive with the following forms for
C/C++:</para>
        <screen>
%code          {CODE}
%code requires {CODE}
%code provides {CODE}
%code top      {CODE}
        </screen>
        <para>These forms are now considered permanent features of
Bison.  See the %code entries in the section "Bison Declaration
Summary" in the Bison manual for a summary of their functionality.
See the section "Prologue Alternatives" for a detailed discussion
including the advantages of %code over the traditional Yacc prologue
directive.</para>
        <para>Bison's Java feature as a whole including its current
usage of %code is still considered experimental.</para></item>
        <item><para>YYFAIL is deprecated and will eventually be
removed.</para>
        <para>YYFAIL has existed for many years as an undocumented
feature of deterministic parsers in C generated by Bison.  Previously,
it was documented for Bison's experimental Java parsers.  YYFAIL is no
longer documented for Java parsers and is formally deprecated in both
cases. Users are strongly encouraged to migrate to YYERROR, which is
specified by POSIX.</para>
        <para>Like YYERROR, you can invoke YYFAIL from a semantic
action in order to induce a syntax error.  The most obvious difference
from YYERROR is that YYFAIL will automatically invoke yyerror to
report the syntax error so that you don't have to.  However, there are
several other subtle differences between YYERROR and YYFAIL, and
YYFAIL suffers from inherent flaws when %error-verbose or `#define
YYERROR_VERBOSE' is used.  For a more detailed discussion, see: <ulink url="http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html">http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html</ulink></para>
        <para>The upcoming Bison 2.5 will remove YYFAIL from Java
parsers, but deterministic parsers in C will continue to implement it.
However, because YYFAIL is already flawed, it seems futile to try to
make new Bison features compatible with it.  Thus, during parser
generation, Bison 2.5 will produce a warning whenever it discovers
YYFAIL in a rule action.  In a later release, YYFAIL will be disabled
for %error-verbose and `#define YYERROR_VERBOSE'.  Eventually, YYFAIL
will be removed altogether.</para>
        <para>There exists at least one case where Bison 2.5's
YYFAIL warning will be a false positive.  Some projects add phony uses
of YYFAIL and other Bison-defined macros for the sole purpose of
suppressing C preprocessor warnings (from GCC cpp's -Wunused-macros,
for example). To avoid Bison's future warning, such YYFAIL uses can be
moved to the epilogue (that is, after the second `%%') in the Bison
input file.  In this release (2.4.2), Bison already generates its own
code to suppress C preprocessor warnings for YYFAIL, so projects can
remove their own phony uses of YYFAIL if compatibility with Bison
releases prior to 2.4.2 is not necessary.</para></item>
        <item><para>Internationalization.</para>
        <para>Fix a regression introduced in Bison 2.4: Under some
circumstances, message translations were not installed although
supported by the host system.</para></item>
      </change>

      <change from="2.4" to="2.4.1">
        <item><para>In the GLR defines file, unexpanded M4 macros in
the yylval and yylloc declarations have been fixed.</para></item>
        <item><para>Temporary hack for adding a semicolon to the user
action.</para>
        <para>Bison used to prepend a trailing semicolon at the end
of the user action for reductions.  This allowed actions such
as</para>
        <screen>
exp: exp "+" exp { $$ = $1 + $3 };
        </screen>
        <para>instead of</para>
        <screen>
exp: exp "+" exp { $$ = $1 + $3; };
        </screen>
        <para>Some grammars still depend on this `feature'.  Bison
2.4.1 restores the previous behavior in the case of C output
(specifically, when neither %language or %skeleton or equivalent
command-line options are used) to leave more time for grammars
depending on the old behavior to be adjusted.  Future releases of
Bison will disable this feature.</para></item>
        <item><para>A few minor improvements to the Bison
manual.</para></item>
      </change>

      <change from="2.3b" to="2.4">
        <item><para>%language is an experimental
feature.</para>
        <para>We first introduced this feature in test release 2.3b
as a cleaner alternative to %skeleton.  Since then, we have discussed
the possibility of modifying its effect on Bison's output file names.
Thus, in this release, we consider %language to be an experimental
feature that will likely evolve in future releases.</para></item>
        <item><para>Forward compatibility with GNU M4 has been
improved.</para></item>
        <item><para>Several bugs in the C++ skeleton and the
experimental Java skeleton have been fixed.</para></item>
      </change>

      <change from="2.3a" to="2.3b">
        <item><para>The quotes around NAME that used to be required in
the following directive are now deprecated: <command>%define NAME
"VALUE"</command></para></item>
        <item><para>The directive `%pure-parser' is now deprecated in
favor of: <command>%define api.pure</command> which has the same
effect except that Bison is more careful to warn about unreasonable
usage in the latter case.</para></item>
        <item><para>Push Parsing</para>
        <para>Bison can now generate an LALR(1) parser in C with
a push interface.  That is, instead of invoking `yyparse', which pulls
tokens from `yylex', you can push one token at a time to the parser
using `yypush_parse', which will return to the caller after processing
each token.  By default, the push interface is disabled.  Either of
the following directives will enable it:</para>
        <screen>
%define api.push_pull "push" // Just push; does not require yylex.
%define api.push_pull "both" // Push and pull; requires yylex.
        </screen>
        <para>See the new section `A Push Parser' in the Bison
manual for details.</para>
        <para>The current push parsing interface is experimental and
may evolve.  More user feedback will help to stabilize
it.</para></item>
        <item><para>The -g and --graph options now output graphs in
Graphviz DOT format, not VCG format.  Like --graph, -g now also takes
an optional FILE argument and thus cannot be bundled with other short
options.</para></item>
        <item><para>Java</para>
        <para>Bison can now generate an LALR(1) parser in Java.  The
skeleton is `data/lalr1.java'.  Consider using the new %language
directive instead of %skeleton to select it.</para>
        <para>See the new section `Java Parsers' in the Bison manual
for details.</para>
        <para>The current Java interface is experimental and may
evolve.  More user feedback will help to stabilize it.</para></item>
        <item><para>%language</para>
        <para>This new directive specifies the programming language
of the generated parser, which can be C (the default), C++, or Java.
Besides the skeleton that Bison uses, the directive affects the names
of the generated files if the grammar file's name ends in
".y".</para></item>
        <item><para>XML Automaton Report</para>
        <para>Bison can now generate an XML report of the LALR(1)
automaton using the new `--xml' option.  The current XML schema is
experimental and may evolve.  More user feedback will help to
stabilize it.</para></item>
        <item><para>The grammar file may now specify the name of the
parser header file using %defines.  For example: <command>%defines
"parser.h"</command></para></item>
        <item><para>When reporting useless rules, useless
nonterminals, and unused terminals, Bison now employs the terms
"useless in grammar" instead of "useless", "useless in parser" instead
of "never reduced", and "unused in grammar" instead of
"unused".</para></item>
        <item><para>Unreachable State Removal</para>
        <para>Previously, Bison sometimes generated parser
tables containing unreachable states.  A state can become unreachable
during conflict resolution if Bison disables a shift action leading to
it from a predecessor state.  Bison now:</para>
        <orderedlist>
          <item><para>Removes unreachable states.</para></item>
          <item><para>Does not report any conflicts that appeared in
unreachable states. WARNING: As a result, you may need to update
%expect and %expect-rr directives in existing grammar
%files.</para></item>
          <item><para>For any rule used only in such states, Bison
now reports the rule as "useless in parser due to
conflicts".</para></item>
        </orderedlist>
        <para>This feature can be disabled with the following
directive: <command>%define lr.keep_unreachable_states</command> See
the %define entry in the `Bison Declaration Summary' in the Bison
manual for further discussion.</para></item>
        <item><para>Lookahead Set Correction in the `.output'
Report</para>
        <para>When instructed to generate a `.output' file including
lookahead sets (using `--report=lookahead', for example), Bison now
prints each reduction's lookahead set only next to the associated
state's one item that (1) is associated with the same rule as the
reduction and (2) has its dot at the end of its RHS.  Previously,
Bison also erroneously printed the lookahead set next to all of the
state's other items associated with the same rule.  This bug affected
only the `.output' file and not the generated parser source
code.</para></item>
        <item><para>--report-file=FILE is a new option to override the
default `.output' file name.</para></item>
        <item><para>The `=' that used to be required in the following
directives is now deprecated:</para>
        <screen>
%file-prefix "parser"
%name-prefix "c_"
%output "parser.c"
        </screen></item>
        <item><para>An Alternative to `%{...%}' -- `%code QUALIFIER
{CODE}'</para>
        <para>Bison 2.3a provided a new set of directives as a more
flexible alternative to the traditional Yacc prologue blocks.  Those
have now been consolidated into a single %code directive with an
optional qualifier field, which identifies the purpose of the code and
thus the location(s) where Bison should generate it:</para>
        <screen>
1. `%code          {CODE}' replaces `%after-header  {CODE}'
2. `%code requires {CODE}' replaces `%start-header  {CODE}'
3. `%code provides {CODE}' replaces `%end-header    {CODE}'
4. `%code top      {CODE}' replaces `%before-header {CODE}'
        </screen>
        <para>See the %code entries in section `Bison Declaration
Summary' in the Bison manual for a summary of the new functionality.
See the new section `Prologue Alternatives' for a detailed discussion
including the advantages of %code over the traditional Yacc
prologues.</para>
        <para>The prologue alternatives are experimental.  More user
feedback will help to determine whether they should become permanent
features.</para></item>
        <item><para>Revised warning: unset or unused mid-rule
values</para>
        <para>Since Bison 2.2, Bison has warned about mid-rule
values that are set but not used within any of the actions of the
parent rule.  For example, Bison warns about unused $2 in:</para>
        <screen>
exp: '1' { $$ = 1; } '+' exp { $$ = $1 + $4; };
        </screen>
        <para>Now, Bison also warns about mid-rule values that are
used but not set.  For example, Bison warns about unset $$ in the
mid-rule action in:</para>
        <screen>
exp: '1' { $1 = 1; } '+' exp { $$ = $2 + $4; };
        </screen>
        <para>However, Bison now disables both of these warnings by
default since they sometimes prove to be false alarms in existing
grammars employing the Yacc constructs $0 or $-N (where N is some
positive integer).</para>
        <para>To enable these warnings, specify the option
`--warnings=midrule-values' or `-W', which is a synonym for
`--warnings=all'.</para></item>
        <item><para>Default %destructor or %printer with `&lt;*&gt;'
or `&lt;&gt;'</para>
        <para>Bison now recognizes two separate kinds of default
%destructor's and %printer's:</para>
        <orderedlist>
          <item><para>Place `&lt;*&gt;' in a %destructor/%printer
symbol list to define a default %destructor/%printer for all grammar
symbols for which you have formally declared semantic type
tags.</para></item>
          <item><para>Place `&lt;&gt;' in a %destructor/%printer
symbol list to define a default %destructor/%printer for all grammar
symbols without declared semantic type tags.</para></item>
        </orderedlist>
        <para>Bison no longer supports the `%symbol-default'
notation from Bison 2.3a. `&lt;*&gt;' and `&lt;&gt;' combined achieve
the same effect with one exception: Bison no longer applies any
%destructor to a mid-rule value if that mid-rule value is not actually
ever referenced using either $$ or $n in a semantic action.</para>
        <para>The default %destructor's and %printer's are
experimental.  More user feedback will help to determine whether they
should become permanent features.</para>
        <para>See the section `Freeing Discarded Symbols' in the
Bison manual for further details.</para></item>
        <item><para>%left, %right, and %nonassoc can now declare token
numbers.  This is required by POSIX.  However, see the end of section
`Operator Precedence' in the Bison manual for a caveat concerning the
treatment of literal strings.</para></item>
        <item><para>The nonfunctional --no-parser, -n, and %no-parser
options have been completely removed from Bison.</para></item>
      </change>

      <change from="2.3" to="2.3a">
        <item><para>Instead of %union, you can define and use your own
union type YYSTYPE if your grammar contains at least one &lt;type&gt;
tag. Your YYSTYPE need not be a macro; it can be a typedef. This
change is for compatibility with other Yacc implementations, and is
required by POSIX.</para></item>
        <item><para>Locations columns and lines start at 1. In
accordance with the GNU Coding Standards and Emacs.</para></item>
        <item><para>You may now declare per-type and default
%destructor's and %printer's:</para>
        <para>For example:</para>
        <screen>
%union { char *string; }
%token &lt;string&gt; STRING1
%token &lt;string&gt; STRING2
%type  &lt;string&gt; string1
%type  &lt;string&gt; string2
%union { char character; }
%token &lt;character&gt; CHR
%type  &lt;character&gt; chr
%destructor { free ($$); } %symbol-default
%destructor { free ($$); printf ("%d", @$.first_line); } STRING1 string1
%destructor { } &lt;character&gt;
        </screen>
        <para>guarantees that, when the parser discards any
user-defined symbol that has a semantic type tag other than
`&lt;character&gt;', it passes its semantic value to `free'.  However,
when the parser discards a `STRING1' or a `string1', it also prints
its line number to `stdout'.  It performs only the second
`%destructor' in this case, so it invokes `free' only once.</para>
        <para>[Although we failed to mention this here in the 2.3a
release, the default %destructor's and %printer's were experimental,
and they were rewritten in future versions.]</para></item>
        <item><para>Except for LALR(1) parsers in C with POSIX Yacc
emulation enabled (with `-y', `--yacc', or `%yacc'), Bison no longer
generates #define statements for associating token numbers with token
names.  Removing the #define statements helps to sanitize the global
namespace during preprocessing, but POSIX Yacc requires them.  Bison
still generates an enum for token names in all cases.</para></item>
        <item><para>Handling of traditional Yacc prologue blocks is
now more consistent but potentially incompatible with previous
releases of Bison.</para>
        <para>As before, you declare prologue blocks in your grammar
file with the `%{ ... %}' syntax.  To generate the pre-prologue, Bison
concatenates all prologue blocks that you've declared before the first
%union.  To generate the post-prologue, Bison concatenates all
prologue blocks that you've declared after the first %union.</para>
        <para>Previous releases of Bison inserted the pre-prologue
into both the header file and the code file in all cases except for
LALR(1) parsers in C.  In the latter case, Bison inserted it only into
the code file.  For parsers in C++, the point of insertion was before
any token definitions (which associate token numbers with names).  For
parsers in C, the point of insertion was after the token
definitions.</para>
        <para>Now, Bison never inserts the pre-prologue into the
header file.  In the code file, it always inserts it before the token
definitions.</para></item>
        <item><para>Bison now provides a more flexible alternative to
the traditional Yacc prologue blocks: %before-header, %start-header,
%end-header, and %after-header.</para>
        <para>For example, the following declaration order in the
grammar file reflects the order in which Bison will output these code
blocks.  However, you are free to declare these code blocks in your
grammar file in whatever order is most convenient for you:</para>
        <screen>
%before-header {
  /* Bison treats this block like a pre-prologue block: it inserts it into
   * the code file before the contents of the header file.  It does *not*
   * insert it into the header file.  This is a good place to put
   * #include's that you want at the top of your code file.  A common
   * example is `#include "system.h"'.  */
}
%start-header {
  /* Bison inserts this block into both the header file and the code file.
   * In both files, the point of insertion is before any Bison-generated
   * token, semantic type, location type, and class definitions.  This is a
   * good place to define %union dependencies, for example.  */
}
%union {
  /* Unlike the traditional Yacc prologue blocks, the output order for the
   * new %*-header blocks is not affected by their declaration position
   * relative to any %union in the grammar file.  */
}
%end-header {
  /* Bison inserts this block into both the header file and the code file.
   * In both files, the point of insertion is after the Bison-generated
   * definitions.  This is a good place to declare or define public
   * functions or data structures that depend on the Bison-generated
   * definitions.  */
}
%after-header {
  /* Bison treats this block like a post-prologue block: it inserts it into
   * the code file after the contents of the header file.  It does *not*
   * insert it into the header file.  This is a good place to declare or
   * define internal functions or data structures that depend on the
   * Bison-generated definitions.  */
}
        </screen>
        <para>If you have multiple occurrences of any one of the
above declarations, Bison will concatenate the contents in declaration
order.</para>
        <para>[Although we failed to mention this here in the 2.3a
release, the prologue alternatives were experimental, and they were
rewritten in future versions.]</para></item>
        <item><para>The option `--report=look-ahead' has been changed
to `--report=lookahead'. The old spelling still works, but is not
documented and may be removed in a future release.</para></item>
      </change>
    </notes>
  </program>
</programs>
