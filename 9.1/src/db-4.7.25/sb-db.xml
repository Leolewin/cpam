<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="db" version="4.7.25" revision="6">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>libdb47</install-name>

    <sources>
      <source checksum="ec2b87e833779681a0c3a814aa71359e"
        checksum-type="md5" size="13124129"
        path="src/db-4.7.25.tar.gz"/>
      <patch checksum="f95167d56eb3fb68bfbb69f0c4b4a168"
        checksum-type="md5" size="1604"
        path="src/db-4.7.25.patch.4.7.25.1"/>
      <patch checksum="c4ebf1a6a92c3227e30cad6c2b3cf677"
        checksum-type="md5" size="1365"
        path="src/db-4.7.25.patch.4.7.25.2"/>
      <patch checksum="794cc62e7736bcb14096845f5a7ec5b9"
        checksum-type="md5" size="5826"
        path="src/db-4.7.25.patch.4.7.25.3"/>
      <patch checksum="7f47e1551a0ba3e98d8b3a73dd877e85"
        checksum-type="md5" size="4112"
        path="src/db-4.7.25.patch.4.7.25.4"/>
      <patch checksum="c3b7c5eb4d4a43b3c4bc684e0bf42930"
        checksum-type="md5" size="871"
        path="src/db-4.7.25.avoid_lwp_bus_error.patch"/>
      <patch checksum="1d98a226af881ecb4e6baa32c9d9d4ec"
        checksum-type="md5" size="2216"
        path="src/db-4.7.25.tww.patch"/>
      <patch checksum="533ea6577bbadd13540250ed9ac8fc07"
        checksum-type="md5" size="1446013"
        path="src/db-4.7.25.auto.patch"/>
    </sources>

    <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <purge>
<![CDATA[
rm -rf ${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}-objdir
]]>
    </purge>

    <module name="default">
      <dependencies>
        <depend program="tcl" var="TCL"
          install-name="tcl85">v&gt;=8.5.10</depend>
      </dependencies>

      <validate>
        <depend program="db" module="64bit"
          systype="*-aix*|*-hpux*|*-irix*|*-solaris*">v==4.7.25</depend>
        <depend program="db"
          module="BerkeleyDB-5.12.2">v==4.7.25</depend>
        <depend program="db" module="DB_File-5.12.2">v==4.7.25</depend>
      </validate>

      <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
      </script-header>

      <configure>
<![CDATA[
rm -rf ${BUILD_PREFIX}-objdir
mkdir ${BUILD_PREFIX}-objdir

case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc_r CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  CXX=xlC_r CXXFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDFLAGS="-Wl,-brtl"

  ARGS="--enable-cxx" ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"

  ARGS="--enable-cxx" ;;
*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"

  ARGS="--enable-cxx" ;;
*-irix*)
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1009,1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0"
  CXX=CC CXXFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-ptused -FE:template_in_elf_section -O2 -OPT:Olimit=0"

  ARGS="--enable-cxx" ;;
*-freebsd*)
  CFLAGS="-O2 -mtune=pentium4 -march=pentium4"
  CXXFLAGS="-O2 -mtune=pentium4 -march=pentium4"

  ARGS="--enable-cxx" ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"
  CXXFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"

  ARGS="--enable-posixmutexes --enable-cxx" ;;
*-linux*)
  ARGS="--enable-posixmutexes --enable-cxx" ;;
*-osf*)
  CC=cc CFLAGS="-O2 -nodtk -arch ev5 -msym -readonly_strings"
  CXX=cxx CXXFLAGS="-O2 -arch ev5 -model ansi -ieee -msym \
-readonly_strings -timplicit_local"

  ARGS="--enable-cxx" ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4"
  CXX=CC CXXFLAGS="-xO2 -xtarget=pentium4"

  ARGS="--enable-cxx" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CXX=CC CXXFLAGS="-xO2 -xtarget=ultra2 -xarch=v8plusa"

  ARGS="--enable-cxx" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis"
  CXX=CC CXXFLAGS="-xO2 -xtarget=ultra2 -m32 -xarch=sparcvis"
  ARGS="--enable-cxx" ;;
esac

(cd ${BUILD_PREFIX}-objdir
 ${SHELL} ${SB_BUILD_PREFIX}/dist/configure CC="${CC:-gcc}" \
 CFLAGS="${CFLAGS:--O2}" CXX="${CXX:-g++}" \
 ${CPPFLAGS+CPPFLAGS="${CPPFLAGS}"} \
 CXXFLAGS="${CXXFLAGS:--O2}" LDFLAGS="${LDFLAGS+${LDFLAGS}}" \
 --enable-compat185 --enable-shared --enable-static --enable-rpc \
 ${SB_VAR_TCL+--enable-tcl} ${SB_VAR_TCL+--with-tcl=${SB_VAR_TCL_LIB}} \
 ${ARGS+${ARGS}} \
 --prefix=${SB_INSTALL_PREFIX})
]]>
      </configure>

      <build>
<![CDATA[
gmake -C ${BUILD_PREFIX}-objdir
]]>
      </build>

      <install>
<![CDATA[
gmake -C ${BUILD_PREFIX}-objdir strip=: docdir=${_docdir} install

# fix permission on library
case "${SB_SYSTYPE}" in
hppa*-hpux*)
  ${SB_PATH_CHMOD} 555 ${SB_INSTALL_PREFIX}/lib/libdb*.sl ;;
esac

${SB_PATH_CHOWN} -hR 0:0 ${SB_INSTALL_PREFIX}

# create pkgIndex.tcl file
if [ "${SB_VAR_TCL+set}" = "set" ]; then
  case "${SB_SYSTYPE}" in
  hppa*-hpux*)
    ${SB_VAR_TCL}/bin/tclsh8.5 <<_EOT_
lappend auto_path ${SB_INSTALL_PREFIX}/lib
pkg_mkIndex ${SB_INSTALL_PREFIX}/lib libdb_tcl-4.7.sl libdb-4.7.sl
_EOT_
    ;;
  *)
    ${SB_VAR_TCL}/bin/tclsh8.5 <<_EOT_
lappend auto_path ${SB_INSTALL_PREFIX}/lib
pkg_mkIndex ${SB_INSTALL_PREFIX}/lib libdb_tcl-4.7.so libdb-4.7.so
_EOT_
    ;;
  esac
fi
]]>
      </install>

      <purge>
<![CDATA[
rm -rf ${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}-objdir
]]>
      </purge>
    </module>

    <module name="test" auto-include="0">
      <dependencies>
        <depend program="tcl" var="TCL"
          install-name="tcl85">v&gt;=8.5.10</depend>
      </dependencies>

      <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
      </script-header>

      <configure>
<![CDATA[
rm -rf ${BUILD_PREFIX}-objdir
mkdir ${BUILD_PREFIX}-objdir

case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc_r CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  CXX=xlC_r CXXFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDFLAGS="-Wl,-brtl"

  ARGS="--enable-cxx" ;;
*-hpux11.00|*-hpux11.11)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"

  ARGS="--enable-cxx" ;;
*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"

  ARGS="--enable-cxx" ;;
*-irix*)
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1009,1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0"
  CXX=CC CXXFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-ptused -FE:template_in_elf_section -O2 -OPT:Olimit=0"

  ARGS="--enable-cxx" ;;
*-freebsd*)
  CFLAGS="-O2 -mtune=pentium4 -march=pentium4"
  CXXFLAGS="-O2 -mtune=pentium4 -march=pentium4"

  ARGS="--enable-cxx" ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"
  CXXFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"

  ARGS="--enable-posixmutexes --enable-cxx" ;;
*-linux*)
  ARGS="--enable-posixmutexes --enable-cxx" ;;
*-osf*)
  CC=cc CFLAGS="-O2 -nodtk -arch ev5 -msym -readonly_strings"
  CXX=cxx CXXFLAGS="-O2 -arch ev5 -model ansi -ieee -msym \
-readonly_strings -timplicit_local"

  ARGS="--enable-cxx" ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4"
  CXX=CC CXXFLAGS="-xO2 -xtarget=pentium4"

  ARGS="--enable-cxx" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CXX=CC CXXFLAGS="-xO2 -xtarget=ultra2 -xarch=v8plusa"

  ARGS="--enable-cxx" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis"
  CXX=CC CXXFLAGS="-xO2 -xtarget=ultra2 -m32 -xarch=sparcvis"

  ARGS="--enable-cxx" ;;
esac

(cd ${BUILD_PREFIX}-objdir
 ${SHELL} ${SB_BUILD_PREFIX}/dist/configure CC="${CC:-gcc}" \
 CFLAGS="${CFLAGS:--g}" CXX="${CXX:-g++}" \
 ${CPPFLAGS+CPPFLAGS="${CPPFLAGS}"} \
 CXXFLAGS="${CXXFLAGS:--g}" LDFLAGS="${LDFLAGS+${LDFLAGS}}" \
 --enable-compat185 --enable-shared --enable-static --enable-rpc \
 ${SB_VAR_TCL+--enable-tcl} ${SB_VAR_TCL+--with-tcl=${SB_VAR_TCL_LIB}} \
 ${ARGS+${ARGS}} ${SB_VAR_TCL+--enable-test} \
 --prefix=${SB_INSTALL_PREFIX})
]]>
      </configure>

      <build>
<![CDATA[
gmake -C ${BUILD_PREFIX}-objdir
]]>
      </build>

      <test>
<![CDATA[
cd ${BUILD_PREFIX}-objdir

cat >testit.tcl <<_EOT_
source ${SB_BUILD_PREFIX}/test/test.tcl
run_std
_EOT_

${SB_VAR_TCL}/bin/tclsh8.5 testit.tcl
]]>
      </test>

      <install>
<![CDATA[
:
]]>
      </install>

      <purge>
<![CDATA[
rm -rf ${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}-objdir
]]>
      </purge>
    </module>

    <module name="64bit"
    systype="*-aix*|*-hpux*|*-irix*|*-solaris*">
      <dependencies>
        <depend program="tcl" var="TCL" install-name="tcl85"
          module="64bit">v&gt;=8.5.10</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  _bindir=bin/ppc64
  _libdir=lib/ppc64 ;;
ia64*-hpux*)
  _bindir=bin/hpux64
  _libdir=lib/hpux64 ;;
*-hpux*)
  _bindir=bin/pa20_64
  _libdir=lib/pa20_64 ;;
*-irix*)
  _bindir=bin/mips4
  _libdir=lib64 ;;
i?86*-solaris*)
  _bindir=bin/amd64
  _libdir=lib/amd64 ;;
*-solaris*)
  _bindir=bin/sparcv9
  _libdir=lib/sparcv9 ;;
esac

case "${SB_SYSTYPE}" in
*-aix*)
  export OBJECT_MODE=64 ;;
esac
]]>
      </script-header>

      <configure>
<![CDATA[
rm -rf ${BUILD_PREFIX}-objdir
mkdir ${BUILD_PREFIX}-objdir

case "${SB_SYSTYPE}" in
*-aix*)
    CC=xlc CFLAGS="-O2 -qro -qroconst -q64 -qmaxmem=-1"
  CXX=xlC_r CXXFLAGS="-O2 -qro -qroconst -q64 -qmaxmem=-1"
  LDFLAGS="-Wl,-brtl"

  ARGS="--enable-cxx" ;;
ia64*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +DD64 \
+Oentrysched +Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +DD64 \
+Oentrysched +Odataprefetch +Onolimit"

  ARGS="--enable-cxx" ;;
*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +DD64 \
+Oentrysched +Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +DD64 \
+Oentrysched +Odataprefetch +Onolimit"

  ARGS="--enable-cxx"

  case "${SB_SYSTYPE}" in
  *-hpux11.31)
    ARGS="${ARGS} --build=hppa64-hp-hpux11.31" ;;
  *-hpux11.23)
    ARGS="${ARGS} --build=hppa64-hp-hpux11.23" ;;
  *-hpux11.11)
    ARGS="${ARGS} --build=hppa64-hp-hpux11.11" ;;
  *-hpux11.00)
    ARGS="${ARGS} --build=hppa64-hp-hpux11.00" ;;
  esac ;;
*-irix*)
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1009,1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-64 -mips4 -O2 -OPT:Olimit=0"
  CXX=CC CXXFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-ptused -FE:template_in_elf_section -64 -mips4 -O2 -OPT:Olimit=0"

  ARGS="--enable-cxx" ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -m64 -xarch=sse2"
  CXX=CC CXXFLAGS="-xO2 -m64 -xarch=sse2"

  ARGS="--enable-cxx" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=generic -xarch=v9"
  CXX=CC CXXFLAGS="-xO2 -xtarget=generic -xarch=v9"

  ARGS="--enable-cxx" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=generic -m64 \
-xarch=sparc"
  CXX=CC CXXFLAGS="-xO2 -xtarget=generic -m64 -xarch=sparc"

  ARGS="--enable-cxx" ;;
esac

(cd ${BUILD_PREFIX}-objdir
 ${SHELL} ${SB_BUILD_PREFIX}/dist/configure CC="${CC:-gcc}" \
 CFLAGS="${CFLAGS:--O2}" CXX="${CXX:-g++}" \
 CXXFLAGS="${CXXFLAGS:--O2}" LDFLAGS="${LDFLAGS+${LDFLAGS}}" \
 --enable-compat185 --enable-shared --enable-static --enable-rpc \
 ${SB_VAR_TCL+--enable-tcl} \
 ${SB_VAR_TCL+--with-tcl=${SB_VAR_TCL}/${_libdir}} \
 --bindir="${SB_INSTALL_PREFIX}/${_bindir}" \
 --libdir="${SB_INSTALL_PREFIX}/${_libdir}" \
 ${ARGS+${ARGS}} --prefix=${SB_INSTALL_PREFIX})
]]>
      </configure>

      <build>
<![CDATA[
gmake -C ${BUILD_PREFIX}-objdir
]]>
      </build>

      <install>
<![CDATA[
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${SB_INSTALL_PREFIX}/bin \
${SB_INSTALL_PREFIX_LIB}

if [ ! -d ${SB_INSTALL_PREFIX}/bin/64 ]; then
  ln -s ./$(basename ${_bindir}) ${SB_INSTALL_PREFIX}/bin/64
fi
if [ ! -d ${SB_INSTALL_PREFIX}/lib/64 ]; then
  case "${SB_SYSTYPE}" in
  *-aix*|*-hpux*|*-solaris*)
    ln -s ./$(basename ${_libdir}) ${SB_INSTALL_PREFIX}/lib/64 ;;
  *-irix*)
    ln -s ../lib64 ${SB_INSTALL_PREFIX}/lib/64 ;;
  esac
fi

gmake -C ${BUILD_PREFIX}-objdir strip=: docdir=${_docdir} \
install_lib install_utilities

# fix permission on library
case "${SB_SYSTYPE}" in
hppa*-hpux*)
  ${SB_PATH_CHMOD} 555 ${SB_INSTALL_PREFIX}/${_libdir}/libdb*.sl ;;
esac

# create pkgIndex.tcl file
if [ "${SB_VAR_TCL+set}" = "set" ]; then
  case "${SB_SYSTYPE}" in
  hppa*-hpux*)
    ${SB_VAR_TCL}/${_bindir}/tclsh8.5 <<_EOT_
lappend auto_path ${SB_INSTALL_PREFIX}/${_libdir}
pkg_mkIndex ${SB_INSTALL_PREFIX}/${_libdir} libdb_tcl-4.7.sl libdb-4.7.sl
_EOT_
    ;;
  *)
    ${SB_VAR_TCL}/${_bindir}/tclsh8.5 <<_EOT_
lappend auto_path ${SB_INSTALL_PREFIX}/${_libdir}
pkg_mkIndex ${SB_INSTALL_PREFIX}/${_libdir} libdb_tcl-4.7.so libdb-4.7.so
_EOT_
    ;;
  esac
fi
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${SB_INSTALL_PREFIX}/bin/64 ${SB_INSTALL_PREFIX}/${_bindir} \
${SB_INSTALL_PREFIX}/lib/64 ${SB_INSTALL_PREFIX}/${_libdir}
]]>
      </uninstall>

      <purge>
<![CDATA[
rm -rf ${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}-objdir
]]>
      </purge>
    </module>

    <module name="BerkeleyDB-5.12.2">
      <build-name>BerkeleyDB-0.49</build-name>

      <sources>
        <source checksum="8a1883f87ba82fc1614a636c8f899ea5"
          checksum-type="md5" size="195270"
          path="src/BerkeleyDB-0.49.tar.gz"/>
        <patch checksum="dbc8d9a09876b5f184cf5c74340a71e6"
          checksum-type="md5" size="903"
          path="src/BerkeleyDB-0.49.tww.patch"/>
      </sources>

      <dependencies>
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend program="db" var="LIBDB">v==4.7.25</depend>
        <depend program="perl" var="PERL">v==5.12.2</depend>
      </dependencies>

      <script-header>
<![CDATA[
_install_prefix="${SB_INSTALL_PREFIX_LIB}/perl5122"
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-osf*)
  INC="-I${SB_VAR_LIBDB_INC}" ;;
esac

BERKELEYDB_INCLUDE=${SB_VAR_LIBDB_INC} \
BERKELEYDB_LIB=${SB_VAR_LIBDB_LIB} \
${SB_VAR_PERL}/bin/perl Makefile.PL \
INSTALLARCHLIB=${_install_prefix} \
INSTALLSITEARCH=${_install_prefix} \
INSTALLSITELIB=${_install_prefix} \
${INC+INC="${INC}"} PREFIX=${SB_INSTALL_PREFIX}
]]>
      </configure>

      <test>
<![CDATA[
gmake test

: ignore test failures
]]>
      </test>

      <install>
<![CDATA[
gmake install

# install path for Perl's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_install_prefix}/include.paths.d
cat >${_install_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_install_prefix}
_EOT_
]]>
      </install>

      <uninstall>
<![CDATA[
cat ${_install_prefix}/auto/BerkeleyDB/.packlist |\
while read _file; do
  rm ${_file}

  _dir=$(dirname ${_file})
  test -d ${_dir} && rmdir ${_dir} 2>/dev/null
done

rm ${_install_prefix}/auto/BerkeleyDB/.packlist |\
rmdir ${_install_prefix}/auto/BerkeleyDB
rmdir ${_install_prefix}/auto 2>/dev/null

${SB_PATH_SED} -i -e "\
/head2.*L<BerkeleyDB|/,/back/ {
  g
  N
  d
}" ${_install_prefix}/perllocal.pod

[ ! -s "${_install_prefix}/perllocal.pod" ] && {
  rm ${_install_prefix}/perllocal.pod
  rmdir ${_install_prefix}
} || :
]]>
      </uninstall>

      <purge>
<![CDATA[
rm -rf ${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}-objdir
]]>
      </purge>
    </module>

    <module name="DB_File-5.12.2">
      <build-name>DB_File-1.824</build-name>

      <sources>
        <source checksum="26c29a0885098314c987013cd98fc074"
          checksum-type="md5" size="88944"
          path="src/DB_File-1.824.tar.gz"/>
      </sources>

      <dependencies>
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend program="db" var="LIBDB">v==4.7.25</depend>
        <depend program="perl" var="PERL">v==5.12.2</depend>
      </dependencies>

      <script-header>
<![CDATA[
_install_prefix="${SB_INSTALL_PREFIX_LIB}/perl5122"
]]>
      </script-header>

      <configure>
<![CDATA[
DB_FILE_INCLUDE=${SB_VAR_LIBDB_INC} \
DB_FILE_LIB=${SB_VAR_LIBDB_LIB} \
${SB_VAR_PERL}/bin/perl Makefile.PL \
INSTALLARCHLIB=${_install_prefix} \
INSTALLPRIVLIB=${_install_prefix} \
INSTALLSITEARCH=${_install_prefix} \
INSTALLSITELIB=${_install_prefix} \
${CC+CC="${CC}"} PREFIX=${SB_INSTALL_PREFIX}
]]>
      </configure>

      <test>
<![CDATA[
gmake test
]]>
      </test>

      <install>
<![CDATA[
gmake install

# install path for Perl's include.paths.d
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d \
${_install_prefix}/include.paths.d
cat >${_install_prefix}/include.paths.d/99-${SB_PROG_NAME} <<_EOT_
${_install_prefix}
_EOT_
]]>
      </install>

      <uninstall>
<![CDATA[
cat ${_install_prefix}/auto/DB_File/.packlist |\
while read _file; do
  rm ${_file}

  _dir=$(dirname ${_file})
  test -d ${_dir} && rmdir ${_dir} 2>/dev/null
done

rm ${_install_prefix}/auto/DB_File/.packlist |\
rmdir ${_install_prefix}/auto/DB_File
rmdir ${_install_prefix}/auto 2>/dev/null

${SB_PATH_SED} -i -e "\
/head2.*L<DB_File|/,/back/ {
  g
  N
  d
}" ${_install_prefix}/perllocal.pod

[ ! -s "${_install_prefix}/perllocal.pod" ] && {
  rm ${_install_prefix}/perllocal.pod
  rmdir ${_install_prefix}
} || :
]]>
      </uninstall>

      <purge>
<![CDATA[
rm -rf ${SB_BUILD_PREFIX} ${SB_BUILD_PREFIX}-objdir
]]>
      </purge>
    </module>

    <notes>
      <change from="4.6.21" to="4.7.25">
        <items name="Database or Log File On-Disk Format Changes">
          <item><para>The log file format changed in 4.7</para></item>
        </items>

        <items name="New Features">
          <item><para>The lock manager may now be fully partitioned,
improving performance on some multi-CPU systems [#15880]</para></item>
          <item><para>Replication groups are now architecture-neutral,
supporting connections between differing architectures (big-endian or
little-endian, independent of structure padding) [#15787]
[#15840]</para></item>
          <item><para>Java: A new Direct Persistence Layer adds a
built-in Plain Old Java Object (POJO)-based persistent object model,
which provides support for complex object models without compromises
in performance. For an introduction to the Direct Persistence Layer
API, see Getting Started with Data Storage. [#15936]</para></item>
          <item><para>Add the DB_ENV-&gt;set_intermediate_dir_mode
method to support the creation of intermediate directories needed
during recovery [#15097]</para></item>
          <item><para>The DB_ENV-&gt;failchk method can now abort
transactions for threads, which have failed while blocked on a
concurrency lock. This significantly decreases the need for database
environment recovery after thread of control failure.
[#15626]</para></item>
          <item><para>Replication Manager clients now can be
configured to monitor the connection to the master using heartbeat
messages, in order to promptly discover connection failures
[#15714]</para></item>
          <item><para>The logging system may now be configured to
pre-zero log files when they are created, improving performance on
some systems [#15758]</para></item>
        </items>

        <items name="Database Environment Changes">
          <item><para>Restructure aborted page allocation handling on
systems without an ftruncate system call. This enables the Berkeley DB
High Availability product on systems, which do not support ftruncate.
[#15602]</para></item>
          <item><para>Fix a bug where closing a database handle after
aborting a transaction which included a failed open of that handle
could result in application failure [#15650]</para></item>
          <item><para>Fix minor memory leaks when closing a private
database environment [#15663]</para></item>
          <item><para>Fix a bug leading to a panic of "unpinned page
returned" if a cursor was used for a delete multiple times and
deadlocked during one of the deletes [#15944]</para></item>
          <item><para>Optionally signal processes still running in the
environment before running recovery [#15984]</para></item>
        </items>

        <items name="General Access Method Changes">
          <item><para>Fix a bug where closing a database handle after
aborting a transaction which included a failed open of that database
handle could result in application failure [#15650]</para></item>
          <item><para>Fix a bug that could cause panic in a database
environment configured with POSIX-style thread locking, if a database
open failed [#15662]</para></item>
          <item><para>Fix bug in the DB-&gt;compact method which could
cause a panic if a thread was about to release a page while another
thread was truncating the database file [#15671]</para></item>
          <item><para>Fix an obscure case of interaction between a
cursor scan and delete that was prematurely returning DB_NOTFOUND
[#15785]</para></item>
          <item><para>Fix a bug in the DB-&gt;compact method where if
read-uncommitted was configured, a reader reading uncommitted data my
see an inconsistent entry between when the compact method detects an
error and when it aborts the enclosing transaction
[#15856]</para></item>
          <item><para>Fix a bug in the DB-&gt;compact method where a
thread of control mail fail if two threads are compacting the same
section of a Recno database [#15856]</para></item>
          <item><para>Fix a bug in DB-&gt;compact method, avoid an
assertion failure when zero pages can be freed [#15965]</para></item>
          <item><para>Fix a bug return a non-zero error when
DB-&gt;truncate is called with open cursors [#15973]</para></item>
          <item><para>Fix a bug add HANDLE_DEAD checking for DB
cursors [#15990]</para></item>
          <item><para>Fix a bug to now generate errors when
DB_SEQUENCE-&gt;stat is called without first opening the sequence
[#15995]</para></item>
          <item><para>Fix a bug to no longer dereference a pointer
into a hash structure, when hash functionality is disabled
[#16095]</para></item>
        </items>

        <items name="Hash Access Method Changes">
          <item><para>Fix a bug where a database store into a Hash
database could self-deadlock in a database environment configured for
the Berkeley DB Concurrent Data Store product, and with a
free-threaded DB_ENV or DB handle [#15718]</para></item>
        </items>

        <items name="Queue Access Method Changes">
          <item><para>Fix a bug that could cause a put or delete of a
queue element to return a DB_NOTGRANTED error, if blocked
[#15933]</para></item>
        </items>

        <items name="Recno Access Method Changes">
          <item><para>Expose db_env_set_func_malloc,
db_env_set_func_realloc, and db_env_set_func_free through the Windows
API for the DB dll [#16045]</para></item>
        </items>

        <items name="Java-specific API Changes">
          <item><para>Fix a bug where enabling MVCC on a database
through the Java API was ignored [#15644]</para></item>
          <item><para>Fixed memory leak bugs in error message
buffering in the Java API [#15843]</para></item>
          <item><para>Fix a bug where Java SecondaryConfig was not
setting SecondaryMultiKeyCreator from the underlying db handle [OTN
FORUM]</para></item>
          <item><para>Fix a bug so that getStartupComplete will now
return a boolean instead of an int [#16067]</para></item>
          <item><para>Fix a bug in the Java API, where Berkeley DB
would hang on exit when using replication [#16142]</para></item>
        </items>

        <items name="Direct Persistence Layer (DPL), Bindings and Collections API">
          <item><para>A new Direct Persistence Layer adds a built-in
Plain Old Java Object (POJO)-based persistent object model, which
provides support for complex object models without compromises in
performance. For an introduction to the Direct Persistence Layer API,
see Getting Started with Data Storage. [#15936]</para></item>
          <item><para>Fixed a bug in the remove method of the Iterator
instances returned by the StoredCollection.iterator method in the
collections package. This bug caused ArrayIndexOutOfBoundsException in
some cases when calling next, previous, hasNext or hasPrevious after
calling remove. (Note that this issue does not apply to StoredIterator
instances returned by the StoredCollection.storedIterator method.)
This bug was reported in this forum thread: <ulink url="http://forums.oracle.com/forums/thread.jspa?messageID=2187896">http://forums.oracle.com/forums/thread.jspa?messageID=2187896</ulink>
[#15858]</para></item>
          <item><para>Fixed a bug in the remove method of the
StoredIterator instances returned by StoredCollection.storedIterator
method in the collections package. If the sequence of methods
next-remove-previous was called, previous would sometimes return the
removed record. If the sequence of methods previous-remove-next was
called, next would sometimes return the removed record. (Note that
this issue does not apply to Iterator instances returned by the
StoredCollection.iterator method.) [#15909]</para></item>
          <item><para>Fixed a bug that causes a memory leak for
applications where many Environment objects are opened and closed and
the CurrentTransaction or TransactionRunner class is used. The problem
was reported in this JE Forum thread: <ulink url="http://forums.oracle.com/forums/thread.jspa?messageID=1782659">http://forums.oracle.com/forums/thread.jspa?messageID=1782659</ulink>
[#15444]</para></item>
          <item><para>Added StoredContainer.areKeyRangesAllowed
method. Key ranges and the methods in SortedMap and SortedSet such as
subMap and subSet are now explicitly disallowed for RECNO and QUEUE
databases -- they are only supported for BTREE databases. Before,
using key ranges in a RECNO or QUEUE database did not work, but was
not explicitly prohibited in the Collections API.
[#15936]</para></item>
        </items>

        <items name="Tcl-specific API Changes">
          <item><para>The Berkeley DB Tcl API does not attempt to
avoid evaluating input as Tcl commands. For this reason, it may be
dangerous to pass unreviewed user input through the Berkeley DB Tcl
API, as the input may subsequently be evaluated as a Tcl command. To
minimize the effectiveness of a Tcl injection attack, the Berkeley DB
Tcl API in the 4.7 release routine resets process' effective user and
group IDs to the real user and group IDs. [#15597]</para></item>
        </items>

        <items name="Replication Changes">
          <item><para>Fix a bug where a master failure resulted in
multiple attempts to perform a "fast election"; subsequent elections,
when necessary, now use the normal nsites value [#15099]</para></item>
          <item><para>Replication performance enhancements to speed up
failover [#15490]</para></item>
          <item><para>Fix a bug where replication could self-block in
a database environment configured for in-memory logging
[#15503]</para></item>
          <item><para>Fix a bug where replication would attempt to
read log file version numbers in a database configured for in-memory
logging [#15503]</para></item>
          <item><para>Fix a bug where log files were not removed
during client initialization in a database configured for in-memory
logging [#15503]</para></item>
          <item><para>The 4.7 release no longer supports live
replication upgrade from the 4.2 or 4.3 releases, only from the 4.4
and later releases [#15602]</para></item>
          <item><para>Fix a bug where replication could re-request
missing records on every arriving record [#15629]</para></item>
          <item><para>Change the DB_ENV-&gt;rep_set_request method to
use time, not the number of messages, when re-requesting missed
messages on a replication client [#15629]</para></item>
          <item><para>Fix a minor memory leak on the master when
updating a client during internal initialization
[#15634]</para></item>
          <item><para>Fix a bug where a client error when syncing with
a new replication group master could result in an inability to ever
re-join the group [#15648]</para></item>
          <item><para>Change dbenv-&gt;rep_set_request to use
time-based values instead of counters [#15682]</para></item>
          <item><para>Fix a bug where a LOCK_NOTGRANTED error could be
returned from the DB_ENV-&gt;rep_process_message method, instead of
being handled internally by replication [#15685]</para></item>
          <item><para>Fix a bug where the Replication Manager would
reject a fresh connection from a remote site that had crashed and
restarted, displaying the message: "redundant incoming connection will
be ignored" [#15731]</para></item>
          <item><para>The Replication Manager now supports dynamic
negotiation of the best available wire protocol version, on a
per-connection basis [#15783]</para></item>
          <item><para>Fix a bug, which could lead to slow performance
of internal initialization under the Replication Manager, as evidenced
by "queue limit exceeded" messages in verbose replication diagnostic
output [#15788]</para></item>
          <item><para>Fix a bug where replication control message were
not portable between replication clients with different endian
architectures [#15793]</para></item>
          <item><para>Add a configuration option to turn off
Replication Manager's special handling of elections in 2-site groups
[#15873]</para></item>
          <item><para>Fix a bug making it impossible to call
replicationManagerAddRemoteSite in the Java API after having called
replicationManagerStart [#15875]</para></item>
          <item><para>Fix a bug where the DB_EVENT_REP_STARTUPDONE
event could be triggered too early [#15887]</para></item>
          <item><para>Fix a bug where the rcvd_ts timestamp is reset
when the user just changes the threshold [#15895]</para></item>
          <item><para>Fix a bug where the master in a 2-site
replication group might wait for client acknowledgement, even when
there was no client connected [#15927]</para></item>
          <item><para>Fix a bug, clean up and restart internal init if
master log is gone [#16006]</para></item>
          <item><para>Fix a bug, ignore page messages that are from an
old internal init [#16075] [#16059]</para></item>
          <item><para>Fix a bug where checkpoint records do not
indicate a database was a named in-memory database
[#16076]</para></item>
          <item><para>Fix a bug with in-memory replication, where we
returned with the log region mutex held in an error path, leading to
self-deadlock [#16088]</para></item>
          <item><para>Fix a bug which causes the
DB_REP_CHECKPOINT_DELAY setting in rep_set_timeout() to be interpreted
in seconds, rather than microseconds [#16153]</para></item>
        </items>

        <items name="XA Resource Manager Changes">
          <item><para>Fix a bug where the DB_ENV-&gt;failchk method
and replication in general could fail in database environments
configured for XA [#15654]</para></item>
        </items>

        <items name="Locking Subsystem Changes">
          <item><para>Fix a bug causing a lock or transaction timeout
to not be set properly after the first timeout triggers on a
particular lock id [#15847]</para></item>
          <item><para>Fix a bug that would cause a trap if
DB_ENV-&gt;lock_id_free was passed an invalid locker id
[#16005]</para></item>
          <item><para>Fix a bug when thread tracking is enabled where
an attempt is made to release a mutex that is not lock
[#16011]</para></item>
        </items>

        <items name="Logging Subsystem Changes">
          <item><para>Fix a bug, handle zero-length log records doing
HA sync with in-memory logs [#15838]</para></item>
          <item><para>Fix a bug that could cause DB_ENV-&gt;failcheck
to leak log region memory [#15925]</para></item>
          <item><para>Fix a bug where the abort of a transaction that
opened a database could leak log region memory [#15953]</para></item>
          <item><para>Fix a bug that could leak memory in the
DB_ENV-&gt;log_archive interface if a log file was not found
[#16013]</para></item>
        </items>

        <items name="Memory Pool Subsystem Changes">
          <item><para>Fix multiple MVCC bugs including a race, which
could result in incorrect data being returned to the application
[#15653]</para></item>
          <item><para>Fixed a bug that left an active file in the
buffer pool after a database create was aborted [#15918]</para></item>
          <item><para>Fix a bug where there could be uneven
distribution of pages if a single database and multiple cache regions
are configured [#16015]</para></item>
          <item><para>Fix a bug where DB_MPOOLFILE-&gt;set_maxsize was
dropping the wrong mutex after open [#16050]</para></item>
        </items>

        <items name="Mutex Subsystem Changes">
          <item><para>Fix a bug where mutex contention in database
environments configured for hybrid mutex support could result in
performance degradation [#15646]</para></item>
          <item><para>Set the DB_MUTEX_PROCESS_ONLY flag on all
mutexes in private environments, they can't be shared and so we can
use the faster, intra-process only mutex implementations
[#16025]</para></item>
          <item><para>Fix a bug so that mutexes are now removed from
the environment signature if mutexes are disabled
[#16042]</para></item>
        </items>

        <items name="Transaction Subsystem Changes">
          <item><para>Fix a bug that could cause a checkpoint to
selfblock attempting to flush a file, when the file handle was closed
by another thread during the flush [#15692]</para></item>
          <item><para>Fix a bug that could cause DB_ENV-&gt;failcheck
to hang if there were pending prepared transactions in the environment
[#15925]</para></item>
          <item><para>Prepared transactions will now use the sync
setting from the environment. Default to flushing the log on commit
(was nosync) [#15995]</para></item>
          <item><para>If __txn_getactive fails, we now return with the
log region mutex held. This is not a bus since __txn_getactive cannot
really fail [#16088]</para></item>
        </items>

        <items name="Utility Changes">
          <item><para>Update db_stat with -x option for mutex
stats</para></item>
          <item><para>Fix an incorrect assumption about buffer size
when getting an overflow page in db_verify [#16064]</para></item>
        </items>

        <items name="Configuration, Documentation, Sample Application, Portability and Build Changes">
          <item><para>Fix an installation bug where the Berkeley DB
PHP header file was not installed in the correct place.</para></item>
          <item><para>Merge the run-time configuration sleep and yield
functions [#15037]</para></item>
          <item><para>Fix Handle_DEAD and other expected replication
errors in the C++ sample application ReqQuoteExample.cpp
[15568]</para></item>
          <item><para>Add support for monotonic timers
[#15670]</para></item>
          <item><para>Fix bugs where applications using the
db_env_func_map and db_env_func_unmap run-time configuration functions
could not join existing database environments, or open multiple DB_ENV
handles for a single environment [#15930]</para></item>
          <item><para>Add documentation about building Berkeley DB for
VxWorks 6.x.</para></item>
          <item><para>Remove the HAVE_FINE_GRAINED_LOCK_MANAGER flag,
it is obsolete in 4.7.</para></item>
          <item><para>Fix a bug in ex_rep, add a missing break which
could cause a segment fault.</para></item>
          <item><para>Fix build warnings from 64 bit Windows build
[#16029]</para></item>
          <item><para>Fix an alignment bug on ARM Linux. Force the
assignment to use memcpy. [#16125]</para></item>
          <item><para>Fix a bug in the Windows specific code of
ex_sequence.c, where there was an invalide printf specifier
[#16131]</para></item>
          <item><para>Improve the timer in ex_tpcb to use high
resolution timers [#16154]</para></item>
          <item><para>Mention in the documentation that env-&gt;open()
requires DB_THREAD to be specified when using repmgr
[#16163]</para></item>
          <item><para>Disable support for mmap on Windows CE. The only
affect is that we do not attempt to mmap small read only databases
into the mpool. [#16169]</para></item>
        </items>
      </change>

      <change from="4.6.19" to="4.6.21">
        <item><para>Fix a bug where mutex contention in database
environments configured for hybrid mutex support could result in
performance degradation [#15646]</para></item>
        <item><para>Fix a bug where closing a database handle after
aborting a transaction which included a failed open of that database
handle could result in application failure [#15650]</para></item>
        <item><para>Fix multiple MVCC bugs including a race which
could result in incorrect data being returned to the application
[#15653]</para></item>
        <item><para>Fix a bug where a database store into a Hash
database could self-deadlock in a database environment configured for
the Berkeley DB Concurrent Data Store product and with a free-threaded
DB_ENV or DB handle [#15718]</para></item>
        <item><para>Fix an installation bug where Berkeley DB's PHP
header file was not installed in the correct place</para></item>
      </change>

      <change from="4.6.18" to="4.6.19">
        <item><para>Fix a bug where a client in a two-site replication
group could become master, after failure of the existing master, even
if the client had priority 0 [#15388]</para></item>
        <item><para>Fix a bug where 32-bit builds on 64-bit machines
could immediately core dump because of a misaligned access
[#15643]</para></item>
        <item><para>Fix a bug where attempts to configure a database
for MVCC in the Java API were silently ignored [#15644]</para></item>
        <item><para>Fix a bug where database environments configured
for replication and verbose output could drop core
[#15651]</para></item>
      </change>

      <change from="4.5.20" to="4.6.18">
        <items name="Database or Log File On-Disk Format Changes">
          <item><para>The on-disk log format has changed</para></item>
          <item><para>The format of Hash database pages was changed in
the Berkeley DB 4.6 release, and items are now stored in sorted order.
The format changes are entirely backward-compatible, and no database
upgrades are needed. However, upgrading existing databases can offer
significant performance improvements. Note that databases created
using the 4.6 release may not be usable with earlier Berkeley DB
releases.</para></item>
        </items>

        <items name="New Features">
          <item><para>Add support for a cursor DB_PREV_DUP flag, which
moves the cursor to the previous key/data pair if it's a duplicate of
the current key/data pair [#4801]</para></item>
          <item><para>Add the ability to set cache page priority on a
database or cursor handle [#11886]</para></item>
          <item><para>Add verbose output tracing for filesystem
operations [#13760]</para></item>
          <item><para>Port Berkeley DB to Qualcomm's Binary Runtime
Environment for Wireless (BREW) [#14562]</para></item>
          <item><para>Port Berkeley DB to WinCE [#15312]</para></item>
          <item><para>Port Berkeley DB to S60 [#15371]</para></item>
          <item><para>Applications may now begin processing new
transactions while previously prepared, but unresolved, transactions
are still pending [#14754]</para></item>
          <item><para>Significant performance improvements in the Hash
access method [#15017]</para></item>
        </items>

        <items name="Database Environment Changes">
          <item><para>Add support to close open file handles in the
case of catastrophic database environment failure so applications that
do not exit and restart on failure won't leak file handles.
[#6538]</para></item>
          <item><para>Replace the Berkeley DB shared memory allocator
with a new implementation, intended to decrease the performance
drop-off seen in database environments having working sets that are
larger than the cache, especially database environments with multiple
cache page sizes [#13122]</para></item>
          <item><para>Fix a bug that would incorrectly cause a thread
to appear to be in the Berkeley DB API after a call to db_create
[#14562]</para></item>
          <item><para>Allow database close prior to resolving all
transactions updating the database [#14785]</para></item>
          <item><para>Fix a bug where the db_stat utility -Z flag and
the statistics method's DB_STAT_CLEAR flag could clear mutex
statistics too quickly, leading to incorrect values being displayed.
[#15032]</para></item>
          <item><para>Fix a bug where removal of a file after and
open/close pair spanning the most recent checkpoint
log-sequence-numbers made recovery fail [#15092]</para></item>
          <item><para>Fix a bug that could leave an environment
unrecoverable if FTRUNCATE was not set and a roll-forward to a
timestamp was interrupted between the truncation of the log and the
recording of aborted allocations [#15108]</para></item>
          <item><para>Fix a bug where recovery of a rename operation
could fail if the rename occurred in a directory that no longer
existed [#15119]</para></item>
          <item><para>Fix a bug that could cause recovery to report a
"File exists" error if a committed create was partially recovered by a
previously failed recovery operation [#15151]</para></item>
          <item><para>Fix a bug where the DbEnv.get_thread_count
method implementation was missing from the Berkeley DB 4.5 release.
[#15201]</para></item>
          <item><para>Fix a bug where replication operations were not
reported properly when the DbEnv.failchk method was called.
[#15094]</para></item>
          <item><para>Fixed a bug that caused SEQ-&gt;remove not to
use a transaction if the sequence was opened on a transactional
database handle but no transaction was specified on the call
[#15235]</para></item>
          <item><para>Fix a bug where accesses to the database
environment reference count could race, causing the DB_ENV-&gt;remove
method to incorrectly remove or not remove a database environment
[#15240]</para></item>
          <item><para>Fix a bug that could cause a recovery failure if
a partial record was written near the end of a log file before a crash
and then never overwritten after recovery runs and before a log file
switch occurs [#15302]</para></item>
          <item><para>Fix a bug that could fire a diagnostic assertion
if an error occurred during a database environment open.
[#15309]</para></item>
          <item><para>Fix a bug where memp_trickle attempts to flush
an infinite number of buffers [#15342]</para></item>
          <item><para>Cause application updates of the
DB_ENV-&gt;set_mp_max_write values to affect already running cache flush
operations [#15342]</para></item>
          <item><para>Fix a bug which could cause system hang if a
checkpoint happened at the same time as a database file create or
rename [#15346]</para></item>
          <item><para>Fix a bug which could cause application failure
if the open of a subdatabase failed while other database opens were
happening [#15346]</para></item>
          <item><para>Fix a bug that could cause recovery to not
process a transaction properly if the transaction was started before
the transaction IDs were reset but did not put its first record into
the log until after the txn_recycle record [#15400]</para></item>
          <item><para>Fix a bug that could cause a thread in cache
allocation to loop infinitely [#15406]</para></item>
          <item><para>Fix a bug that could cause recovery to report a
Log Sequence Error on systems without the ftruncate system call where
a page allocation occurred and the database metadata page was forced
out of cache without being marked dirty and then had to be recovered.
[#15441]</para></item>
          <item><para>Fix a bug on systems lacking the ftruncate
system call, where a page may be improperly linked into the free list
if archive recovery was done in multiple steps, that is, applying
additional logs to the same databases [#15557]</para></item>
        </items>

        <items name="General Access Method Changes">
          <item><para>Add a feature where applications can specify a
custom comparison function for the Hash access method
[#4109]</para></item>
          <item><para>Open, create, close and removal of
non-transactional databases is are longer logged in transactional
database environments unless debug logging is enabled.
[#8037]</para></item>
          <item><para>Add the ability to set cache page priority on a
database or cursor handle [#11886]</para></item>
          <item><para>Fix a bug where the DB_ENV-&gt;fileid_reset
method failed when called on on encrypted or check-summed databases
[#13990]</para></item>
          <item><para>Fix a bug where the DB-&gt;fd method failed when
called on in-memory databases [#14157]</para></item>
          <item><para>Fix a bug where an attempt to open a Recno
database with a backing file that does not exist could report an error
because it couldn't remove a temporary file [#14160]</para></item>
          <item><para>Reverse a change found in previous releases
which disallowed setting "partial" flags on key DBTs for DB and
DbCursor put method calls [#14520]</para></item>
          <item><para>Fix a bug where transactional file operations,
such as remove or rename, could leak file handles
[#15222]</para></item>
          <item><para>Fix a bug that could cause the in-memory sorted
freelist used by the DB-&gt;compact method not to be freed if
transaction or lock timeouts were set in the environment
[#15292]</para></item>
          <item><para>Add the DB-&gt;get_multiple method, which
returns if the DB handle references a "master" database in the
physical file [#15352]</para></item>
          <item><para>Fix a bug that could cause an DB_INORDER,
DB-&gt;get method DB_CONSUME operation to loop if the Queue database
was missing a record due to a rollback by a writer or a non-queue
insert in the queue [#15452]</para></item>
          <item><para>Fix a bug preventing database removal after
application or system failure in a database environment configured for
in-memory logging [#15459]</para></item>
        </items>

        <items name="Hash Access Method Changes">
          <item><para>Change the internal format of Hash database
pages, storing items in sorted order. There are no externally visible
changes, and hash databases using historic on-page formats do not
require an explicit upgrade. (However, upgrading existing databases
can offer significant performance improvements.)
[#15017]</para></item>
        </items>

        <items name="Queue Access Method Changes">
          <item><para>Fix a bug which could cause a Queue extent file
to be incorrectly removed if an empty extent file was being closed by
one thread and being updated by another thread (which was using random
access operations) [#9101]</para></item>
        </items>

        <items name="Java-specific API Changes">
          <item><para>Add a feature where an exception is thrown by
the Java API, the Berkeley DB error message is now included in the
exception object [#11870]</para></item>
          <item><para>Fix a bug which can cause a JVM crash when doing
a partial get operation [#15143]</para></item>
          <item><para>Fix a bug which prevented the use of Berkeley DB
sequences from Java [#15220]</para></item>
          <item><para>Fix multiple bugs where DBTs were not being
copied correctly in the Java replication APIs [#15223]</para></item>
          <item><para>Add transaction.commitWriteNoSync to the Java
API [#15376]</para></item>
        </items>

        <items name="Java collections and bind API Changes">
          <item><para>Change SerialBinding to use the current thread's
context class loader when loading application classes. This allows the
JE jar file to be deployed in application servers and other containers
as a shared library rather than as an application jar.
[#15447]</para></item>
          <item><para>Tuple bindings now support the
java.math.BigInteger type. Like other tuple binding values, BigInteger
values are sorted in natural integer order by default, without using a
custom comparator. For details please see the Javadoc for:
com.sleepycat.bind.tuple.TupleInput.readBigInteger
com.sleepycat.bind.tuple.TupleOutput.writeBigInteger
com.sleepycat.bind.tuple.BigIntegerBinding [#15244]</para></item>
          <item><para>Add tuple binding methods for reading and
writing packed int and long values. Packed integer values take less
space, but take slightly more processing time to read and write. See:
TupleInput.readPackedInt TupleInput.getPackedIntByteLength
TupleInput.readPackedLong TupleInput.getPackedLongByteLength
TupleOutput.writePackedInt TupleOutput.writePackedLong PackedInteger
[#15422]</para></item>
          <item><para>The Collections API has been enhanced so that
auto-commit works for the standard Java Iterator.remove(), set() and
add() methods. Previously it was necessary to explicitly begin and
commit a transaction in order to call these methods, when the
underlying Database was transactional. Note that starting a
transaction is still necessary when calling these methods if the
StoredCollection.storedIterator method is used. [#15401]</para></item>
          <item><para>Fix a bug that causes a memory leak for
applications where both of the following are true: many Environment
objects are opened and closed, and the CurrentTransaction or
TransactionRunner class is used [#15444]</para></item>
        </items>

        <items name="Replication Changes">
          <item><para>Fix a bug where transactions could be
rolled-back if an existing replication group master was partitioned
and unable to participate in an election [#14752]</para></item>
          <item><para>Add a new event when a replication manager
framework master fails to send and confirm receipt by clients of a
"permanent" message [#14775]</para></item>
          <item><para>Fix a race where multiple threads might attempt
to process a LOGREADY condition [#14902]</para></item>
          <item><para>Change the DB_VERB_REPLICATION flag to no longer
require the Berkeley DB library be built with the --enable-diagnostic
configuration option to output additional replication logging
information [#14991]</para></item>
          <item><para>Fix a bug with elections occurring during
internal init of a replication client site [#15057]</para></item>
          <item><para>Fix lockout code to lockout message threads and
API separately. Send indication that log requests is for internal
init. [#15067]</para></item>
          <item><para>Replication manager changed to retry host-name
look-up failures, since they could be caused by transient name server
outage [#15081]</para></item>
          <item><para>Fix a bug which led to memory corruption when
the sending of a bulk buffer resulted in an error.
[#15100]</para></item>
          <item><para>A throttling limit of 10 megabytes is now set by
default in a newly created database environment (see the
DbEnv.rep_set_limit method) [#15115]</para></item>
          <item><para>Fix a bug in ALL_REQ handling where master could
get a DB_NOTFOUND [#15116]</para></item>
          <item><para>Fix a bug which could lead to client sites
repeatedly but unproductively calling for an election, when a master
site already exists [#15128]</para></item>
          <item><para>Modify gap processing algorithms so XXX_MORE
messages ask for data beyond what it just processed, not an earlier
gap that might exist [#15136]</para></item>
          <item><para>Fixed a bug in the ex_rep example application
which could cause the last few transactions to disappear when shutting
down the sites of the replication group gracefully.
[#15162]</para></item>
          <item><para>Fix a bug where if a client crashed during
internal init, its database environment would be left in a confused
state, making it impossible to synchronize again with the master.
[#15177]</para></item>
          <item><para>Fix a bug where election flags are not cleared
atomically with the setting of the new master ID.
[#15186]</para></item>
          <item><para>Fix a bug which would cause Berkeley DB to crash
if an internal init happened when there were no database files at the
master [#15227]</para></item>
          <item><para>It is now guaranteed that the
DB_EVENT_REP_STARTUPDONE event will be presented to the application
after the corresponding DB_EVENT_REP_NEWMASTER event, even in the face
of extreme scheduling anomalies [#15265]</para></item>
          <item><para>Fix minor memory leaks in the replication
manager [#15239] [#15256]</para></item>
          <item><para>Fix a bug where a client starting an election
when the rest of the replication group already had an established
master could confuse replication management at the other client sites,
leading to failure to properly acknowledge PERM transactions from the
master [#15428]</para></item>
          <item><para>Add support for reporting Replication Manager
statistics [#15430]</para></item>
          <item><para>Fix a bug where a send failure during processing
of a request message from a client could erroneously appear to the
application as an EPERM system error. [#15436]</para></item>
          <item><para>Client now sets STARTUPDONE at the end of the
synchronization phase when it has caught up to the end of the master's
transaction log, without requiring ongoing transactions at the master.
[#15542]</para></item>
          <item><para>Fix a bug in sleep-time calculation which could
cause a Replication Manager failure[#15552]</para></item>
        </items>

        <items name="Locking Subsystem Changes">
          <item><para>Change the DB_ENV-&gt;lock_detect method to
return the number of transactions timed out in addition to those were
rejected due to deadlock [#15281]</para></item>
        </items>

        <items name="Memory Pool Subsystem Changes">
          <item><para>Fix a bug that could cause a checkpoint to hang
if a database was closed while the checkpoint was forcing that file to
disk and all the pages for that database were replaced in the cache.
[#15135]</para></item>
          <item><para>Fix a bug where a system error in closing a file
could result in a core dump [#15137]</para></item>
          <item><para>Fix MVCC statistics counts for private database
environments [#15218]</para></item>
        </items>

        <items name="Transaction Subsystem Changes">
          <item><para>Fix a bug where creating a database with the
DB_TXN_NOTDURABLE flag set would still write a log record.
[#15386]</para></item>
          <item><para>Change transaction checkpoint to wait only for
pages being updated during the checkpoint [#14710]</para></item>
        </items>

        <items name="Utility Changes">
          <item><para>Fix a bug that prevented db_load from handling
subdatabase names that were of zero length [#8204]</para></item>
          <item><para>Fix a bug where the db_hotbackup utility did not
clean out and record the log file numbers in the backup directory when
both the -u and -D flags were specified [#15395]</para></item>
        </items>

        <items name="Configuration, Documentation, Portability and Build Changes">
          <item><para>Berkeley DB no longer supports process-shared
database environments on Windows 9X platforms; the DB_PRIVATE flag
must always be specified to the DB_ENV-&gt;open method
[#13766]</para></item>
          <item><para>Port Berkeley DB to Qualcomm's Binary Runtime
Environment for Wireless (BREW) [#14562]</para></item>
          <item><para>Compile SWIG-generated code with the
-fno-strict-aliasing flag when using the GNU gcc compiler.
[#14953]</para></item>
          <item><para>Changed include files so ENOENT is resolved on
Windows [#15078]</para></item>
          <item><para>Port Berkeley DB to WinCE [#15312]</para></item>
          <item><para>Port Berkeley DB to S60 [#15371]</para></item>
          <item><para>Add the db_hotbackup executable to the Windows
MSI installer [#15372]</para></item>
          <item><para>Change the db_hotbackup utility to use the
Berkeley DB library portability layer [#15415]</para></item>
          <item><para>Re-write the GNU gcc mutex implementation on the
x86 platform to avoid compiler errors [#15461]</para></item>
          <item><para>Fix a bug with non-HFS filesystems under OS X
which could affect data durability [#15501]</para></item>
        </items>
      </change>

      <change from="4.4.20" to="4.5.20">
        <items name="New Features">
          <item><para>A new event style notification</para></item>
          <item><para>Multi-Version Concurrency Control for the
Btree/Recno access methods</para></item>
          <item><para>A new replication framework with a default
TCP/IP setup</para></item>
          <item><para>A new port to the BREW platform (a cell phone
OS), not fully supported but ready for testing</para></item>
          <item><para>Several enhancements to the Java Collections API
including the implementation of the size() method</para></item>
          <item><para>Online replication upgrades for high
availability replicated 24/7 systems</para></item>
        </items>

        <items name="Database Environment Changes">
          <item><para>Update the DB_ENV-&gt;failchk method to garbage
collect per-process mutexes stranded after unexpected process failure
[#13964]</para></item>
          <item><para>Fix a bug that could cause memory used to track
thread for DB_ENV-&gt;failchk to not be reused when a thread no longer
exists [#14425]</para></item>
          <item><para>Add set_event_notify behavior as part of new
event notification in Berkeley DB [#14534]</para></item>
          <item><para>Fix a bug so that we no longer panic on
DB_ENV-&gt;close() if a previous environment close failed to log. This
condition will now return an error. [#14693]</para></item>
        </items>

        <items name="Concurrent Data Store Changes">
          <item><para>Fix a bug where renaming a subdatabase in a
Concurrent Data Store environment could fail [#14185]</para></item>
        </items>

        <items name="General Access Method Changes">
          <item><para>Fix a bug that could cause extra unallocated
pages to be at the end of a database file [#14031]</para></item>
          <item><para>Optimize secondary updates when overwriting
primary records [#14075]</para></item>
          <item><para>Fix a bug to prevent a trap when creating a
named in-memory database and there are already temporary files open
[#14133]</para></item>
          <item><para>Fix a bug which caused a trap if the key
parameter to DBC-&gt;c_get was omitted with DB_CURRENT
[#14143]</para></item>
          <item><para>Fix a bug with secondary cursors when the
secondary has off-page duplicates. This bug resulted in incorrect
primary data being returned. [#14240]</para></item>
          <item><para>Fix a bug that would not properly upgrade
database files from releases 3.2.9 (and earlier) to releases 4.0 (and
greater) [#14461]</para></item>
          <item><para>Fix a bug that could cause a DB_READ_UNCOMITTED
get through a secondary index to return DB_SECONDARY_CORRUPT
[#14487]</para></item>
          <item><para>Fix a bug so that non-transactional cursor
updates of a transactional database will generate an error
[#14519]</para></item>
          <item><para>Add a message when the system panics due to a
page in the wrong state at its time of allocation
[#14527]</para></item>
        </items>

        <items name="Btree Access Method Changes">
          <item><para>Fix a bug that could cause a diagnostic
assertion by setting the deleted bit on a record in an internal node
[#13944]</para></item>
          <item><para>Fix 3 problems in BTREE compaction:
[#14238]</para>
          <unorderedlist>
            <item><para>When deleting a page don't check the next
key in the parent if we are going to delete the parent
too</para></item>
            <item><para>Need to check that the tree has not
collapsed between dropping a read lock and getting the write lock. It
is has collapsed we will fetch the root of the tree.</para></item>
            <item><para>Fix a case where we fail to lock the next
page before reading it</para></item>
          </unorderedlist></item>
          <item><para>Fix a bug that could cause the compaction of a
Btree with sorted duplicated to fail when attempting to compact an off
page duplicate tree if a key could not fit in an internal node
[#14771]</para></item>
          <item><para>Fix a bug that causes a loop if an empty Btree
was compacted [#14493]</para></item>
        </items>

        <items name="Hash Access Method Changes">
          <item><para>Fix a bug that could cause corruption in queue
extent files if multiple processes tried to open the same extent at
the same time [#14438]</para></item>
        </items>

        <items name="Queue Access Method Changes">
          <item><para>Fix a bug that caused locks not maintained where
queue records were read but not present in the queue at the end of a
transaction, therefore violating serializability
[#13719]</para></item>
        </items>

        <items name="C++-specific API Changes">
          <item><para>C++ applications that check could the error code
in exceptions should note that DbMemoryException has been changed to
have the error code DB_BUFFER_SMALL rather than ENOMEM, to match the
error returned by the C API. DbMemoryException will be thrown when a
Dbt is too small to contain data returned by Berkeley DB. When a call
to malloc fails, or some other resource is exhausted, a plain
DbException will be thrown with error code set to ENOMEM.
[#13939]</para></item>
        </items>

        <items name="Java-specific API Changes">
          <item><para>Database.verify may now be called. This method
is now static and takes a DatabaseConfig parameter.
[#13971]</para></item>
          <item><para>Add DB_ENV-&gt;{fileid_reset, lsn_reset} to the
public API [#14076]</para></item>
        </items>

        <items name="Java collections and bind API Changes">
          <item><para>The com.sleepycat.collections package is now
fully compatible with the Java Collections framework
[#14732]</para></item>
        </items>

        <items name="Replication Changes">
          <item><para>Fix a bug so that internal init will remove
client databases at the start of internal init [#14147]</para></item>
          <item><para>Fix a bug in replication internal init so that
using data_dir will be handled correctly. Make internal init
resilient to multiple data_dir calls with the same directory.
[#14489]</para></item>
          <item><para>Fix a bug in the 4.2 sync-up algorithm that
could result in no open files [#14552]</para></item>
          <item><para>Fix a bug where a PERM bulk buffer could have a
zero LSN passed to the application callback [#14675]</para></item>
          <item><para>Change names of some existing replication API
methods as described in "Replication Method Naming" page of "Upgrading
Berkeley DB Applications to Release 4.5" section of Reference guide
[#14723]</para></item>
          <item><para>Fix a bug which could cause an election to
succeed only after waiting for the timeout to expire, even when all
sties responded in a timely manner. The bug was most easily visible
in an election between 2 sites. [#14752]</para></item>
        </items>

        <items name="Locking Subsystem Changes">
          <item><para>Fix a bug that could cause a writer to hang if
readuncommitted is enabled and it tries to reacquire a write lock
[#14919]</para></item>
        </items>

        <items name="Logging Subsystem Changes">
          <item><para>Fix a bug so that log headers are now included
in the check sum. This avoids a possible race in doing hot backups.
[#11636].</para></item>
          <item><para>Fix a bug where recovery fails if there is no
disk space for the forced checkpoint that occurs at the end of
processing the log [#13986]</para></item>
          <item><para>Fix a bug which could cause a page to be missing
from the end of a database file if the page at the end of the file was
freed while it contained data and the system was restarted prior to
the log record for that free was flushed to disk
[#14090]</para></item>
          <item><para>Fix a bug that could cause log files to be
incorrectly removed by log_archive if it was run immediately after
recovery [#14874]</para></item>
        </items>

        <items name="Memory Pool Subsystem Changes">
          <item><para>Fix a bug that could cause corruption to the
buffer pool cache if a race condition was hit while using
DB-&gt;Compact [#14360]</para></item>
          <item><para>Fix a bug where cache pages could be leaked in
applications creating temporary files for which the DB_MPOOL_NOFILE
flag was set [#14544]</para></item>
        </items>

        <items name="Transaction Subsystem Changes">
          <item><para>Fix a bug that could cause extra empty pages to
appear in a database file after recovery [#11118]</para></item>
          <item><para>Fix a bug triggered when running recovery with a
feedback function that could cause a NULL pointer dereference
[#13834]</para></item>
          <item><para>Fix a bug where multiple copies of directories
listed in DB_CONFIG were in the data directory list when recovery is
run [#13884]</para></item>
          <item><para>Fix a bug to not trade locks if a write lock is
already owned [#13917]</para></item>
          <item><para>Fix a bug that could cause traps or hangs if the
DB_TXN-&gt;set_name function is used in a multithreaded application
[#14033]</para></item>
          <item><para>Fix a bug so that a transaction can no longer be
committed after it had deadlocked [#14037]</para></item>
          <item><para>Fix a bug that could cause a trap during
recovery if multiple operations that could remove the same extent are
recovered [#14061]</para></item>
          <item><para>Fix a bug that could cause an extent file to be
deleted after the last record in the extent was consumed but the
consuming transaction was aborted [#14179]</para></item>
          <item><para>Fix a bug where the parent database would not
use DB_READ_UNCOMMITTED in certain cases when calling DBC-&gt;c_pget
[#14361]</para></item>
          <item><para>Fix a bug so that it is no longer possible to do
a non-transactional cursor update on a database that is opened
transactionally [#14519]</para></item>
          <item><para>Fix a bug that causes a sequence to ignore the
DB_AUTO_COMMIT settings [#14582]</para></item>
          <item><para>Fix a bug, change txn_recover so that multiple
processes will recover prepared transactions without requiring that
the first process stay active [#14707]</para></item>
        </items>

        <items name="Utility Changes">
          <item><para>Fix a bug that caused db_verify to not check the
order on leaf pages which were the leftmost children of an internal
node [#13004]</para></item>
          <item><para>Fix a bug that caused db_hotbackup to not backup
queue extent files [#13848]</para></item>
          <item><para>Fix a bug so that db_verify no longer reports
that an unused hash page is not fully zeroed [#14030]</para></item>
          <item><para>Fix a bug where db_stat ignored the -f option to
return "fast" statistics [#14283]</para></item>
          <item><para>Fix a bug that prevented the db_stat utility
from opening database files with write permission so that meta data
statistics would be updated [#14755]</para></item>
        </items>

        <items name="Configuration, Documentation, Portability and Build Changes">
          <item><para>The Berkeley DB 4.3 and 4.4 releases disallowed
using the -with-uniquename configuration option with the C++, Java, or
RPC -enable-XXX options. The 4.5 release returns to the 4.2 release
behavior, allowing those combinations of configuration options
[#14067]</para></item>
          <item><para>Fix build issues when CONIG_TEST is not enabled
for Tcl [#14507]</para></item>
          <item><para>There are updated build instructions for DB PHP
module on Linux [#14249]</para></item>
          <item><para>Use libtool's "standard" environment variable
names so that you can set "AR" to "ar -X64" for example, and modify
both libtool and the Makefile commands. Remove the install-strip
target from the Makefile, it is no longer used. [#14726]</para></item>
        </items>
      </change>

      <change from="4.3.29" to="4.4.20">
        <items name="Database or Log File On-Disk Format Changes">
          <item><para>The on-disk log format has changed</para></item>
        </items>

        <items name="New Features">
          <item><para>Add support to compact an existing Btree
database [#6750]</para></item>
          <item><para>Add support for named in-memory databases
[#9927]</para></item>
          <item><para>Add support for database environment recovery
serialization. This simplifies multi-process application
architectures. Add DB_REGISTER flag to DB_ENV-&gt;open().
[#11511]</para></item>
          <item><para>Add utility for performing hot backups of a
database environment [#11536]</para></item>
          <item><para>Add replication configuration API
[#12110]</para></item>
          <item><para>Add replication support to return error instead
of waiting for client sync to complete [#12110]</para></item>
          <item><para>Add replication support for delayed client
synchronization [#12110]</para></item>
          <item><para>Add replication support for client-to-client
synchronization [#12110]</para></item>
          <item><para>Add replication support for bulk transfer
[#12110]</para></item>
          <item><para>Add new flags DB_DSYNC_DB and DB_DSYNC_LOG
[12941]</para></item>
          <item><para>Add DbEnv.log_printf, a new DbEnv method which
logs printf style formatted strings into the Berkeley DB database
environment log [#13241]</para></item>
        </items>

        <items name="Database Environment Changes">
          <item><para>Add a feature to support arbitrary alignment of
mutexes in order to minimize cache line collisions
[#9580]</para></item>
          <item><para>Change cache regions on 64-bit machines to allow
regions larger than 4GB [#10668]</para></item>
          <item><para>Fix a bug where a loop could occur if the
application or system failed during modification of the linked list of
shared regions [#11532]</para></item>
          <item><para>Fix mutex alignment on Linux/PA-RISC, add
test-and-set mutexes for MIPS and x86_64 [#11575]</para></item>
          <item><para>Fix a bug where private database environments
(DB_PRIVATE) on 64-bit machines would core dump because of 64-bit
address truncation [#11983]</para></item>
          <item><para>Fix a bug where freed memory is accessed when
DB_PRIVATE  environments are closed. This can happen on systems where
the operating system holds mutex resources that must be freed when the
mutex is destroyed. [#12591]</para></item>
          <item><para>Fix a bug where the DbEnv.stat_print method
could self-deadlock and hang. The DbEnv.stat_print method no longer
displays statistics for any of the database environment's databases.
[#12039]</para></item>
          <item><para>Fix a bug where Berkeley DB could create
fragmented filesystem-backed shared region files
[#12125]</para></item>
          <item><para>Fix a bug where Berkeley DB stat calls could
report a cache size of 0 after the statistics were cleared
[#12307]</para></item>
          <item><para>Threads of control joining database environments
are now configured for all of the subsystems (lock, log, cache, or
transaction) for which the environment was originally configured, it
is now an error to attempt  configuration of additional subsystems
after an environment is created  [#12422]</para></item>
          <item><para>Fix a bug where negative percentages could be
displayed in statistics output [#12673]</para></item>
          <item><para>Fix a bug that could cause a panic if the cache
is filled with non-logging updated pages [#12763]</para></item>
          <item><para>Fix a bug that could cause an unreported
deadlock if the application was using the DB_DIRTY_READ flag and the
record was an off page duplicate record [#12893]</para></item>
          <item><para>Fix a bug where a handle lock could be
incorrectly retained during a delete or rename operation
[#12906]</para></item>
          <item><para>Fix a bug where setting the DB_REGISTER flag
could result in unnecessarily running recovery, or corruption of the
registry file on Windows systems [#13789] (4.4.20)</para></item>
          <item><para>Fix a bug that would cause a trap if an
environment was opened specifying DB_REGISTER and the environment
directory could not be found [#13793] (4.4.20)</para></item>
          <item><para>Fix a buffer overflow bug when displaying
process and thread IDs in the Berkeley DB statistics output [#13796]
(4.4.20)</para></item>
        </items>

        <items name="Concurrent Data Store Changes">
          <item><para>Lock upgrades and downgrades are now accounted
for separately from lock requests and releases [#11155]</para></item>
          <item><para>Fix a bug where a second process joining a
Concurrent Data Store environment, with the DB_CDB_ALLDB flag set,
would fail. This would happen if the first thread were not entirely
finished with initialization. [#12277]</para></item>
        </items>

        <items name="General Access Method Changes">
          <item><para>Fix a bug where file system operations are
improperly synchronized [#10564]</para></item>
          <item><para>Add support for database files larger than 2GB
on Windows [#11839]</para></item>
          <item><para>Rename DB_DEGREE_2 (and all related flags) to
DB_READ_COMMITTED. Rename DB_DIRTY (and all related flags) to
DB_READ_UNCOMMITTED. [#11776]</para></item>
          <item><para>Fix a bug where wrapping of sequences was
incorrect when the cache size is smaller than the range of the maximum
value minus the minimum value [#11997]</para></item>
          <item><para>Fix a bug that could result in a hot backup
having a page missing from a database file if a file truncation was in
progress during the backup but was then aborted [#12017]</para></item>
          <item><para>Fix a bug where a long file name could cause one
too few bytes to be allocated when opening a file
[#12085]</para></item>
          <item><para>Fix a bug in secondary cursor code if a write
lock is not granted [#12109]</para></item>
          <item><para>Fix a bug in secondary cursors where the current
record would change on error [#12141]</para></item>
          <item><para>Fix a bug in Db-&gt;truncate where the method
was not checking to see if the handle was opened read-only
[#12179]</para></item>
          <item><para>Fix a bug in sequences so that they are now
platform independent, taking into account little-endian and
big-endian architectures. They will be automatically upgraded in 4.4.
[#12202]</para></item>
          <item><para>Fix a bug with non-wrapping sequences when
initial value was INT64_MIN [#12390]</para></item>
          <item><para>Add a retry for operating system operations that
return EIO (IO  Error) to better support NFS mounted file systems
[#12426]</para></item>
          <item><para>Fix sequence wrapping at INT64 limits
[#12520]</para></item>
          <item><para>Fix a bug where errors during DB-&gt;associate
could leave secondaries half associated [#13173]</para></item>
          <item><para>Fix a bug so that we no longer will update in
CDS and DS if the file size limit will be exceeded
[#13222]</para></item>
          <item><para>Fix a bug where if there is insufficient memory
for a database key in a DBT configured to return a key value into
user-specified memory, the cursor is moved forward to the next entry
in the database, which can cause  applications to skip key/data pairs
[#13815] (4.4.20)</para></item>
          <item><para>Fix a bug where retrieval from a secondary index
could result in a core dump [#13843] (4.4.20)</para></item>
          <item><para>Fix a bug that could cause part of the free list
to become unlinked if a btree compaction was rolled back due to a
transaction abort [#13891] (4.4.20)</para></item>
        </items>

        <items name="Btree Access Method Changes">
          <item><para>Remove maxkey configuration
[#8904]</para></item>
          <item><para>Fix a memory leak in operations on large Btrees
[#12000]</para></item>
        </items>

        <items name="Hash Access Method Changes">
          <item><para>Fix a bug where access to HASH or encrypted
database pages might be blocked during a checkpoint
[#11031]</para></item>
          <item><para>Fix a bug where recovery would fail when a
database has a hash page on the free list and that hash page was freed
without using transactions and later allocated and aborted within a
transaction  [#11214]</para></item>
          <item><para>Fix a bug in hash duplicates where if the caller
left garbage in the partial length field, we were using it. Fix a bug
where a replacement of a hash item that should have gone on an
overflow page, did not. [#11966]</para></item>
          <item><para>Fix a bug where free space was miscalculated
when adding the first duplicate to an existing item and the existing
item plus the new item does not fit on a page [#12270]</para></item>
          <item><para>Fix a bug where allocations of hash buckets are
not recovered correctly [#12846]</para></item>
        </items>

        <items name="Queue Access Method Changes">
          <item><para>Improve performance of deletes from a QUEUE
database that does not have a secondary index [#11538]</para></item>
          <item><para>Fix a bug where updates that do not use
transactions, but do enable locking, failed to release locks
[#11669]</para></item>
          <item><para>Fix a bug where a transaction might not be
rolled forward if the site was performing hot backups and an
application aborted a prepared but not committed transaction
[#12181]</para></item>
          <item><para>Fix a bug with queue extents not being reclaimed
[#12249]</para></item>
          <item><para>Fix a bug where a record being inserted before
the head of the queue could appear missing if DB_CONSUME is not
specified [#12919]</para></item>
          <item><para>Fix a bug that might cause recovery to move the
head or tail of the queue to exclude a record that was deleted but
whose transaction did not commit [#13256]</para></item>
          <item><para>Fix a bug that could cause recovery to move the
head or tail pointer beyond a record that was aborted but was rolled
backward by recovery [#13318]</para></item>
          <item><para>Fix a bug that could cause the loss of an update
to a QUEUE database in a hot backup [#13823] (4.4.20)</para></item>
        </items>

        <items name="C++-specific API Changes">
          <item><para>Fix a bug so that a DbMemoryException will be
raised during a DB_BUFFER_SMALL error [#13273]</para></item>
        </items>

        <items name="Java-specific API Changes">
          <item><para>Add VersionMismatchException to map the
DB_VERSION_MISMATCH error [#11429]</para></item>
          <item><para>Fix a bug in Environment.getConfiguration()
method in non-crypto builds [#11752]</para></item>
          <item><para>Fix a bug that caused a NullPointerException
when using the MultipleDataEntry default constructor
[#11753]</para></item>
          <item><para>Fix handling of replication errors
[#11822]</para></item>
          <item><para>Remove EnvironmentConfig.setReadOnly() method
[#11882]</para></item>
          <item><para>Fix a bug where prefix strings in the error
handler may be corrupted [#11967]</para></item>
          <item><para>Fix a bug so that nested exceptions will appear
in stack traces [#11992]</para></item>
          <item><para>Fix a bug on LogSequenceNumber objects in the
Java API [#12223]</para></item>
          <item><para>Fix a bug when no files are returned from a call
to DB_ENV-&gt;log_archive [#12383]</para></item>
          <item><para>Fix a bug when multiple verbose flags are set
[#12383]</para></item>
          <item><para>Fix a bug so that an OutOfMemoryError is thrown
when allocation fails in the JNI layer [#13434]</para></item>
          <item><para>Fix a bug in Database.compact that could cause
JVM crashes or NullPointerException [#13791] (4.4.20)</para></item>
        </items>

        <items name="Java collections and bind API Changes">
          <item><para>Binding performance has been improved by using
System.arraycopy in the FastOutputStream and FastInputStream utility
classes [#12002]</para></item>
          <item><para>The objectToEntry method is now implemented in
all TupleBinding subclasses (IntegerBinding, etc) so that tuple
bindings are fully nestable. An example of this usage is a custom
binding that dynamically  discovers the data types of each of the
properties of a Java bean class. For each property, it calls
TupleBinding.getPrimitiveBinding using the  property's type (class).
When the custom binding's objectToEntry method is  called, it in turn
calls the objectToEntry method of the nested bindings  for each
property. [#12124]</para></item>
          <item><para>The getCause method for IOExceptionWrapper and
RuntimeExceptionWrapper is now defined so that nested exceptions
appear in stack traces for exceptions thrown by the collections API
[#11992]</para></item>
          <item><para>TupleBinding.getPrimitiveBinding can now be
passed a primitive type class as well as a primitive wrapper class.
The return value for Integer.TYPE and Integer.class, for example, will
be the same binding. [#12035]</para></item>
          <item><para>Improvements have been made to prevent the
buffer used in serial and tuple bindings from growing inefficiently,
and to provide more alternatives for the application to specify the
desired size. For details  see com.sleepycat.bind.serial.SerialBase
and  com.sleepycat.bind.tuple.TupleBase. [#12398]</para></item>
          <item><para>Add StoredContainer.getCursorConfig, deprecate
isDirtyRead. Deprecate StoredCollections.dirtyReadMap (dirtyReadSet,
etc) which is replaced by configuredMap (configuredSet, etc).
Deprecated StoredContainer.isDirtyReadAllowed with no replacement
(please use  DatabaseConfig.getDirtyRead). Also note that
StoredCollections.configuredMap (configuredSet, etc) can be used to
configure read committed and write lock containers, as well as read
uncommitted containers, since all CursorConfig properties are
supported. [#11776]</para></item>
          <item><para>Add the protected method
SerialBinding.getClassLoader so that subclasses may return a specific
or dynamically determined class loader. Useful for applications which
use multiple class loaders, including applications that serialize
Groovy-defined classes. [#12764] [#12749]</para></item>
        </items>

        <items name="Tcl-specific API Changes">
          <item><para>Fix a bug that could cause a memory leak in the
replication test code [#13436]</para></item>
        </items>

        <items name="RPC-specific Client/Server Changes">
          <item><para>Fix double-free in RPC server when handling an
out-of-memory error [#11852]</para></item>
        </items>

        <items name="Replication Changes">
          <item><para>Fix race condition (introduced in 4.3) in
rep_start function [#11030]</para></item>
          <item><para>Changed internal initialization to no longer
store records [#11090]</para></item>
          <item><para>Add support for replication bulk transfer
[#11099]</para></item>
          <item><para>Berkeley DB now calls check_doreq function for
MASTER_REQ  messages [#11207]</para></item>
          <item><para>Fix a bug where transactions could be counted
incorrectly during txn_recover [#11257]</para></item>
          <item><para>Add DB_REP_IGNORE flag so that old messages
(especially PERM messages) can be ignored by applications
[#11585]</para></item>
          <item><para>Fix a bug where op_timestamp was not initialized
[#11795]</para></item>
          <item><para>Fix a bug in db_refresh where a client would
write a log record on closing a file [#11892]</para></item>
          <item><para>Fix backward arguments in C++ rep_elect API
[#11906]</para></item>
          <item><para>Fix a bug where a race condition could happen
between downgrading a master and a database update operation
[#11955]</para></item>
          <item><para>Fix a bug on VERIFY_REQ. We now honor wait
recs/rcvd [#12097]</para></item>
          <item><para>Fix a bug in rebroadcast of verify_req by
initializing lp-&gt;wait_recs when finding a new master
[#12097]</para></item>
          <item><para>Fix a bug by adding lockout checking to
__env_rep_enter since rename/remove now call it [#12192]</para></item>
          <item><para>Fix a bug so that we now skip __db_chk_meta if
we are a rep client [#12316]</para></item>
          <item><para>Fix a replication failure on Windows
[#12331]</para></item>
          <item><para>Remove master discovery phase from rep_elect as
a performance improvement to speed up elections [#12551]</para></item>
          <item><para>Fix a bug to avoid multiple data streams when
issuing al ALL_REQ  [#12595]</para></item>
          <item><para>Fix a bug to request the remaining gap again if
the gap record is dropped after we receive the singleton
[#12974]</para></item>
          <item><para>Fix a bug in internal initialization when master
changes in the middle of initializing [#13074]</para></item>
          <item><para>Fix a bug in replication/archiving with internal
init [#13110]</para></item>
          <item><para>Fix pp handling of db_truncate
[#13115]</para></item>
          <item><para>Fix a bug where rep_timestamp could be updated
when it should not be updated [#13331]</para></item>
          <item><para>Fix a bug with bulk transfer when toggling
during updates [#13339]</para></item>
          <item><para>Change EIVAL to DB_REP_JOIN_FAILURE
[#12110]</para></item>
          <item><para>Add C++ exception for DB_REP_HANDLE_DEAD
[#13361]</para></item>
          <item><para>Fix a bug where starting an election
concurrently with processing a NEWMASTER message could cause the send
function to be called with an invalid eid [#13403]</para></item>
          <item><para>Fix a bug where we needed to close replication's
open files during replication initialization [#13623]
(4.4.20)</para></item>
        </items>

        <items name="Logging Subsystem Changes">
          <item><para>Add set_log_filemode for applications that need
to set an absolute file mode on log files [#8747]</para></item>
          <item><para>Fix a bug that caused "Not Found" to be returned
if a log file exists but is not readable [#11185]</para></item>
          <item><para>Removed checksum of records with an in-memory
log buffer [#11280]</para></item>
          <item><para>Fix a bug so that the DB_LOG_INMEMORY flag can
no longer be set after calling DB_ENV-&gt;open [#11436]</para></item>
          <item><para>Fix a bug introduced after release 4.0 where two
simultaneous checkpoints could cause ckp_lsn values to be out of order
[#12094]</para></item>
          <item><para>Fix a bug when in debug mode and using the
DEBUG_ROP which will now log read operations in __dbc_logging
[#12303]</para></item>
          <item><para>Fix a bug where failing to write a log record on
a file close would result in a core dump later [#12460]</para></item>
          <item><para>Fix a bug where automatic log file removal, or
the return of log files using an absolute path, could fail silently if
the application's current working directory could not be reached using
the system's getcwd  library call [#12505]</para></item>
          <item><para>Avoid locking the log region if we are not going
to flush the log. This can improve performance for some
write-intensive application workloads [#13090]</para></item>
          <item><para>Fix a bug with a possible segment fault when
memp_stat_print is called on a temporary database
[#13315]</para></item>
          <item><para>Fix a bug where log_stat_print could deadlock
with threads during a checkpoint [#13315]</para></item>
          <item><para>Fix a bug with in-memory transaction logs when
files wrapped around the buffer [#13589] (4.4.20)</para></item>
          <item><para>Fix a bug with in-memory logging that could
cause a race condition to corrupt the logs [#13919]
(4.4.20)</para></item>
        </items>

        <items name="Memory Pool Subsystem Changes">
          <item><para>Fix a bug where modified database pages might
not be flushed if recovery were run and all pages from a database were
found in the system cache and up to date, followed by a system crash
[#11654]</para></item>
        </items>

        <items name="Transaction Subsystem Changes">
          <item><para>Add new DbTxn class methods allowing
applications to set/get a descriptive name associated with a
transaction. The descriptive name is also displayed by the db_stat
utility. [#0382]</para></item>
          <item><para>Fix a bug where aborting a transaction with a
large number of nested transactions could take a long time
[#10972]</para></item>
          <item><para>Add support to allow the TXN_WRITE_NOSYNC flag
to be specified on the transaction handle [#11151]</para></item>
          <item><para>Fix a bug that could cause a page to be on the
free list twice if it was originally put on the free list by a
non-transactional update and then reallocated in a transaction that
aborts [#11159]</para></item>
          <item><para>Remove the requirement for the DB_AUTO_COMMIT
flag to make database operations transactional. Specifying the
database environment as transactional or opening the database handle
transactionally is sufficient. [#11302]</para></item>
          <item><para>Fix a bug so that environments created from
errant programs that called dbp-&gt;close while transactions were
still active can now be recovered [#11384]</para></item>
          <item><para>Fix a bug that caused free pages at the end of a
file to be truncated during recovery rather than placed on the free
page list [#11643]</para></item>
          <item><para>Fix a bug that caused a page to have the wrong
type if the truncate of a BREE or RECNO database needed to be rolled
forward [#11670]</para></item>
          <item><para>Fix a bug when manually undoing a subdb create,
don't try to free a root page that has not been allocated
[#11925]</para></item>
          <item><para>Add a check on database open to see if log files
were incorrectly removed by system administration mistakes
[#12178]</para></item>
          <item><para>Fix a bug when calling DB-&gt;pget and then
specifying the DB_READ_COMMITTED (DB_DEGREE_2) on a cursor. If
followed by a DBC-&gt;c_pget, the primary database would incorrectly
remain locked. [#12410]</para></item>
          <item><para>Fix a bug where the abort of a transaction in
which a sub database was opened with the DB_TXN_NOT_DURABLE flag could
fail [#12420]</para></item>
          <item><para>Fix a bug that could cause an abort transaction
that allocated new pages to a file that were not flushed to disk prior
to the abort transaction to report out of disk space
[#12743]</para></item>
          <item><para>Fix a bug that could prevent multiple creates
and destroys of the same file to be recovered correctly
[#13026]</para></item>
          <item><para>Fix a bug when recovery previously handled a
section of the log that did not contain any transactions
[#13139]</para></item>
          <item><para>Fix a bug that could result in the loss of
durability in Transactional Environments on Mac OS X
[#13149]</para></item>
          <item><para>Fix a bug that could cause the improper reuse of
a transaction id when recovery restores prepared transactions
[#13256]</para></item>
          <item><para>Fix a bug which could leave locks in the
environment if database compaction was run in a transactional
environment on a non-transactional database. This might have also have
triggered deadlocks if the database was opened transactionally.
[#13680] (4.4.20)</para></item>
        </items>

        <items name="Utility Changes">
          <item><para>Add utility for performing hot backups of a
database environment [#11536]</para></item>
          <item><para>Change the Verify utility to now identify any
nodes that have incorrect record counts [#11934]</para></item>
          <item><para>Fix a bug in the 1.85 compatibility code
supporting per-application Btree comparison and prefix compression
functions. The functions would not work on big-endian 64-bit hardware.
[#13316]</para></item>
        </items>

        <items name="Configuration, Documentation, Portability and Build Changes">
          <item><para>Change the ex_tpcb sample application to no
longer displays intermediate results. It displays results at the end
of the run. [#11259]</para></item>
          <item><para>Change the Visual Studio projects on Windows so
that each is in an intermediate directory [#11441]</para></item>
          <item><para>Fix errors in test subdb011
[#11799]</para></item>
          <item><para>Fix a bug that could cause applications using
gcc on Power PC  platforms to hang [#12233]</para></item>
          <item><para>Fix a bug where installation will fail if a
"true" program cannot be found [#12278]</para></item>
          <item><para>Fix a bug that prevented C++ applications from
configuring XA  [#12300]</para></item>
          <item><para>Fix a race condition in the Windows mutex
implementation found on 8-way Itanium systems [#12417]</para></item>
          <item><para>Add pthread mutex support for IBM OS/390
platform (z/OS or MVS)  [#12639]</para></item>
          <item><para>Fix a bug where the Tcl API did not configure on
OS X 10.4  [#12699]</para></item>
          <item><para>Fix portability issues with queue or recno
primary databases [#12872]</para></item>
          <item><para>Fix a bug where utility attempted to send
replication message [#13446]</para></item>
          <item><para>Add support for Visual Studio 2005 [#13521]
(4.4.20)</para></item>
        </items>
      </change>

      <change from="4.2.52" to="4.3.29">
        <items name="Database or Log File On-Disk Format Changes">
          <item><para>The on-disk log format has changed</para></item>
        </items>

        <items name="New Features">
          <item><para>Add support for light weight, transactionally
protected Sequence Number generation  [#5739]</para></item>
          <item><para>Add support for Degree 2 isolation [#8689]</para></item>
          <item><para>Add election generation information to
replication to support Paxos compliance [#9068]</para></item>
          <item><para>Add support for 64-bit and ANSI C
implementations of the RPCGEN utility  [#9548]</para></item>
        </items>

        <items name="Database Environment Changes">
          <item><para>Fix a bug where the permissions on system shared
memory segments did not match the mode specified in the
DB_ENV-&gt;open() method [#8921]</para></item>
          <item><para>Add a new return error from the
DB_ENV-&gt;open() method call, DB_VERSION_MISMATCH, which is returned
in the case of an application compiled under one version of Berkeley
DB attempting to open an environment created under a different version
[#9077]</para></item>
          <item><para>Add support for importing databases from a
transactional database environment into a different environment
[#9324]</para></item>
          <item><para>Fix a bug where a core dump could occur if a
zero-length database environment name was specified
[#9233]</para></item>
          <item><para>Increase the number of environment regions to
100 [#9297]</para></item>
          <item><para>Remove the DB_ENV-&gt;set_verbose() method flag
DB_VERB_CHKPOINT [#9405]</para></item>
          <item><para>Fix bugs where database environment getters
could return incorrect information after the database environment was
opened, if a different thread of control changed the database
environment values. Fix bugs where database environment getter/setter
functions could race with other threads of control.
[#9724]</para></item>
          <item><para>Change the DbEnv.set_lk_detect method to match
the DbEnv.open semantics. That is, DbEnv.set_lk_detect may be called
after the database environment is opened, allowing applications to
configure automatic deadlock detection if it has not yet been
configured. [#9724]</para></item>
          <item><para>Fix cursor locks for environments opened without
DB_THREAD so that they use the same locker ID. This eliminates many
common cases of application self-deadlock, particularly in CDS.
[#9742]</para></item>
          <item><para>Fix a bug in DB-&gt;get_env() in the C API
where it could return an error when it should only return the DB_ENV
handle. C++ and Java are unchanged [#9828]</para></item>
          <item><para>Fix a bug where we only need to initialize the
cryptographic memory region when MPOOL, Log or Transactions have been
configured  [#9872]</para></item>
          <item><para>Change private database environments at process
startup to only allocate the heap memory required at any particular
time, rather than always allocating the maximum amount of heap memory
configured for the environment  [#9889]</para></item>
          <item><para>Add a method to create non-existent
intermediate directories when opening database files
[#9898]</para></item>
          <item><para>Add support for in-memory logging within
database environments [#9927]</para></item>
          <item><para>Change Berkeley DB so configuring a database
environment for automatic log file removal affects all threads in the
environment, not just the DbEnv handle in which the configuration call
is made  [#9947]</para></item>
          <item><para>Change the signature of the error callback
passed to the DB_ENV-&gt;set_errcall and DB-&gt;set_errcall methods to
add a DB_ENV handle, to provide database environment context for the
callback function [#10025]</para></item>
          <item><para>Fix a race condition between DB-&gt;close and
DB-&gt;{remove,rename} on file systems that don't allow file
operations on open files (such as Windows) [#10180]</para></item>
          <item><para>Add a DB_DSYNC_LOG flag to the DbEnv::set_flags
method, which configures O_DSYNC on POSIX systems and
FILE_FLAG_WRITE_THROUGH on Win32 systems. This offers significantly
better performance for some applications on certain Solaris/filesystem
combinations. [#10205]</para></item>
          <item><para>Fix a bug where calling the DB or DBEnv
database remove or rename methods could cause a transaction checkpoint
or cache flush to fail [#10286]</para></item>
          <item><para>Change file operations not to flush a file if
it hasn't been written [#10537]</para></item>
          <item><para>Remove 4GB restriction on region sizes on 64
bit machines [#10668]</para></item>
          <item><para>Simplify the signature of substitute system
calls for ftruncate and seek [#10668]</para></item>
          <item><para>Change Berkeley DB so that opening an
environment without specifying a home directory will cause the
DB_CONFIG file in the current directory to be read, if it exists
[#11424]</para></item>
          <item><para>Fix a bug that caused a core dump if DB handles
without associated database environments were used for database
verification [#11649]</para></item>
          <item><para>Fix Windows mutexes shared between processes
run as different users [#11985]</para></item>
          <item><para>Fix Windows mutexes for some SMP machines
[#12417]</para></item>
        </items>

        <items name="Concurrent Data Store Changes">
          <item><para>Fix cursor locks for environments opened without
DB_THREAD so that they use the same locker ID. This eliminates many
common cases of application self-deadlock, particularly in CDS.
[#9742]</para></item>
        </items>

        <items name="General Access Method Changes">
          <item><para>Fix a bug where Berkeley DB log cursors would
close and re-open the underlying log file each time the log file was
read [#8934]</para></item>
          <item><para>Improve performance of DB-&gt;open() for
existing subdatabases maintained within the same database file
[#9156]</para></item>
          <item><para>Add a new error, DB_BUFFER_SMALL, to
differentiate from ENOMEM. The new error indicates that the supplied
DBT is too small. ENOMEM is now always fatal. [#9314]</para></item>
          <item><para>Fix a bug when an update through a secondary
index is deadlocked it is possible for the deadlock to be ignored,
resulting in a partial update to the data [#9492]</para></item>
          <item><para>Fix a bug where a record could get inserted into
the wrong database when a page was de-allocated from one subdatabase
and re-allocated to another subdatabase maintained within the same
database file  [#9510]</para></item>
          <item><para>Enhance file allocation so that if the operating
system supports decreasing the size of a file and the last page of the
file is freed, it will be returned to the operating system
[#9620]</para></item>
          <item><para>Fix a bug where DB_RUNRECOVERY could be returned
if there was no more disk space while aborting the allocation of a new
page in a database [#9643]</para></item>
          <item><para>Fix a bug where the cryptographic code could
memcpy too many bytes [#9648]</para></item>
          <item><para>Fix a bug with DB-&gt;join() cursors that
resulted in a memory leak and incomplete results [#9763]</para></item>
          <item><para>Disallow cursor delete, followed a cursor put
of the current item across all access methods [#9900]</para></item>
          <item><para>Fix a bug where recovery of operations on
unnamed databases that were never closed, could fail
[#10118]</para></item>
          <item><para>Fix a bug where DB-&gt;truncate of a database
with overflow records that spanned more than one page would loop
[#10151]</para></item>
          <item><para>Improve performance in the database open/close
path  [#10266]</para></item>
          <item><para>Fix a bug that restricted the number of
temporary files that could be created to 127 [#10415]</para></item>
          <item><para>Fix a bug which could cause a "Too many files"
error when trying to create temporary files. Limit the number of
temporary file creation retries. [#10760] [#10773]</para></item>
          <item><para>Fix a memory leak bug with Sequence Numbers
[#11589]</para></item>
          <item><para>Fix a bug on Windows platforms that prevents
database files from growing to over 2GB [#11839]</para></item>
          <item><para>Fix a platform independence bug with sequence
numbers. Existing sequence numbers will be automatically upgraded upon
next access. [#12202]</para></item>
          <item><para>Fix a race between truncate and read/write
operations on Windows platforms that could cause corrupt database
files [#12598]</para></item>
        </items>

        <items name="Btree Access Method Changes">
          <item><para>Fix a bug where a record could get placed on the
wrong page when two threads are simultaneously trying to split a four
level (or greater) Btree [#9542]</para></item>
          <item><para>Fix a bug where calling DB-&gt;truncate() on a
Btree which has duplicate keys that overflow the leaf page would not
properly free the overflow pages and possibly loop
[#10666]</para></item>
        </items>

        <items name="Hash Access Method Changes">
          <item><para>Fix a bug where a delete to a HASH database with
off page duplicates could fail to have the proper lock when deleting
an off page duplicate tree [#9585]</para></item>
          <item><para>Fix a bug where a dirty reader using a HASH
database would leave a lock on the meta page  [#10105]</para></item>
          <item><para>Fix a bug where a DB-&gt;del() on a HASH
database supporting dirty reads could fail to upgrade a WWRITE lock to
a WRITE lock when deleting an off page duplicate
[#10649]</para></item>
        </items>

        <items name="Queue Access Method Changes">
          <item><para>Fix a bug where DB_CONSUME_WAIT may loop rather
than wait for a new record to enter the queue, if the queue gets into
a state where there are only deleted records between the head and the
end of queue [#9215]</para></item>
          <item><para>Fix a bug where a Queue extent file could be
closed when it was empty, even if a thread was still accessing a page
from that file [#9291]</para></item>
          <item><para>Fix a bug where DBC-&gt;c_put(key, data,
DB_CURRENT) where inserting a new record after the current record had
been deleted was returning DB_KEYEMPTY [#9314]</para></item>
          <item><para>Fix a bug where a Queue extent file could be
reported as not found if a race condition was encountered between
removing the file and writing out a stale buffer
[#9462]</para></item>
          <item><para>Fix a bug where the Queue access method might
fail to release a record lock when running without transactions
[#9487]</para></item>
          <item><para>Add DB_INORDER flag for Queue databases to
guarantee FIFO (First In, First Out) ordering when using DB_CONSUME or
DB_CONSUME_WAIT  [#9689]</para></item>
          <item><para>Fix a bug where remove and rename calls could
fail with a "Permission denied" error  [#9775]</para></item>
          <item><para>Fix a bug where aborting a transaction that
opened and renamed a queue database using extents could leave some of
the extent files with the wrong name on Windows  [#9781]</para></item>
          <item><para>Fix a bug where a db_dump of a queue database
could return an error at the end of the queue if the head or tail of
the queue is the first record on a page  [#10215]</para></item>
          <item><para>Fix a race condition which would leave a Queue
extent file open until the database handle was closed, preventing it
from being removed [#10591]</para></item>
          <item><para>Fix a bug where a deadlock of a put on a
database handle with dirty readers could generate a lock downgrade
error  [#10678]</para></item>
          <item><para>Fix a bug which caused DB_SET_RANGE and
DB_GET_BOTH_RANGE to not return the next record when an exact match
was not found [#10860]</para></item>
        </items>

        <items name="Recno Access Method Changes">
          <item><para>Fix a bug where the key/data counts returned by
the Db-&gt;stat method for Recno databases did not match the
documentation [#8639]</para></item>
          <item><para>Fix a bug where DBC-&gt;c_put(key, data,
DB_CURRENT) where inserting a new record after the current record had
been deleted was returning DB_KEYEMPTY [#9314]</para></item>
        </items>

        <items name="C++-specific API Changes">
          <item><para>Change DbException to extend std::exception,
making it possible for applications to catch all exceptions in one
place [#10022]</para></item>
          <item><para>Fix a bug where errors during transaction
destructors (commit, abort) could cause an invalid memory access
[#10302]</para></item>
          <item><para>Fix a bug that could lead to a read through an
uninitialized pointer when a DbLockNotGrantedException is thrown
[#10470]</para></item>
          <item><para>Fix a bug in the C++ DbEnv::rep_elect method API
where the arguments were swapped, leading to an "Invalid Argument"
return when that method is called[#11906]</para></item>
        </items>

        <items name="Java-specific API Changes">
          <item><para>Fix a bug where the Java API did not respect
non-zero return values from secondaryKeyCreate, including
DB_DONOTINDEX [#9474]</para></item>
          <item><para>Fix a bug where a self-deadlock occurred with a
non-transactional class catalog database used in a transactional
environment. The bug only occurred when the collections API was not
used for starting transactions. [#9521]</para></item>
          <item><para>Improve Javadoc for the Java API
[#9614]</para></item>
          <item><para>Improve memory management and performance when
large byte arrays are being passed to DB methods [#9801]</para></item>
          <item><para>Improve performance of accessing statistics
information from the Java API [#9835]</para></item>
          <item><para>Allow Java application to run without DB_THREAD
so they can be used as RPC clients [#10097]</para></item>
          <item><para>Fix a bug where an uninitialized pointer is
dereferenced for logArchive(Db.DB_ARCH_REMOVE) [#10225]</para></item>
          <item><para>Fix a bug in the Collections API where a
deadlock exception could leave a cursor open [#10516]</para></item>
          <item><para>Fix the replication callback in the Java API so
that the parameter names match the C API [#10550]</para></item>
          <item><para>Add get methods to the Java statistics classes
[#10807]</para></item>
          <item><para>Fix bugs in the Java API handling of null home
directories and environments opened without a memory
pool[#11424]</para></item>
          <item><para>Fix the Java API in the non-crypto package
[#11752]</para></item>
          <item><para>Fix a bug that would cause corruption of error
prefix strings [#11967]</para></item>
          <item><para>Fix handling of LSNs in the Java API
[#12223]</para></item>
          <item><para>Don't throw a NullPointerException if the list
of files returned by log_archive is empty [#12383]</para></item>
        </items>

        <items name="RPC-specific Client/Server Changes">
          <item><para>Add support for 64-bit and ANSI C
implementations of the RPCGEN utility [#9548]</para></item>
          <item><para>Fix a small memory leak in RPC clients
[#9595]</para></item>
          <item><para>Fix a bug in the RPC server to avoid
self-deadlock by always setting DB_TXN_NOWAIT [#10181]</para></item>
          <item><para>Fix a bug in the RPC server so that if it times
out an environment, it first closes all the db handles in that
environment [#10623]</para></item>
        </items>

        <items name="Replication Changes">
          <item><para>Add an Environment ID to distinguish between
clients from different replication groups [#7786]</para></item>
          <item><para>Add "number of votes required" and "flags"
parameters to DB_ENV-&gt;rep_elect() method [#7812]</para></item>
          <item><para>Fix a bug where a client's env_openfiles pass
could start with the wrong LSN. This could result in very long initial
sync-up times for clients joining a replication group.
[#8635]</para></item>
          <item><para>Add election generation information to
replication to support Paxos compliance [#9068]</para></item>
          <item><para>Add rep019 to test running normal recovery on
clients to make sure we synch to the correct LSNs
[#9151]</para></item>
          <item><para>Remove support for logs-only replication
clients. Use of the DB_REP_LOGSONLY flag to the DB_ENV-&gt;rep_start()
method should be replaced with the DB_REP_CLIENT flag.
[#9331]</para></item>
          <item><para>Fix a bug where replication clients fail to lock
all the necessary pages when applying updates when there are more than
one database in the transaction  [#9569]</para></item>
          <item><para>Fix a bug in replication elections where when
elections are called by multiple threads the wrong master could get
elected  [#9770]</para></item>
          <item><para>Fix a bug where the master could get a
DB_REP_OUTDATED error. Instead send an OUTDATED message to the client.
[#9881]</para></item>
          <item><para>Add support for automatic initialization of
replication clients [#9927]</para></item>
          <item><para>Modify replication timestamp so that
non-replication client applications can get a DB_REP_HANDLE_DEAD
[#9986]</para></item>
          <item><para>Add a new DB_REP_STARTUPDONE return value for
rep_process_message() and st_startup_done to rep_stat() to indicate
when a client has finished syncing up to a master and is processing
"live" messages [#10310]</para></item>
          <item><para>Add _pp to secondary handles, add RPRINT, fix a
deadlock [#10429]</para></item>
          <item><para>Fix a bug where an old client (and no master)
that dropped the ALIVE message would never update to the current
generation [#10469]</para></item>
          <item><para>Fix a bug where a message could get sent to a
new client before NEWSITE has been returned to the application.
Broadcast instead. [#10508]</para></item>
          <item><para>Fix a crash when verbose replication messages
are configured and a NULL DB_LSN pointer is passed to
rep_process_message [#10508]</para></item>
          <item><para>Add code to respect set_rep_limit in LOG_REQ
processing [#10716]</para></item>
          <item><para>Fix a synchronization problem between
replication recovery and database open [#10731]  </para></item>
          <item><para>Change elections to adjust timeout if egen
changes while we are waiting [#10686]</para></item>
          <item><para>Client perm messages now return ISPERM/NOTPERM
instead of 0 [#10855] [#10905]</para></item>
          <item><para>Fix a race condition during rep_start when a
role change occurs. Fix memory leaks. [#11030]</para></item>
          <item><para>Fix problems with duplicate records. A failure
will no longer occur if the records are old records (LOG_MORE) and
archived. [#11090]</para></item>
          <item><para>Fix a bug where the replication temporary
database would grow during automatic client initialization
[#11090]</para></item>
          <item><para>Add throttling to PAGE_REQ
[#11130]</para></item>
          <item><para>Remove optimization-causing problems with
racing threads in rep_verify_match [#11208]</para></item>
          <item><para>Fix memory leaks [#11239]</para></item>
          <item><para>Fix an initialization bug when High
Availability configurations are combined with private database
environments, which can cause intermittent failures
[#11795]</para></item>
          <item><para>Fix a bug in the C++ DbEnv::rep_elect method
API where the arguments were swapped, leading to an "Invalid Argument"
return when that method is called [#11906]</para></item>
        </items>

        <items name="Locking Subsystem Changes">
          <item><para>Fix a bug where a deadlock of an upgrade from a
dirty read to a write lock during an aborted transaction, may not be
detected  [#7143]</para></item>
          <item><para>Add support for Degree 2 isolation
[#8689]</para></item>
          <item><para>Change the system to return DB_LOCK_DEADLOCK if
a transaction attempts to get new locks after it has been selected as
the deadlock victim [#9111]</para></item>
          <item><para>Fix a bug where when configured to support dirty
reads, a writer may not downgrade a write lock as soon as possible,
potentially blocking dirty readers [#9197]</para></item>
          <item><para>Change the test-and-set mutex implementation to
avoid interlocked instructions when we know the instruction is
unlikely to succeed [#9204]</para></item>
          <item><para>Fix a bug where a thread supporting dirty
readers can get blocked while trying to get a write lock. It will
allocate a new lock rather than using an existing WAS_WRITE lock when
it becomes unblocked, causing the application to hang.
[#10093]</para></item>
          <item><para>The deadlock detector will now note that a
parent transaction should be considered "in abort" if one of its
children is [#10394]</para></item>
          <item><para>Remove a deadlock where database closes could
deadlock with page acquisition [#10726]</para></item>
          <item><para>Fix a bug where a dirty reader could read an
overflow page that was about to be deleted [#10979]</para></item>
          <item><para>Fix a bug that failed to downgrade existing
write locks during a btree page split when supporting dirty reads
[#10983]</para></item>
          <item><para>Fix a bug that would fail to upgrade a write
lock when moving a cursor off a previously deleted record
[#11042]</para></item>
        </items>

        <items name="Logging Subsystem Changes">
          <item><para>Fix a bug where recovery could leave too many
files open  [#9452]</para></item>
          <item><para>Fix a bug where aborting a transaction with a
file open in it could result in an unrecoverable log file
[#9636]</para></item>
          <item><para>Fix a bug where recovery would not return a
fatal error if the transaction log was corrupted
[#9841]</para></item>
          <item><para>Fix a bug in recovery so that the final
checkpoint no longer tries to flush the log. This will permit recovery
to complete even if there is no disk space to grow the log file.
[#10204]</para></item>
          <item><para>Improve performance of log flushes by
pre-allocating log files and using fdatasync() in preference to
fsync() [#10228]</para></item>
          <item><para>Fix a bug where recovery of a page split after a
non-transactional update to the next page would fail to update the
back pointer [#10421]</para></item>
          <item><para>Fix a bug in log_archive() where
__env_rep_enter() was called twice [#10577]</para></item>
          <item><para>Fix a bug with in-memory logs that could cause a
memory leak in the log region [#11505]</para></item>
        </items>

        <items name="Memory Pool Subsystem Changes">
          <item><para>Fix a bug in the MPOOLFILE file_written flag
value so that checkpoint doesn't repeatedly open, flush and sync files
in the cache for which there are no active application handles
[#9529]</para></item>
        </items>

        <items name="Transaction Subsystem Changes">
          <item><para>Fix a bug where the same transaction ID could
get allocated twice if you wrapped the transaction ID space twice and
then had a very old transaction [#9036]</para></item>
          <item><para>Fix a bug where a transaction abort that
contained a page allocation could loop if the file system was full
[#9461]</para></item>
          <item><para>Fix implementation of DB-&gt;get_transactional() to
match documentation: there is no possibility of error return, only 0
or 1 [#9526]</para></item>
          <item><para>Fix a bug where re-setting any of the
DB_TXN_NOSYNC, DB_TXN_NOT_DURABLE and DB_TXN_WRITE_NOSYNC flags could
fail to clear previous state, potentially leading to incorrect
transactional behavior in the application [#9947]</para></item>
          <item><para>Add a feature to configure the maximum number of
files that a checkpoint will hold open  [#10026]</para></item>
          <item><para>An aborting transaction will no longer generate
an undetected deadlock [#10394]</para></item>
          <item><para>Fix a bug that prevented a child transaction
from accessing a database handle that was opened by its parent
transaction  [#10783]</para></item>
          <item><para>Fix a bug where a checkpoint or a delayed write
in another process could raise an EINVAL error if the database had
been opened with the DB_TXN_NOT_DURABLE flag  [#10824]</para></item>
          <item><para>Fix private transactional environments on 64-bit
systems [#11983]</para></item>
        </items>

        <items name="Utility Changes">
          <item><para>Add debugging and performance tuning information
to db_stat. Add new Berkeley DB handle methods to output debugging
and performance tuning information to a C library FILE handle (C and
C++ APIs only). [#9204]</para></item>
          <item><para>Fix a bug where db_stat could drop core if
DB-&gt;open fails and no subdatabase was specified
[#9273]</para></item>
          <item><para>Add command-line arguments to the db_printlog
utility to restrict the range of log file records that are displayed
[#9307]</para></item>
          <item><para>Fix a bug in the locking statistics where
"current locks" included failed lock requests  [#9314]</para></item>
          <item><para>Fix a bug where db_archive would remove all log
files when --enable-diagnostic and DB_NOTDURABLE were both specified
[#9459]</para></item>
          <item><para>Fix a bug where db_dump with the "-r" flag would
output extra copies of the subdatabase information
[#9808]</para></item>
          <item><para>Fix a bug in db_archive that would cause log
file corruption if the application had configured the environment with
DB_PRIVATE [#9841]</para></item>
          <item><para>Add support in db_load for resetting database
LSNs and file IDs without having to re-load the database
[#9916]</para></item>
          <item><para>Change the DB-&gt;stat() method to take a
transaction handle as an argument, allowing DB-&gt;stat() to be called
from within a transaction [#9920]</para></item>
          <item><para>Fix a bug in db_printlog where only the first
"file"would be displayed for in-memory logs [#11505]</para></item>
          <item><para>Fix a bug that prevented database salvage from
working in Berkeley DB 4.3.21. [#11649]</para></item>
          <item><para>Fix a bug in db_load which made it impossible
to specify more than a single option on the command line
[#11676]</para></item>
        </items>

        <items name="Configuration, Documentation, Portability and Build Changes">
          <item><para>Add pread and pwrite to the list of system calls
applications can replace at run-time [#8954]</para></item>
          <item><para>Add support for UTF-8 encoding of filenames on
Windows [#9122]</para></item>
          <item><para>Remove C++ dependency on snprintf. Compilers on
HPUX 10.20 are missing header file support for snprintf().
[#9284]</para></item>
          <item><para>Change Berkeley DB to not use the open system
call flag O_DIRECT, unless DB configured using --enable-o_direct
[#9298]</para></item>
          <item><para>Fix several problems with mutex alignment on
HP/UX  10.20. [#9404]</para></item>
          <item><para>Fix a memory leak when
HAVE_MUTEX_SYSTEM_RESOURCES is enabled [#9546]</para></item>
          <item><para>Fix a bug in the sec002.tcl test for binary data
[#9626]</para></item>
          <item><para>Fix a bug where filesystem blocks were not being
zeroed out in the On-Time embedded Windows OS [#9640]</para></item>
          <item><para>Fix build problems with the Java API in Visual
Studio .NET 2003 [#9701]</para></item>
          <item><para>Add support for the gcc compiler on the Opteron
platform  [#9725]</para></item>
          <item><para>Add support for the small_footprint build
option for VxWorks  [#9820]</para></item>
          <item><para>Add support for linking of DLLs with MinGW
[#9957]</para></item>
          <item><para>Remove the make target which builds the RPM
package from the Berkeley DB distribution  [#10233]</para></item>
          <item><para>Add a C++/XML example for ex_repquote
[#10380]</para></item>
          <item><para>Fix a bug to link with -lrt only if detected by
configure (Mac OS X issue) [#10418]</para></item>
          <item><para>Fix a bug and link Java and Tcl shared
libraries with -lpthread if required, for mutexes
[#10418]</para></item>
          <item><para>Add support for building Berkeley DB on the HP
NonStop OSS (Tandem) platform [10483]</para></item>
          <item><para>Change Berkeley DB to ignore EAGAIN from system
calls. This fixed problems on NFS mounted databases.
[#10531]</para></item>
          <item><para>Remove a line with bt_compare and bt_prefix
from the db_dump recovery test suite, which can cause failures on
OpenBSD  [#10567]</para></item>
          <item><para>Fix a conflict with the lock_init for building
Berkeley DB on Cygwin [#10582]</para></item>
          <item><para>Add Unicode support for the Berkeley DB Windows
API [#10598]</para></item>
          <item><para>Add support for 64-bit builds on Windows
[#10664]</para></item>
          <item><para>Libtool version is now 1.5.8.
[#10950]</para></item>
          <item><para>Remove -mt compilation flag for HP-UX 11.0
[#11427]</para></item>
          <item><para>Fix a bug to link with -lrt on Solaris to
support fdatasync [#11437]</para></item>
        </items>
      </change>

      <note type="usage">
        <para>The BerkeleyDB and DB_File Perl modules are available in
the following directory:</para>
        <screen>
${SB_INSTALL_PREFIX}/lib/perl5122    # Perl 5.12.2
        </screen>

        <para>This directory is automatically added to the Perl
include.paths.d directory by the postinstall script.</para>
      </note>

      <platform name="HP-UX 11.00">
        <para>Patch <command>PHSS_22543</command> providing the
<command>libstd_v2</command> Standard C++ library is required as the
HP C++ compiler was used.</para>
      </platform>

      <platform name="Tru64 UNIX">
        <para>The latest C++ runtime library is required due to the
usage of the latest Compaq C++ compiler. It is available from the
following locations:</para>
        <unorderedlist>
          <item><para>package CXXREDIST651V37.tar in the support
directory of the CD</para></item>
          <item><para>online support directory <ulink url="ftp://support.thewrittenword.com/dists">ftp://support.thewrittenword.com/dists</ulink></para></item>
          <item><para>directly from Compaq at <ulink url="ftp://ftp.compaq.com/pub/products/C-CXX/Tru64/cxx/cxxredist.htm">ftp://ftp.compaq.com/pub/products/C-CXX/Tru64/cxx/cxxredist.htm</ulink></para></item>
        </unorderedlist>
      </platform>
    </notes>

    <changelog>
      <change date="2011 September 20" revision="6"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Update BerkeleyDB module from 0.38 to
0.49</para></item>
        <item><para>Update DB_File module from 1.820 to
1.824</para></item>
      </change>

      <change date="2010 December 8" revision="5"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Update Tcl dependency from 8.5.6 to
8.5.10</para></item>
        <item><para>Update GCC dependency from 4.2.4 to
4.4.6</para></item>
        <item><para>Add 5.12.2 perl modules</para></item>
        <item><para>Incorporate db-4.7.25 patch 4 - Fix a bug which
could cause a SEGV in __repmgr_available_site if a site becomes master
after winning an election but is still processing client
messages.</para></item>
      </change>

      <change date="2010 November 15" revision="4"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Add support for AIX 7.1</para></item>
      </change>

      <change date="2010 July 1" revision="3"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Add support for RHEL 6</para></item>
      </change>

      <change date="2010 January 16" revision="2"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Recompile without -xtarget=opteron for 64-bit
binaries on Solaris/x86 to avoid 3DNow extension</para></item>
      </change>
    </changelog>
  </program>
</programs>
