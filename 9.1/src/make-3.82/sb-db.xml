<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="make" version="3.82" revision="3">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}382</install-name>

    <sources>
      <source checksum="1a11100f3c63fcf5753818e59d63088f"
        checksum-type="md5" size="1242186"
        path="src/make-3.82.tar.bz2"/>
      <patch checksum="d3f9d836ad421ce9d78c15508b39f228"
        checksum-type="md5" size="262839"
        path="src/make-3.82.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="gettext" var="GETTEXT"
        install-name="gettext018"
        add-path="prepend">v&gt;=0.18.1.1</depend>
      <depend program="libiconv" var="LIBICONV"
        install-name="libiconv113"
        add-path="prepend">v&gt;=1.13.1</depend>
    </dependencies>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"

  # realpath() broken
  export ac_cv_func_realpath=no ;;
ia64*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  LDFLAGS="-Wl,+nodefaultrpath" ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="+O2 -Ae +Onofltacc +ESlit +DAportable \
+Oentrysched +Odataprefetch +Onolimit" ;;
*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit" ;;
*-irix*)
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1009,1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0" ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro" ;;
*-osf*)
  CC=cc CFLAGS="-msym -O2 -readonly_strings" ;;
i386*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis" ;;
esac

${SHELL} ./configure CC="${CC:=gcc}" CFLAGS="${CFLAGS=-O2}" \
${SB_VAR_LIBICONV+--with-libiconv-prefix=${SB_VAR_LIBICONV}} \
${SB_VAR_GETTEXT+--with-libintl-prefix=${SB_VAR_GETTEXT}} \
--datarootdir=${_datadir} --datadir=${_datadir}  \
--disable-dependency-tracking \
--mandir="${SB_INSTALL_PREFIX}/man" \
--infodir="${SB_INSTALL_PREFIX}/info" \
--program-prefix=g --prefix=${SB_INSTALL_PREFIX}

# rebuild info files
test -f doc/make.info && rm doc/make.info*

:
]]>
    </configure>

    <build>
<![CDATA[
gmake MAKEINFOFLAGS="--no-split"
]]>
    </build>

    <test>
      <dependencies>
        <depend program="perl" var="PERL"
          type="build">v==5.12.2</depend>
      </dependencies>
<![CDATA[
./make check PERL="${SB_VAR_PERL}/bin/perl"
]]>
    </test>

    <install>
<![CDATA[
./make install

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/texinfo
${SB_PATH_INSTALL} -m 644 -o root -g 0 doc/fdl.texi doc/make.texi \
doc/make-stds.texi ${_docdir}/texinfo


# setgid unnecessary
case "${SB_SYSTYPE}" in
*-linux*)
  chgrp 0 ${SB_INSTALL_PREFIX}/bin/gmake
  chmod g-s ${SB_INSTALL_PREFIX}/bin/gmake ;;
esac
]]>
    </install>

    <licenses>
      <license path="gpl-3.license"/>
    </licenses>

    <notes>
      <change from="3.81" to="3.82">
        <item><para>Compiling GNU make now requires a conforming ISO C
1989 compiler and standard runtime library.</para></item>
        <item><para>WARNING: Future backward-incompatibility!
Wildcards are not documented as returning sorted values, but up to and
including this release the results have been sorted and some makefiles
are apparently depending on that.  In the next release of GNU make,
for performance reasons, we may remove that sorting.  If your
makefiles require sorted results from wildcard expansions, use the
$(sort ...) function to request it explicitly.</para></item>
        <item><para>WARNING: Backward-incompatibility! The POSIX
standard for make was changed in the 2008 version in a fundamentally
incompatible way: make is required to invoke the shell as if the '-e'
flag were provided.  Because this would break many makefiles that have
been written to conform to the original text of the standard, the
default behavior of GNU make remains to invoke the shell with simply
'-c'. However, any makefile specifying the .POSIX special target will
follow the new POSIX standard and pass '-e' to the shell.  See also
.SHELLFLAGS below.</para></item>
        <item><para>WARNING: Backward-incompatibility! The '$?'
variable now contains all prerequisites that caused the target to be
considered out of date, even if they do not exist (previously only
existing targets were provided in $?).</para></item>
        <item><para>WARNING: Backward-incompatibility! As a result of
parser enhancements, three backward-compatibility issues exist: first,
a prerequisite containing an "=" cannot be escaped with a backslash
any longer.  You must create a variable containing an "=" and use that
variable in the prerequisite.  Second, variable names can no longer
contain whitespace, unless you put the whitespace in a variable and
use the variable.  Third, in previous versions of make it was
sometimes not flagged as an error for explicit and pattern targets to
appear in the same rule.  Now this is always reported as an
error.</para></item>
        <item><para>WARNING: Backward-incompatibility! The
pattern-specific variables and pattern rules are now applied in the
shortest stem first order instead of the definition order (variables
and rules with the same stem length are still applied in the
definition order). This produces the usually-desired behavior where
more specific patterns are preferred. To detect this feature search
for 'shortest-stem' in the .FEATURES special variable.</para></item>
        <item><para>WARNING: Backward-incompatibility! The library
search behavior has changed to be compatible with the standard linker
behavior. Prior to this version for prerequisites specified using the
-lfoo syntax make first searched for libfoo.so in the current
directory, vpath directories, and system directories. If that didn't
yield a match, make then searched for libfoo.a in these directories.
Starting with this version make searches first for libfoo.so and then
for libfoo.a in each of these directories in order.</para></item>
        <item><para>New command line option: --eval=STRING causes
STRING to be evaluated as makefile syntax (akin to using the $(eval
...) function).  The evaluation is performed after all default rules
and variables are defined, but before any makefiles are
read.</para></item>
        <item><para>New special variable: .RECIPEPREFIX allows you to
reset the recipe introduction character from the default (TAB) to
something else.  The first character of this variable value is the new
recipe introduction character.  If the variable is set to the empty
string, TAB is used again. It can be set and reset at will; recipes
will use the value active when they were first parsed.  To detect this
feature check the value of $(.RECIPEPREFIX).</para></item>
        <item><para>New special variable: .SHELLFLAGS allows you to
change the options passed to the shell when it invokes recipes.  By
default the value will be "-c" (or "-ec" if .POSIX is
set).</para></item>
        <item><para>New special target: .ONESHELL instructs make to
invoke a single instance of the shell and provide it with the entire
recipe, regardless of how many lines it contains.  As a special
feature to allow more straightforward conversion of makefiles to use
.ONESHELL, any recipe line control characters ('@', '+', or '-') will
be removed from the second and subsequent recipe lines.  This happens
_only_ if the SHELL value is deemed to be a standard POSIX-style
shell.  If not, then no interior line control characters are removed
(as they may be part of the scripting language used with the alternate
SHELL).</para></item>
        <item><para>New variable modifier 'private': prefixing a
variable assignment with the modifier 'private' suppresses inheritance
of that variable by prerequisites.  This is most useful for target-
and pattern-specific variables.</para></item>
        <item><para>New make directive: 'undefine' allows you to
undefine a variable so that it appears as if it was never set. Both
$(flavor) and $(origin) functions will return 'undefined' for such a
variable. To detect this feature search for 'undefine' in the
.FEATURES special variable.</para></item>
        <item><para>The parser for variable assignments has been
enhanced to allow multiple modifiers ('export', 'override', 'private')
on the same line as variables, including define/endef variables, and
in any order.  Also, it is possible to create variables and targets
named as these modifiers.</para></item>
        <item><para>The 'define' make directive now allows a variable
assignment operator after the variable name, to allow for simple,
conditional, or appending multi-line variable
assignment.</para></item>
      </change>
    </notes>

    <changelog>
      <change date="2010 November 25" revision="3"
      author="Albert Chin-A-Young" email="pogma@thewrittenword.com">
        <item><para>Update gettext dependency from 0.17 to
0.18.1.1</para></item>
        <item><para>Update libiconv dependency from 1.12 to
1.13.1</para></item>
      </change>

      <change date="2010 November 17" revision="2"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Update gettext dependency from 0.14.1 to
0.17</para></item>
        <item><para>Update libiconv dependency from 1.9.2 to
1.12</para></item>
        <item><para>Update perl dependency from 5.8.6 to
5.8.8</para></item>
      </change>
    </changelog>
  </program>
</programs>
