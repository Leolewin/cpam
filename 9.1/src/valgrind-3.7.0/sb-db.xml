<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="valgrind" version="3.7.0" revision="1"
  systype="*-linux*">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}37</install-name>

    <sources>
      <source checksum="a855fda56edf05614f099dca316d1775"
        checksum-type="md5" size="6624216"
        path="src/valgrind-3.7.0.tar.bz2"/>
      <patch checksum="31fab8ae160d380a91d649c843d9bcf0"
        checksum-type="md5" size="3861"
        path="src/valgrind-3.7.0.tww.patch"/>
      <patch checksum="e970c293f2ab5b9a53f2f01ba9e31d5f"
        checksum-type="md5" size="143087"
        path="src/valgrind-3.7.0.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="perl" add-path="prepend"
        type="build">v==5.12.2</depend>
    </dependencies>

    <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <configure>
<![CDATA[
${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
--disable-dependency-tracking --mandir="${SB_INSTALL_PREFIX}/man" \
--prefix=${SB_INSTALL_PREFIX}

# fix path to manual.html
${SB_PATH_SED} -i -e "\
s!@DOCDIR@!${_docdir}!;" docs/valgrind.1
]]>
    </configure>

    <build>
<![CDATA[
gmake pkgincludedir="${SB_INSTALL_PREFIX}/include" \
pkglibdir=${SB_INSTALL_PREFIX_LIB} \
valdir="${SB_INSTALL_PREFIX}/lib"
]]>
    </build>

    <install>
<![CDATA[
gmake install pkgincludedir="${SB_INSTALL_PREFIX}/include" \
pkglibdir=${SB_INSTALL_PREFIX_LIB} \
valdir="${SB_INSTALL_PREFIX}/lib" DOCDIR=${_docdir}

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/internals
${SB_PATH_INSTALL} -m 644 -o root -g 0 docs/internals/* \
${_docdir}/internals
]]>
    </install>

    <notes>
      <change from="3.6.0" to="3.6.1">
        <item><para>3.6.1 is a bug fix release. It adds support for
some SSE4 instructions that were omitted in 3.6.0 due to lack of time.
Initial support for glibc-2.13 has been added. A number of bugs
causing crashing or assertion failures have been fixed.</para>
        <unorderedlist>
          <item><para>188572: Valgrind on Mac should suppress setenv()
mem leak</para></item>
          <item><para>194402: vex amd64-&gt;IR: 0x48 0xF 0xAE 0x4
(proper FX{SAVE,RSTOR} support)</para></item>
          <item><para>210481: vex amd64-&gt;IR: Assertion "sz == 2 ||
sz == 4" failed (REX.W POPQ)</para></item>
          <item><para>246152: callgrind internal error after
pthread_cancel on 32 Bit Linux</para></item>
          <item><para>250038: ppc64: Altivec LVSR and LVSL
instructions fail their regtest</para></item>
          <item><para>254420: memory pool tracking broken
</para></item>
          <item><para>254957: Test code failing to compile due to
changes in memcheck.h</para></item>
          <item><para>255009: helgrind/drd: crash on chmod with
invalid parameter</para></item>
          <item><para>255130: readdwarf3.c parse_type_DIE confused by
GNAT Ada types</para></item>
          <item><para>255355: helgrind/drd: crash on threaded programs
doing fork</para></item>
          <item><para>255358: == 255355</para></item>
          <item><para>255418: (SSE4.x) rint call compiled with
ICC</para></item>
          <item><para>255822: --gen-suppressions can create invalid
files: "too many callers [...]"</para></item>
          <item><para>255888: closing valgrindoutput tag outputted to
log-stream on error</para></item>
          <item><para>255963: (SSE4.x) vex amd64-&gt;IR: 0x66 0xF 0x3A
0x9 0xDB 0x0 (ROUNDPD)</para></item>
          <item><para>255966: Slowness when using mempool
annotations</para></item>
          <item><para>256387: vex x86-&gt;IR: 0xD4 0xA 0x2 0x7 (AAD
and AAM)</para></item>
          <item><para>256600: super-optimized strcasecmp() false
positive</para></item>
          <item><para>256669: vex amd64-&gt;IR: Unhandled LOOPNEL insn
on amd64</para></item>
          <item><para>256968: (SSE4.x) vex amd64-&gt;IR: 0x66 0xF 0x38
0x10 0xD3 0x66 (BLENDVPx)</para></item>
          <item><para>257011: (SSE4.x) vex amd64-&gt;IR: 0x66 0xF 0x3A
0xE 0xFD 0xA0 (PBLENDW)</para></item>
          <item><para>257063: (SSE4.x) vex amd64-&gt;IR: 0x66 0xF 0x3A
0x8 0xC0 0x0 (ROUNDPS)</para></item>
          <item><para>257276: Missing case in memcheck
--track-origins=yes</para></item>
          <item><para>258870: (SSE4.x) Add support for EXTRACTPS SSE
4.1 instruction</para></item>
          <item><para>261966: (SSE4.x) support for CRC32B and CRC32Q
is lacking (also CRC32{W,L})</para></item>
          <item><para>262985: VEX regression in valgrind 3.6.0 in
handling PowerPC VMX</para></item>
          <item><para>262995: (SSE4.x) crash when trying to valgrind
gcc-snapshot (PCMPxSTRx $0)</para></item>
          <item><para>263099: callgrind_annotate counts Ir improperly
[...]</para></item>
          <item><para>263877: undefined coprocessor instruction on
ARMv7</para></item>
          <item><para>265964: configure FAIL with
glibc-2.13</para></item>
          <item><para>n-i-bz: Fix compile error w/ icc-12.x in
guest_arm_toIR.c</para></item>
          <item><para>n-i-bz: Docs: fix bogus descriptions for
VALGRIND_CREATE_BLOCK et al</para></item>
          <item><para>n-i-bz: Massif: don't assert on shmat() with
--pages-as-heap=yes</para></item>
          <item><para>n-i-bz: Bug fixes and major speedups for the
exp-DHAT space profiler</para></item>
          <item><para>n-i-bz: DRD: disable --free-is-write due to
implementation difficulties</para></item>
        </unorderedlist></item>
      </change>

      <change from="3.5.0" to="3.6.0">
        <items name="PLATFORM CHANGES">
          <item><para>Support for ARM/Linux. Valgrind now runs on
ARMv7 capable CPUs running Linux. It is known to work on Ubuntu
10.04, Ubuntu 10.10, and Maemo 5, so you can run Valgrind on your
Nokia N900 if you want.</para>
          <para>This requires a CPU capable of running the ARMv7-A
instruction set (Cortex A5, A8 and A9). Valgrind provides fairly
complete coverage of the user space instruction set, including ARM and
Thumb integer code, VFPv3, NEON and V6 media instructions. The
Memcheck, Cachegrind and Massif tools work properly; other tools work
to varying degrees.</para></item>
          <item><para>Support for recent Linux distros (Ubuntu 10.10
and Fedora 14), along with support for recent releases of the
underlying toolchain components, notably gcc-4.5 and
glibc-2.12.</para></item>
          <item><para>Support for Mac OS X 10.6, both 32- and 64-bit
executables. 64-bit support also works much better on OS X 10.5, and
is as solid as 32-bit support now.</para></item>
          <item><para>Support for the SSE4.2 instruction set. SSE4.2
is supported in 64-bit mode. In 32-bit mode, support is only
available up to and including SSSE3. Some exceptions: SSE4.2 AES
instructions are not supported in 64-bit mode, and 32-bit mode does in
fact support the bare minimum SSE4 instructions to needed to run
programs on Mac OS X 10.6 on 32-bit targets.</para></item>
          <item><para>Support for IBM POWER6 cpus has been improved.
The Power ISA up to and including version 2.05 is
supported.</para></item>
        </items>

        <items name="TOOL CHANGES">
          <item><para>Cachegrind has a new processing script, cg_diff,
which finds the difference between two profiles. It's very useful for
evaluating the performance effects of a change in a
program.</para>
          <para>Related to this change, the meaning of cg_annotate's
(rarely-used) --threshold option has changed; this is unlikely to
affect many people, if you do use it please see the user manual for
details.</para></item>
          <item><para>Callgrind now can do branch prediction
simulation, similar to Cachegrind. In addition, it optionally can
count the number of executed global bus events. Both can be used for
a better approximation of a "Cycle Estimation" as derived event (you
need to update the event formula in KCachegrind
yourself).</para></item>
          <item><para>Cachegrind and Callgrind now refer to the LL
(last-level) cache rather than the L2 cache. This is to accommodate
machines with three levels of caches -- if Cachegrind/Callgrind
auto-detects the cache configuration of such a machine it will run the
simulation as if the L2 cache isn't present. This means the results
are less likely to match the true result for the machine, but
Cachegrind/Callgrind's results are already only approximate, and
should not be considered authoritative. The results are still useful
for giving a general idea about a program's locality.</para></item>
          <item><para>Massif has a new option, --pages-as-heap, which
is disabled by default. When enabled, instead of tracking allocations
at the level of heap blocks (as allocated with malloc/new/new[]), it
instead tracks memory allocations at the level of memory pages (as
mapped by mmap, brk, etc). Each mapped page is treated as its own
block. Interpreting the page-level output is harder than the
heap-level output, but this option is useful if you want to account
for every byte of memory used by a program.</para></item>
          <item><para>DRD has two new command-line options:
--free-is-write and --trace-alloc. The former allows to detect
reading from already freed memory, and the latter allows tracing of
all memory allocations and deallocations.</para></item>
          <item><para>DRD has several new annotations. Custom barrier
implementations can now be annotated, as well as benign races on
static variables.</para></item>
          <item><para>DRD's happens before / happens after annotations
have been made more powerful, so that they can now also be used to
annotate e.g. a smart pointer implementation.</para></item>
          <item><para>Helgrind's annotation set has also been
drastically improved, so as to provide to users a general set of
annotations to describe locks, semaphores, barriers and condition
variables. Annotations to describe thread-safe reference counted heap
objects have also been added.</para></item>
          <item><para>Memcheck has a new command-line option,
--show-possibly-lost, which is enabled by default. When disabled, the
leak detector will not show possibly-lost blocks.</para></item>
          <item><para>A new experimental heap profiler, DHAT (Dynamic
Heap Analysis Tool), has been added. DHAT keeps track of allocated
heap blocks, and also inspects every memory reference to see which
block (if any) is being accessed. This gives a lot of insight into
block lifetimes, utilisation, turnover, liveness, and the location of
hot and cold fields. You can use DHAT to do hot-field
profiling.</para></item>
        </items>

        <items name="OTHER CHANGES">
          <item><para>Improved support for unfriendly self-modifying
code: the extra overhead incurred by --smc-check=all has been reduced
by approximately a factor of 5 as compared with 3.5.0.</para></item>
          <item><para>Ability to show directory names for source files
in error messages. This is combined with a flexible mechanism for
specifying which parts of the paths should be shown. This is enabled
by the new flag --fullpath-after.</para></item>
          <item><para>A new flag, --require-text-symbol, which will
stop the run if a specified symbol is not found it a given shared
object when it is loaded into the process. This makes advanced
working with function intercepting and wrapping safer and more
reliable.</para></item>
          <item><para>Improved support for the Valkyrie GUI, version
2.0.0. GUI output and control of Valgrind is now available for the
tools Memcheck and Helgrind. XML output from Valgrind is available
for Memcheck, Helgrind and exp-Ptrcheck.</para></item>
          <item><para>More reliable stack unwinding on amd64-linux,
particularly in the presence of function wrappers, and with gcc-4.5
compiled code.</para></item>
          <item><para>Modest scalability (performance improvements)
for massive long-running applications, particularly for those with
huge amounts of code.</para></item>
          <item><para>Support for analyzing programs running under
Wine with has been improved. The header files
&lt;valgrind/valgrind.h&gt;, &lt;valgrind/memcheck.h&gt; and
&lt;valgrind/drd.h&gt; can now be used in Windows-programs compiled
with MinGW or one of the Microsoft Visual Studio
compilers.</para></item>
          <item><para>A rare but serious error in the 64-bit x86 CPU
simulation was fixed. The 32-bit simulator was not affected. This did
not occur often, but when it did would usually crash the program under
test. Bug 245925.</para></item>
          <item><para>A large number of bugs were fixed. These are
shown below.</para></item>
          <item><para>A number of bugs were investigated, and were
candidates for fixing, but are not fixed in 3.6.0, due to lack of
developer time. They may get fixed in later releases. They
are:</para>
          <unorderedlist>
            <item><para>194402 vex amd64-&gt;IR: 0x48 0xF 0xAE 0x4 0x24
0x49 (FXSAVE64)</para></item>
            <item><para>212419 false positive "lock order violated"
(A+B vs A) </para></item>
            <item><para>213685 Undefined value propagates past
dependency breaking instruction</para></item>
            <item><para>216837 Incorrect instrumentation of
NSOperationQueue on Darwin </para></item>
            <item><para>237920 valgrind segfault on fork failure
</para></item>
            <item><para>242137 support for code compiled by
LLVM-2.8</para></item>
            <item><para>242423 Another unknown Intel cache config
value </para></item>
            <item><para>243232 Inconsistent Lock Orderings report with
trylock </para></item>
            <item><para>243483 ppc: callgrind triggers VEX assertion
failure </para></item>
            <item><para>243935 Helgrind: implementation of
ANNOTATE_HAPPENS_BEFORE() is wrong</para></item>
            <item><para>244677 Helgrind crash hg_main.c:616
(map_threads_lookup): Assertion 'thr' failed. </para></item>
            <item><para>246152 callgrind internal error after
pthread_cancel on 32 Bit Linux </para></item>
            <item><para>249435 Analyzing wine programs with callgrind
triggers a crash </para></item>
            <item><para>250038 ppc64: Altivec lvsr and lvsl
instructions fail their regtest</para></item>
            <item><para>250065 Handling large allocations
</para></item>
            <item><para>250101 huge "free" memory usage due to
m_mallocfree.c "superblocks fragmentation"</para></item>
            <item><para>251569 vex amd64-&gt;IR: 0xF 0x1 0xF9 0x8B 0x4C
0x24 (RDTSCP)</para></item>
            <item><para>252091 Callgrind on ARM does not detect
function returns correctly</para></item>
            <item><para>252600 [PATCH] Allow lhs to be a pointer for
shl/shr</para></item>
            <item><para>254420 memory pool tracking
broken</para></item>
            <item><para>n-i-bz support for adding symbols for JIT
generated code</para></item>
          </unorderedlist></item>
          <item><para>The following bugs have been fixed or resolved.
Note that "n-i-bz" stands for "not in bugzilla" -- that is, a bug that
was reported to us but never got a bugzilla entry. We encourage you
to file bugs in bugzilla (http://bugs.kde.org/enter_valgrind_bug.cgi)
rather than mailing the developers (or mailing lists) directly -- bugs
that are not entered into bugzilla tend to get forgotten about or
ignored.</para>
          <para>To see details of a given bug, visit <ulink url="https://bugs.kde.org/show_bug.cgi?id=XXXXXX">https://bugs.kde.org/show_bug.cgi?id=XXXXXX</ulink>
where XXXXXX is the bug number as listed below.</para>
          <unorderedlist>
            <item><para>135264 dcbzl instruction missing</para></item>
            <item><para>142688 == 250799</para></item>
            <item><para>153699 Valgrind should report unaligned reads
with movdqa</para></item>
            <item><para>180217 == 212335</para></item>
            <item><para>190429 Valgrind reports lost of errors in
ld.so with x86_64 2.9.90 glibc </para></item>
            <item><para>197266 valgrind appears to choke on the xmms
instruction "roundsd" on x86_64 </para></item>
            <item><para>197988 Crash when demangling very large symbol
names</para></item>
            <item><para>202315 unhandled syscall: 332
(inotify_init1)</para></item>
            <item><para>203256 Add page-level profiling to
Massif</para></item>
            <item><para>205093 dsymutil=yes needs quotes, locking
(partial fix)</para></item>
            <item><para>205241 Snow Leopard 10.6 support (partial
fix)</para></item>
            <item><para>206600 Leak checker fails to upgrade indirect
blocks when their parent becomes reachable </para></item>
            <item><para>210935 port valgrind.h (not valgrind) to win32
so apps run under wine can make client requests</para></item>
            <item><para>211410 vex amd64-&gt;IR: 0x15 0xFF 0xFF 0x0 0x0
0x89 within Linux ip-stack checksum functions </para></item>
            <item><para>212335 unhandled instruction bytes: 0xF3 0xF
0xBD 0xC0 (lzcnt %eax,%eax) </para></item>
            <item><para>213685 Undefined value propagates past
dependency breaking instruction (partial fix)</para></item>
            <item><para>215914 Valgrind inserts bogus empty
environment variable </para></item>
            <item><para>217863 == 197988</para></item>
            <item><para>219538 adjtimex syscall wrapper wrong in
readonly adjtime mode </para></item>
            <item><para>222545 shmat fails under valgind on some arm
targets </para></item>
            <item><para>222560 ARM NEON support </para></item>
            <item><para>230407 == 202315</para></item>
            <item><para>231076 == 202315</para></item>
            <item><para>232509 Docs build fails with formatting inside
&lt;title&gt;&lt;/title&gt; elements </para></item>
            <item><para>232793 == 202315</para></item>
            <item><para>235642 [PATCH] syswrap-linux.c: support evdev
EVIOCG* ioctls </para></item>
            <item><para>236546 vex x86-&gt;IR: 0x66 0xF 0x3A
0xA</para></item>
            <item><para>237202 vex amd64-&gt;IR: 0xF3 0xF 0xB8 0xC0 0x49
0x3B </para></item>
            <item><para>237371 better support for
VALGRIND_MALLOCLIKE_BLOCK </para></item>
            <item><para>237485 symlink (syscall 57) is not supported
on Mac OS </para></item>
            <item><para>237723 sysno == 101 exp-ptrcheck: the
'impossible' happened: unhandled syscall </para></item>
            <item><para>238208 is_just_below_ESP doesn't take into
account red-zone </para></item>
            <item><para>238345 valgrind passes wrong $0 when executing
a shell script </para></item>
            <item><para>238679 mq_timedreceive syscall doesn't flag
the reception buffer as "defined"</para></item>
            <item><para>238696 fcntl command F_DUPFD_CLOEXEC not
supported </para></item>
            <item><para>238713 unhandled instruction bytes: 0x66 0xF
0x29 0xC6 </para></item>
            <item><para>238713 unhandled instruction bytes: 0x66 0xF
0x29 0xC6 </para></item>
            <item><para>238745 3.5.0 Make fails on PPC Altivec
opcodes, though configure says "Altivec off"</para></item>
            <item><para>239992 vex amd64-&gt;IR: 0x48 0xF 0xC4 0xC1 0x0
0x48 </para></item>
            <item><para>240488 == 197988</para></item>
            <item><para>240639 == 212335</para></item>
            <item><para>241377 == 236546</para></item>
            <item><para>241903 == 202315</para></item>
            <item><para>241920 == 212335</para></item>
            <item><para>242606 unhandled syscall: setegid (in
Ptrcheck)</para></item>
            <item><para>242814 Helgrind "Impossible has happened"
during QApplication::initInstance(); </para></item>
            <item><para>243064 Valgrind attempting to read debug
information from iso </para></item>
            <item><para>243270 Make stack unwinding in Valgrind
wrappers more reliable</para></item>
            <item><para>243884 exp-ptrcheck: the 'impossible happened:
unhandled syscall sysno = 277 (mq_open)</para></item>
            <item><para>244009 exp-ptrcheck unknown syscalls in
analyzing lighttpd</para></item>
            <item><para>244493 ARM VFP d16-d31 registers support
</para></item>
            <item><para>244670 add support for audit_session_self
syscall on Mac OS 10.6</para></item>
            <item><para>244921 The xml report of helgrind tool is not
well format</para></item>
            <item><para>244923 In the xml report file, the
&lt;preamble&gt; not escape the xml char, eg
'&lt;','&amp;','&gt;'</para></item>
            <item><para>245535 print full path names in plain text
reports</para></item>
            <item><para>245925 x86-64 red zone handling
problem</para></item>
            <item><para>246258 Valgrind not catching integer underruns
+ new [] s</para></item>
            <item><para>246311 reg/reg cmpxchg doesn't work on
amd64</para></item>
            <item><para>246549 unhandled syscall unix:277 while
testing 32-bit Darwin app </para></item>
            <item><para>246888 Improve Makefile.vex.am </para></item>
            <item><para>247510 [OS X 10.6] Memcheck reports
unaddressable bytes passed to [f]chmod_extended</para></item>
            <item><para>247526 IBM POWER6 (ISA 2.05) support is
incomplete</para></item>
            <item><para>247561 Some leak testcases fails due to
reachable addresses in caller save regs</para></item>
            <item><para>247875 sizeofIRType to handle
Ity_I128</para></item>
            <item><para>247894 [PATCH] unhandled syscall
sys_readahead</para></item>
            <item><para>247980 Doesn't honor CFLAGS passed to
configure</para></item>
            <item><para>248373 darwin10.supp is empty in the
trunk</para></item>
            <item><para>248822 Linux FIBMAP ioctl has int parameter
instead of long</para></item>
            <item><para>248893 [PATCH] make readdwarf.c big endianess
safe to enable unwinding on big endian systems</para></item>
            <item><para>249224 Syscall 336 not supported
(SYS_proc_info) </para></item>
            <item><para>249359 == 245535</para></item>
            <item><para>249775 Incorrect scheme for detecting NEON
capabilities of host CPU</para></item>
            <item><para>249943 jni JVM init fails when using
valgrind</para></item>
            <item><para>249991 Valgrind incorrectly declares
AESKEYGENASSIST support since VEX r2011</para></item>
            <item><para>249996 linux/arm: unhandled syscall: 181
(__NR_pwrite64)</para></item>
            <item><para>250799 frexp$fenv_access_off function
generates SIGILL </para></item>
            <item><para>250998 vex x86-&gt;IR: unhandled instruction
bytes: 0x66 0x66 0x66 0x2E </para></item>
            <item><para>251251 support pclmulqdq insn </para></item>
            <item><para>251362 valgrind: ARM: attach to debugger
either fails or provokes kernel oops </para></item>
            <item><para>251674 Unhandled syscall 294</para></item>
            <item><para>251818 == 254550</para></item>
            <item><para>254257 Add support for debugfiles found by
build-id</para></item>
            <item><para>254550 [PATCH] Implement DW_ATE_UTF
(DWARF4)</para></item>
            <item><para>254646 Wrapped functions cause stack
misalignment on OS X (and possibly Linux)</para></item>
            <item><para>254556 ARM: valgrinding anything fails with
SIGSEGV for 0xFFFF0FA0</para></item>
          </unorderedlist></item>
        </items>
      </change>
    </notes>
  </program>
</programs>
