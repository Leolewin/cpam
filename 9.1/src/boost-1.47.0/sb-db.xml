<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="boost" version="1.47.0" revision="3">
    <build-name>${SB_PROG_NAME}_1_47_0</build-name>

    <install-name>lib${SB_PROG_NAME}147</install-name>

    <sources>
      <source checksum="bb770a437ffc7f6f35fd1aaaab539a6f"
        checksum-type="md5" size="46456696"
        path="src/tww-boost-1.47.0.tar.bz2"/>
      <patch checksum="1607bdc50cf110396bb19210a731e88e"
        checksum-type="md5" size="2784"
        path="src/boost_1_47_0.sunpro.patch"/>
      <patch checksum="342287b235a67409e38304bce73890a4"
        checksum-type="md5" size="6003"
        path="src/boost_1_47_0.aix.patch"/>
      <patch checksum="7b3848f415cd230ddd99b756328b5f86"
        checksum-type="md5" size="4450"
        path="src/boost_1_47_0.hpux.patch"/>
      <patch checksum="75bf703ded51cbf38ea61eaaca2698da"
        checksum-type="md5" size="3372"
        path="src/boost_1_47_0.tww.patch"/>
    </sources>

    <dependencies>
      <depend program="bzip2" var="BZIP2"
        install-name="bzip210">v&gt;=1.0.6</depend>
      <depend program="expat" var="LIBEXPAT"
        install-name="libexpat20">v&gt;=2.0.1</depend>
      <depend program="zlib" var="LIBZ"
        install-name="libz12">v&gt;=1.2.5</depend>
    </dependencies>

    <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"

case "${SB_SYSTYPE}" in
*-aix*)
  CC_LD_RT="-Wl,-blibpath:"

  BUILD_FLAGS="instruction-set=powerpc" ;;
ia64*-hpux*)
  CC_LD_RT="-Wl,+b,"

  BUILD_FLAGS="linkflags=-Wl,+nodefaultrpath" ;;
hppa*-hpux*)
  CC_LD_RT="-Wl,+s,+b,"

  BUILD_FLAGS="architecture=parisc" ;;
*-irix*|*-linux*|*-osf*)
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-solaris*)
  CC_LD_RT="-R"

  BUILD_FLAGS="instruction-set=pentium4" ;;
*-solaris*)
  CC_LD_RT="-R"

  BUILD_FLAGS="instruction-set=ultrasparc" ;;
esac
]]>
    </script-header>

    <build>
<![CDATA[
# build bjam v2
[ ! -f "${SB_BUILD_PREFIX}/tools/build/v2/b2" ] && {
  case "${SB_SYSTYPE}" in
  *-aix*)
    # g++ compiled b2 dumps core on illegal instruction during install
    VENDOR_TOOLSET=vacpp ;;
  esac

  (cd tools/build/v2
   ./bootstrap.sh --with-toolset=${VENDOR_TOOLSET-${TOOLSET-gcc}})
}

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
stage

: ignore component build failures
]]>
    </build>

    <install>
<![CDATA[
EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
install

: ignore component relink failures
]]>
    </install>

    <uninstall>
<![CDATA[
rm -rf ${_libdir}
]]>
    </uninstall>

    <module name="default">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44" add-path="prepend"
          systype="*-aix5*|*-hpux11.00|*-osf*">v==4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"
          systype="*-aix5*|*-hpux11.00|*-osf*"/>
        <depend program="sunstudioruntime" var="SUNSTUDIORUNTIME"
          install-name="sunstudioruntime10"
          systype="*-solaris*">v&gt;=1.0 r&gt;=3</depend>
      </dependencies>

      <validate>
        <depend program="boost" module="gcc44"
          systype="*-aix[67]*|*-hpux11.[123]*|*-linux*|*-solaris*">v==1.47.0</depend>
        <depend program="boost" module="python-2.6.7"
          systype="!*-hpux11.00">v==1.47.0</depend>
        <depend program="boost" module="python-2.7.2"
          systype="!*-hpux11.00">v==1.47.0</depend>
      </validate>

      <script-header replace="0">
<![CDATA[
case "${SB_SYSTYPE}" in
*-solaris*)
  _libdir="${SB_INSTALL_PREFIX_LIB}/stlport4" ;;
*)
  _libdir=${SB_INSTALL_PREFIX_LIB} ;;
esac

case "${SB_SYSTYPE}" in
*-aix*)
  TOOLSET=vacpp CXXFLAGS="-qnotemplateregistry -qmaxmem=-1 \
-qarch=ppc" ;;
ia64*-hpux*)
  TOOLSET=acc CXXFLAGS="-z +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit" ;;
*-hpux11.00)
  # vendor C++ compiler hangs, even with no optimisation
  ;;
*-hpux*)
  TOOLSET=acc CXXFLAGS="-z +hpxstd98 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit" ;;
*-irix*)
  TOOLSET=mipspro CXXFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-ptused -FE:template_in_elf_section -O2 -OPT:Olimit=0" ;;

i?86*-solaris*)
  TOOLSET=sun CXXFLAGS="-xtarget=pentium4 -m32" ;;
*-solaris2.8)
  TOOLSET=sun CXXFLAGS="-xtarget=ultra2 -xarch=v8plusa" ;;
*-solaris*)
  TOOLSET=sun CXXFLAGS="-xtarget=ultra2 -m32 -xarch=sparcvis" ;;
esac

BUILD_FLAGS="--without-python --without-mpi \
${BUILD_FLAGS+${BUILD_FLAGS}}"
]]>
      </script-header>

      <build>
<![CDATA[
# build bjam v2
[ ! -f "${SB_BUILD_PREFIX}/tools/build/v2/b2" ] && {
  case "${SB_SYSTYPE}" in
  *-aix*)
    # g++ compiled b2 dumps core on illegal instruction during install
    VENDOR_TOOLSET=vacpp ;;
  esac

  (cd tools/build/v2
   ./bootstrap.sh --with-toolset=${VENDOR_TOOLSET-${TOOLSET-gcc}})
}

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
stage

: ignore component build failures
]]>
      </build>

      <install>
<![CDATA[
EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport\
 linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
install

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}

(cd doc
 echo making directory $_docdir
 ${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}

 ${SB_PATH_FIND} html -type d | while read _dir; do
   echo making directory $SB_INSTALL_PREFIX/$_docdir/$_dir
   ${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/${_dir}
 done
 ${SB_PATH_FIND} html -type f | while read _file; do
   echo installing $_docdir/$_file
   ${SB_PATH_INSTALL} -m 644 -o root -g 0 ${_file} ${_docdir}/${_file}
 done)
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${SB_INSTALL_PREFIX}
]]>
      </uninstall>
    </module>

    <module name="64bit"
    systype="*-solaris*">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44" add-path="prepend"
          systype="*-aix5*|*-hpux11.00|*-osf*">v==4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"
          systype="*-aix5*|*-hpux11.00|*-osf*"/>
        <depend program="sunstudioruntime" var="SUNSTUDIORUNTIME"
          install-name="sunstudioruntime10"
          systype="*-solaris*">v&gt;=1.0 r&gt;=3</depend>
        <depend program="bzip2" var="BZIP2" install-name="bzip210"
          module="64bit">v&gt;=1.0.6</depend>
        <depend program="expat" var="LIBEXPAT"
          install-name="libexpat20" module="64bit">v&gt;=2.0.1</depend>
        <depend program="zlib" var="LIBZ" install-name="libz12"
          module="64bit">v&gt;=1.2.5</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
case "${SB_SYSTYPE}" in
i?86-*solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=opteron -m64 \
-xarch=sse2"
  CXX=CC CXXFLAGS="-xO2 -xtarget=opteron -m64 -xarch=sse2"

  TOOLSET=sun
  _ld64flags="-m64"
  _sunstudio_lib="${SB_VAR_SUNSTUDIORUNTIME}/lib/stlport4/amd64"
  _dep_libdir="lib/amd64"
  _libsubdir="lib/stlport4/amd64" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=generic -m64 \
-xarch=sparc"
  CXX=CC CXXFLAGS="-xO2 -xtarget=generic -m64 -xarch=sparc"

  TOOLSET=sun
  _ld64flags="-m64"
  _sunstudio_lib="${SB_VAR_SUNSTUDIORUNTIME}/lib/stlport4/sparcv9"
  _dep_libdir="lib/sparcv9"
  _libsubdir="lib/stlport4/sparcv9" ;;
esac

_expatlibpath="${SB_VAR_LIBEXPAT}/${_dep_libdir}"
_libz_lib="${SB_VAR_LIBZ}/${_dep_libdir}"
_bzip2_lib="${SB_VAR_BZIP2}/${_dep_libdir}"

_libdir="${SB_INSTALL_PREFIX}/${_libsubdir}"

BUILD_FLAGS="--without-python --without-mpi address-model=64 \
linkflags=${_ld64flags}"
]]>
      </script-header>

      <build>
<![CDATA[
# build bjam v2
[ ! -f "${SB_BUILD_PREFIX}/tools/build/v2/b2" ] && {
  case "${SB_SYSTYPE}" in
  *-aix*)
    # g++ compiled b2 dumps core on illegal instruction during install
    VENDOR_TOOLSET=vacpp ;;
  esac

  (cd tools/build/v2
   ./bootstrap.sh --with-toolset=${VENDOR_TOOLSET-${TOOLSET-gcc}})
}

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
stage

: ignore component build failures
]]>
      </build>

      <install>
<![CDATA[
if [ ! -d $(dirname ${_libdir})/64 ]; then
  case "${SB_SYSTYPE}" in
  *-solaris*)
    ln -s ./$(basename ${_libdir}) \
    ${SB_INSTALL_PREFIX}/lib/stlport4/64 ;;
  esac
fi

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
install

: ignore component relink failures
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${_libdir}
]]>
      </uninstall>
    </module>

    <module name="gcc44"
    systype="*-aix[67]*|*-hpux11.[123]*|*-irix*|*-linux*|*-solaris*">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_gccsubdir="gcc44"

_libdir="${SB_INSTALL_PREFIX_LIB}/${_gccsubdir}"

BUILD_FLAGS="--without-python --without-mpi \
${BUILD_FLAGS+${BUILD_FLAGS}}"
]]>
      </script-header>

      <build>
<![CDATA[
# build bjam v2
[ ! -f "${SB_BUILD_PREFIX}/tools/build/v2/b2" ] && {
  case "${SB_SYSTYPE}" in
  *-aix*)
    # g++ compiled b2 dumps core on illegal instruction during install
    VENDOR_TOOLSET=vacpp ;;
  esac

  (cd tools/build/v2
   ./bootstrap.sh --with-toolset=${VENDOR_TOOLSET-${TOOLSET-gcc}})
}

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
stage

: ignore component build failures
]]>
      </build>

      <install>
<![CDATA[
EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
install

: ignore component relink failures
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${_libdir}
]]>
      </uninstall>
    </module>

    <module name="python-2.6.7"
    systype="!*-hpux11.00">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
        <depend program="python" install-name="python26"
          add-path="prepend">v&gt;=2.6.7</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_pysubdir="python26"

_libdir="${SB_INSTALL_PREFIX_LIB}/${_pysubdir}"

BUILD_FLAGS="--with-python ${BUILD_FLAGS+${BUILD_FLAGS}}"
]]>
      </script-header>

      <build>
<![CDATA[
# build bjam v2
[ ! -f "${SB_BUILD_PREFIX}/tools/build/v2/b2" ] && {
  case "${SB_SYSTYPE}" in
  *-aix*)
    # g++ compiled b2 dumps core on illegal instruction during install
    VENDOR_TOOLSET=vacpp ;;
  esac

  (cd tools/build/v2
   ./bootstrap.sh --with-toolset=${VENDOR_TOOLSET-${TOOLSET-gcc}})
}

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
stage

: ignore component build failures
]]>
      </build>

      <install>
<![CDATA[
EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
install

: ignore component relink failures
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${_libdir}
]]>
      </uninstall>
    </module>

    <module name="64bit-gcc44"
    systype="*-solaris*">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44" add-path="prepend"
          systype="*-aix[67]*|ia64*-hpux*|*-irix*|*-solaris*">v&gt;=4.4.6</depend>
        <depend program="gcc" install-name="gcc64-44"
          add-path="prepend"
          systype="hppa*-hpux11.[123]*">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
        <depend program="bzip2" var="BZIP2" install-name="bzip210"
          module="64bit">v&gt;=1.0.6</depend>
        <depend program="expat" var="LIBEXPAT"
          install-name="libexpat20" module="64bit">v&gt;=2.0.1</depend>
        <depend program="zlib" var="LIBZ" install-name="libz12"
          module="64bit">v&gt;=1.2.5</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_gccsubdir="gcc44"

case "${SB_SYSTYPE}" in
i?86-*solaris*)
  CFLAGS="-O2 -m64"
  CXXFLAGS="-O2 -m64"

  _ld64flags="-m64"
  _dep_libdir="lib/amd64"
  _libsubdir="lib/${_gccsubdir}/amd64" ;;
*-solaris*)
  CFLAGS="-O2 -m64 -mcpu=v9"
  CXXFLAGS="-O2 -m64 -mcpu=v9"

  _ld64flags="-m64"
  _dep_libdir="lib/sparcv9"
  _libsubdir="lib/${_gccsubdir}/sparcv9" ;;
esac

_gccr_lib="${SB_VAR_GCC_RT}/${_dep_libdir}"
_expatlibpath="${SB_VAR_LIBEXPAT}/${_dep_libdir}"
_libz_lib="${SB_VAR_LIBZ}/${_dep_libdir}"
_bzip2_lib="${SB_VAR_BZIP2}/${_dep_libdir}"

_libdir="${SB_INSTALL_PREFIX}/${_libsubdir}"

BUILD_FLAGS="--without-python --without-mpi address-model=64 \
linkflags=${_ld64flags}"
]]>
      </script-header>

      <build>
<![CDATA[
# build bjam v2
[ ! -f "${SB_BUILD_PREFIX}/tools/build/v2/b2" ] && {
  case "${SB_SYSTYPE}" in
  *-aix*)
    # g++ compiled b2 dumps core on illegal instruction during install
    VENDOR_TOOLSET=vacpp ;;
  esac

  (cd tools/build/v2
   ./bootstrap.sh --with-toolset=${VENDOR_TOOLSET-${TOOLSET-gcc}})
}

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
stage

: ignore component build failures
]]>
      </build>

      <install>
<![CDATA[
if [ ! -d ${SB_INSTALL_PREFIX}/lib/${_gccsubdir}/64 ]; then
  case "${SB_SYSTYPE}" in
  *-solaris*)
    ln -s ./$(basename ${_libdir}) \
    ${SB_INSTALL_PREFIX}/lib/${_gccsubdir}/64 ;;
  esac
fi

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
install

: ignore component relink failures
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${_libdir}
]]>
      </uninstall>
    </module>

    <module name="python-2.7.2"
    systype="!*-hpux11.00">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
        <depend program="python" install-name="python27"
          add-path="prepend">v&gt;=2.7.2</depend>
      </dependencies>

      <script-header replace="0">
<![CDATA[
_pysubdir="python27"

_libdir="${SB_INSTALL_PREFIX_LIB}/${_pysubdir}"

BUILD_FLAGS="--with-python ${BUILD_FLAGS+${BUILD_FLAGS}}"
]]>
      </script-header>

      <build>
<![CDATA[
# build bjam v2
[ ! -f "${SB_BUILD_PREFIX}/tools/build/v2/b2" ] && {
  case "${SB_SYSTYPE}" in
  *-aix*)
    # g++ compiled b2 dumps core on illegal instruction during install
    VENDOR_TOOLSET=vacpp ;;
  esac

  (cd tools/build/v2
   ./bootstrap.sh --with-toolset=${VENDOR_TOOLSET-${TOOLSET-gcc}})
}

EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
stage

: ignore component build failures
]]>
      </build>

      <install>
<![CDATA[
EXPAT_INCLUDE=${_expatinc-${SB_VAR_LIBEXPAT_INC}} \
EXPAT_LIBPATH=${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}} \
${SB_BUILD_PREFIX}/tools/build/v2/b2 \
-d2 --libdir=${_libdir} --prefix=${SB_INSTALL_PREFIX} \
--build-type=complete --layout=tagged --disable-icu \
${BUILD_FLAGS+${BUILD_FLAGS}} toolset=${TOOLSET-gcc} \
variant=release runtime-link=shared \
${SB_VAR_LIBZ+include=${SB_VAR_LIBZ_INC} \
library-path=${_libz_lib-${SB_VAR_LIBZ_LIB}} \
linkflags=${CC_LD_RT}${_libz_lib-${SB_VAR_LIBZ_LIB}}} \
${SB_VAR_BZIP2+include=${SB_VAR_BZIP2_INC} \
library-path=${_bzip2_lib-${SB_VAR_BZIP2_LIB}} \
linkflags=${CC_LD_RT}${_bzip2_lib-${SB_VAR_BZIP2_LIB}}} \
${SB_VAR_GCC_RT+linkflags=${CC_LD_RT}${_gccr_lib-${SB_VAR_GCC_RT_LIB}}} \
${SB_VAR_SUNSTUDIORUNTIME+stdlib=sun-stlport \
linkflags=${CC_LD_RT}\
${_sunstudio_lib-${SB_VAR_SUNSTUDIORUNTIME_LIB}/stlport4}} \
linkflags="${CC_LD_RT}${_libdir}" \
linkflags="-L${SB_BUILD_PREFIX}/stage/lib" \
${SB_VAR_LIBEXPAT+linkflags=${CC_LD_RT}\
${_expatlibpath-${SB_VAR_LIBEXPAT_LIB}}} \
${CPPFLAGS+cppflags="${CPPFLAGS}"} \
${CFLAGS+cflags="${CFLAGS}"} \
${CXXFLAGS+cxxflags="${CXXFLAGS}"} \
install

: ignore component relink failures
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${_libdir}
]]>
      </uninstall>
    </module>

    <licenses>
      <license>
        <para>Boost Software License - Version 1.0 - August 17th,
2003</para>
        <para>Permission is hereby granted, free of charge, to any
person or organization obtaining a copy of the software and
accompanying documentation covered by this license (the "Software") to
use, reproduce, display, distribute, execute, and transmit the
Software, and to prepare derivative works of the Software, and to
permit third-parties to whom the Software is furnished to do so, all
subject to the following:</para>
        <indent>
          <para>The copyright notices in the Software and this entire
statement, including the above license grant, this restriction and the
following disclaimer, must be included in all copies of the Software,
in whole or in part, and all derivative works of the Software, unless
such copies or derivative works are solely in the form of
machine-executable object code generated by a source language
processor.</para>
          <para>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE
AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER
LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.</para>
        </indent>
      </license>
    </licenses>

    <notes>
      <change from="1.46.1" to="1.47.0">
        <items name="New Libraries">
          <item><para>Chrono:</para>
          <unorderedlist>
            <item><para>Useful time utilities</para></item>
          </unorderedlist></item>
          <item><para>Geometry:</para>
          <unorderedlist>
            <item><para>Geometry Library</para></item>
          </unorderedlist></item>
          <item><para>Phoenix:</para>
          <unorderedlist>
            <item><para>Define small unnamed function objects at the
actual call site, and more</para></item>
          </unorderedlist></item>
          <item><para>Ratio:</para>
          <unorderedlist>
            <item><para>Compile time rational arithmetic</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Accumulators:</para>
          <unorderedlist>
            <item><para>New statistical accumulators: sum_kahan,
sum_of_weights_kahan, sum_of_variates_kahan.</para></item>
          </unorderedlist></item>
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Many new features and improvements:</para>
            <unorderedlist>
              <item><para>Signal handling.</para></item>
              <item><para>A debugging aid for asynchronous
programs.</para></item>
              <item><para>Timeouts on socket iostreams.</para></item>
              <item><para>Composed connect operations.</para></item>
              <item><para>Rewritten SSL implementation.</para></item>
              <item><para>C++0x move support.</para></item>
              <item><para>Compatibility with POSIX fork().</para></item>
              <item><para>... and much more. See the Revision History in
the Boost.Asio documentation for more details.</para></item>
            </unorderedlist></item>
          </unorderedlist></item>
          <item><para>Config:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>DateTime:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Dynamic Bitset:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Foreach:</para>
          <unorderedlist>
            <item><para>Use rvalue refs on supporting compilers for
const rvalue detection.</para></item>
          </unorderedlist></item>
          <item><para>Function:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Function Types:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Graph:</para>
          <unorderedlist>
            <item><para>Bug fixes.</para></item>
            <item><para>Remove deprecated function kolmogorov_max_flow,
use boykov_kolmogorov_max_flow instead.</para></item>
            <item><para>Removed &lt;boost/graph/detail/is_same.hpp&gt;
header since its functionality is in Boost.Type_Traits.</para></item>
          </unorderedlist></item>
          <item><para>Iostreams:</para>
          <unorderedlist>
            <item><para>Support filesystem v3 paths</para></item>
            <item><para>Fix a memory leak in chain</para></item>
          </unorderedlist></item>
          <item><para>Iterator:</para>
          <unorderedlist>
            <item><para>Add function_input_iterator</para></item>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Lexical cast:</para>
          <unorderedlist>
            <item><para>Better performance and less memory usage for
many combinations of Source and Target types</para></item>
            <item><para>Documentation updated</para></item>
          </unorderedlist></item>
          <item><para>Logic:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Math:</para>
          <unorderedlist>
            <item><para>Added changesign function to sign.hpp to
facilitate addition of nonfinite facets.</para></item>
            <item><para>Addition of nonfinite facets, with tests,
examples of use for C99 format infinity and NaN, and
documentation.</para></item>
            <item><para>Added tests and documentation of
changesign</para></item>
            <item><para>Meta State Machine:</para></item>
            <item><para>Added a stop() method in the
back-end.</para></item>
            <item><para>Added partial support for Boost.Phoenix functors
in eUML.</para></item>
            <item><para>Added the possibility to choose when state
switching occurs.</para></item>
            <item><para>Bugfixes:</para>
            <unorderedlist>
              <item><para>gcc warnings about unused
variables.</para></item>
              <item><para>better implementation of favor_compile_time
back-end policy.</para></item>
              <item><para>bug with eUML and state
construction.</para></item>
              <item><para>incorrect eUML event and state
macros.</para></item>
              <item><para>incorrect event type passed to a direct entry
state's on_entry action.</para></item>
              <item><para>more examples.</para></item>
            </unorderedlist></item>
          </unorderedlist></item>
          <item><para>MultiIndex:</para>
          <unorderedlist>
            <item><para>Fixed an ADL problem in composite_key_compare
related with Boost.Ref.</para></item>
            <item><para>Maintenance fixes.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Pre-preprocessed for better compile
times.</para></item>
            <item><para>Default preprocessor limits
raised:</para></item>
            <item><para>Max expression arity (BOOST_PROTO_MAX_ARITY)
bumped from 5 to 10.</para></item>
            <item><para>Max function call arity
(BOOST_PROTO_MAX_FUNCTION_CALL_ARITY) bumped from 5 to 10.</para></item>
            <item><para>Max logical operator arity
(BOOST_PROTO_MAX_LOGICAL_ARITY) bumped from 8 to 10.</para></item>
            <item><para>Better integration of proto::basic_expr to avoid
accidental needless instantiations of proto::expr.</para></item>
          </unorderedlist></item>
          <item><para>Random:</para>
          <unorderedlist>
            <item><para>Synchronized with the new
standard.</para>
            <unorderedlist>
              <item><para>Many new distributions added:
chi_squared_distribution, negative_binomial_distribution,
fisher_f_distribution, student_t_distribution, weibull_distribution,
extreme_value_distribution, discrete_distribution,
piecewise_constant_distribution,
piecewise_liear_distribution</para></item>
              <item><para>Renamed uniform_int and uniform_real to
uniform_int_distribution and uniform_real_distribution.</para></item>
              <item><para>Added members to all distributions:
param_type, param, stream operators, comparison operators, min and
max.</para></item>
              <item><para>Allow distributions to be used directly with
generators without use of variate_generator.</para></item>
              <item><para>Changed the meaning of the parameters of
geometric_distribution and lognormal_distribution.</para></item>
              <item><para>Added a second parameter to
gamma_distribution.</para></item>
              <item><para>Added seed_seq and added the corresponding
constructors and seed overloads the generators.</para></item>
              <item><para>Added generate_canonical.</para></item>
              <item><para>Renamed the engine tempates. e.g.
mersenne_twister becomes mersenne_twister_engine.</para></item>
              <item><para>New engine adapter
independent_bits_engine.</para></item>
              <item><para>Added new predefined engine typedefs:
mt19937_64, ranlux[24|48][_base], knuth_b.</para></item>
              <item><para>Updated seeding algorithms.</para></item>
              <item><para>Added discard</para></item>
              <item><para>Use unsigned types instead of signed types in
all the predefined engines.</para></item>
            </unorderedlist></item>
            <item><para>Bug fixes:</para>
            <unorderedlist>
              <item><para>linear_congruential_engine could assert
because the modular arithmetic was not implemented in all cases.
shuffle_output, now called shuffle_order_engine, could cause integer
overflow. These cases were not triggered by any predefined
engines.</para></item>
              <item><para>uniform_small_int now actually behaves as
documented.</para></item>
            </unorderedlist></item>
            <item><para>New efficient algorithms for
binomial_distribution and poisson_distribution.</para></item>
            <item><para>Moved all features into namespace
boost::random</para></item>
            <item><para>Backwards compatibility issues:</para>
            <unorderedlist>
              <item><para>The seeding algorithms have changed. This was
unavoidable for compatibility with the standard. Not to mention that
some of the existing algorithms were weird and inconsistent.</para>
              <unorderedlist>
                <item><para>Seeding with an integer: The behaviour
should be unchanged for most generators except lagged_fibonacci and
subtract_with_carry (and thus ranlux).</para></item>
                <item><para>Seeding a generator with another generator:
This has been enabled by making all all generators models of SeedSeq.
Therefore, if you seed a Boost.Random generator with a non Boost.Random
generator, your code will no longer compile. The algorithm has changed,
so code using this seeding method will yield different
values.</para></item>
                <item><para>Seeding a generator from a pair of
iterators: This implicitly assumed that the elements were 32-bit
integers in some places, but not everywhere. I've added this requirement
everywhere and updated the algorithms accordingly. The behaviour of
generators with a value_type no more than 32 bits should be
unchanged.</para></item>
              </unorderedlist></item>
              <item><para>Renaming:</para>
              <unorderedlist>
                <item><para>Whenever a class was renamed, there is a
wrapper with the old name. There are also using declarations in
namespace boost for everything that was moved.</para></item>
                <item><para>The names of a few accessors in the
distributions changed. Both the old and the new names are
allowed.</para></item>
              </unorderedlist></item>
              <item><para>geometric_distribution and
lognormal_distribution: The behaviour is different at runtime.
boost::geometric_distribution and boost::lognormal_distribution provide
the old behaviour, boost::random::geometric_distribution and
boost::random::lognormal_distribution provide the new
behaviour.</para></item>
              <item><para>Streaming: gamma_distribution has a new
parameter, thus text saved with the old version will not readable by the
new version.</para></item>
              <item><para>variate_generator is now a simple pass through
wrapper. Code that assumes that it will adjust the generator's result
type to match the distribution will no longer work. This is not an issue
with any of the distributions provided by Boost.Random.</para></item>
              <item><para>Return types: The result_types of some
generators have changed slightly. Some signed types have changed to
unsigned to match the standard.</para></item>
              <item><para>has_fixed_range: This is now always false, as
it doesn't appear to be very useful and is excessively cumbersome.
Anything that was accessing const_min and const_max without first
checking has_fixed_range was incorrect to begin with.</para></item>
            </unorderedlist></item>
          </unorderedlist></item>
          <item><para>Range:</para>
          <unorderedlist>
            <item><para>Fixed the end position irange when step size is
greater than 1</para></item>
          </unorderedlist></item>
          <item><para>Spirit:</para>
          <unorderedlist>
            <item><para>Spirit V2.5, see the 'What's New' section for
details.</para></item>
          </unorderedlist></item>
          <item><para>Tokenizer:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Utility:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Uuid:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Wave:</para>
          <unorderedlist>
            <item><para>Wave V2.3.0, see the Changelog for
details.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Build System">
          <item><para>The official name of Boost.Build executable was
changed to b2. The bootstrap scripts create a copy with the old name
bjam to prevent third-party build scripts from failing.</para></item>
        </items>

        <items name="Updated Tools">
          <item><para>BoostBook:</para>
          <unorderedlist>
            <item><para>Handle doxygen tags: \see, tparam, ref (for
classes only).</para></item>
            <item><para>Support note for classes as well as
functions.</para></item>
          </unorderedlist></item>
          <item><para>Quickbook:</para>
          <unorderedlist>
            <item><para>Generate consistent ids for
headings.</para></item>
            <item><para>Improved unicode support for
windows.</para></item>
            <item><para>Warn about windows paths, as they aren't
portable.</para></item>
            <item><para>Reverse deprecation of [br].</para></item>
            <item><para>Support date ranges and comma seperated clauses
in copyright attributes.</para></item>
            <item><para>Improved delimeter checking for simple markup
(e.g. *bold*).</para></item>
            <item><para>Pass-thru comments in code
snippets.</para></item>
            <item><para>__FILENAME__ macro now generates relative
paths.</para></item>
            <item><para>Allow quickbook escapes inside comments in
syntax highlighted code.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.46.0" to="1.46.1">
        <items name="Updated Libraries">
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>EV_ONESHOT seems to cause problems on some
versions of Mac OS X, with the io_service destructor getting stuck
inside the close() system call. Changed the kqueue backend to use
EV_CLEAR instead.</para></item>
            <item><para>Fixed compile failures with some versions of g++
due to the use of anonymous enums.</para></item>
            <item><para>Fixed a bug on kqueue-based platforms, where
some system calls that repeatedly fail with EWOULDBLOCK are not
correctly re-registered with kqueue.</para></item>
            <item><para>Changed asio::streambuf to ensure that its
internal pointers are updated correctly after the data has been modified
using std::streambuf member functions.</para></item>
            <item><para>Fixed a bug that prevented the linger socket
option from working on platforms other than Windows.</para></item>
          </unorderedlist></item>
          <item><para>Fusion:</para>
          <unorderedlist>
            <item><para>Fix disable_if for Visual C++
7.1/8.0</para></item>
          </unorderedlist></item>
          <item><para>Filesystem:</para>
          <unorderedlist>
            <item><para>Fix for STLPort.</para></item>
            <item><para>PGI large file support</para></item>
          </unorderedlist></item>
          <item><para>Graph:</para>
          <unorderedlist>
            <item><para>Bug fixes</para></item>
          </unorderedlist></item>
          <item><para>Icl:</para>
          <unorderedlist>
            <item><para>Intersects for interval_maps and
segment_type/element_type.</para></item>
            <item><para>Fixed some ambiguous calls to functions in boost
and std namespaces.</para></item>
            <item><para>Other bug fixes, and documentation
fixes.</para></item>
          </unorderedlist></item>
          <item><para>Math:</para>
          <unorderedlist>
            <item><para>Several minor bug fixes.</para></item>
          </unorderedlist></item>
          <item><para>Polygon:</para>
          <unorderedlist>
            <item><para>Disabled 45-degree booleans
optimization.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Make display_expr copyable.</para></item>
            <item><para>Fix const correctness problem in
pass_through.</para></item>
          </unorderedlist></item>
          <item><para>Property Tree:</para>
          <unorderedlist>
            <item><para>Fix compile error in JSON parser.</para></item>
          </unorderedlist></item>
          <item><para>Signals2:</para>
          <unorderedlist>
            <item><para>Fix unused parameter warning.</para></item>
          </unorderedlist></item>
          <item><para>TR1:</para>
          <unorderedlist>
            <item><para>Allow specialization of
std::tr1::hash.</para></item>
            <item><para>Improved support for Pathscale and Sun
compilers.</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Add missing copy constructors and assignment
operators when using rvalue references.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Other changes">
          <item><para>Update getting started guide to reflect changes to
boost build.</para></item>
          <item><para>In quickbook, workaround optimization bug in g++
4.4.</para></item>
        </items>
      </change>

      <change from="1.45.0" to="1.46.0">
        <items name="New Libraries">
          <item><para>Icl:</para>
          <unorderedlist>
            <item><para>Interval Container Library, interval sets and
maps and aggregation of associated values.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Array:</para>
          <unorderedlist>
            <item><para>Added support for cbegin/cend</para></item>
            <item><para>Fixed a problem with the Sun
compiler</para></item>
          </unorderedlist></item>
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Fixed an integer overflow problem that occurs
when ip::address_v4::broadcast() is used on 64-bit
platforms.</para></item>
            <item><para>Fixed a problem on older Linux kernels (where
epoll is used without timerfd support) that prevents timely delivery of
deadline_timer handlers, after the program has been running for some
time</para></item>
          </unorderedlist></item>
          <item><para>Bind:</para>
          <unorderedlist>
            <item><para>make_adaptable now documented</para></item>
          </unorderedlist></item>
          <item><para>Concept Check:</para>
          <unorderedlist>
            <item><para>fixed warnings with
self-assignment</para></item>
          </unorderedlist></item>
          <item><para>Filesystem:</para>
          <unorderedlist>
            <item><para>Version 3 of the library is now the
default.</para></item>
          </unorderedlist></item>
          <item><para>IBM vacpp:</para>
          <unorderedlist>
            <item><para>Workaround for compiler bug affecting
iterator_facade.</para></item>
            <item><para>Verify, clarify, document that
&lt;boost/config/user.hpp&gt; can be used to specify
BOOST_FILESYSTEM_VERSION.</para></item>
            <item><para>Replaced C-style assert with
BOOST_ASSERT.</para></item>
            <item><para>Undeprecated unique_path(). Instead, add a note
mentioning the workaround for lack of thread safety and possible change
to cwd.</para></item>
            <item><para>Cleared several GCC warnings.</para></item>
            <item><para>Changed V2 code to use
BOOST_THROW_EXCEPTION.</para></item>
            <item><para>Windows: Fix status() to report non-symlink reparse point
correctly.</para></item>
            <item><para>Add symlink_option to
recursive_directory_iterator, allowing control over recursion into
directory symlinks. Note that the default is changed to not recurse into
directory symlinks.</para></item>
            <item><para>Reference documentation cleanup, including
fixing missing and broken links, and adding missing
functions.</para></item>
            <item><para>Miscellaneous implementation code
cleanup.</para></item>
          </unorderedlist></item>
          <item><para>Fusion:</para>
          <unorderedlist>
            <item><para>vector copy constructor now copies sequence
members in the same order on different platforms</para></item>
          </unorderedlist></item>
          <item><para>Graph:</para>
          <unorderedlist>
            <item><para>Fixed Graphviz output to work on Visual C++
7.1.</para></item>
            <item><para>Replaced assert with BOOST_ASSERT.</para></item>
            <item><para>Changed to Boost.Filesystem v3.</para></item>
            <item><para>Fixed various bugs.</para></item>
          </unorderedlist></item>
          <item><para>Hash:</para>
          <unorderedlist>
            <item><para>Support for std::type_index.</para></item>
            <item><para>Avoid -Wconversion warnings.</para></item>
          </unorderedlist></item>
          <item><para>Iostreams:</para>
          <unorderedlist>
            <item><para>Use BOOST_ASSERT instead of
assert.</para></item>
            <item><para>Fixed flush regression.</para></item>
          </unorderedlist></item>
          <item><para>Iterator:</para>
          <unorderedlist>
            <item><para>fixed problem with implicit_cast</para></item>
          </unorderedlist></item>
          <item><para>Math:</para>
          <unorderedlist>
            <item><para>Added Wald, Inverse Gaussian and geometric
distributions.</para></item>
            <item><para>Added information about configuration
macros.</para></item>
            <item><para>Added support for mpreal as a real-numered
type.</para></item>
          </unorderedlist></item>
          <item><para>Meta State Machine:</para>
          <unorderedlist>
            <item><para>Compile-time state machine
analysis.</para></item>
            <item><para>Boost.Parameter interface definition for
msm::back::state_machine&lt;&gt; template arguments.</para></item>
            <item><para>Possibility to provide a container for the event
and deferred event queues.</para></item>
            <item><para> A policy implementation based on a more
efficient Boost.CircularBuffer is provided.</para></item>
            <item><para>msm::back::state_machine&lt;&gt;::is_flag_active
method made const.</para></item>
            <item><para>Added possibility to enqueue events for delayed
processing.</para></item>
            <item><para>Bugfixes</para></item>
            <item><para>stack overflow using the Defer
functor</para></item>
            <item><para>anonymous transition of a submachine not called
for the initial state</para></item>
          </unorderedlist></item>
          <item><para>Optional:</para>
          <unorderedlist>
            <item><para>Updated test results with information about
expected failures</para></item>
          </unorderedlist></item>
          <item><para>Pool:</para>
          <unorderedlist>
            <item><para>Now can set a max_size for pool</para></item>
            <item><para>boost/pool/pool.hpp uses reinterpret_cast
instead of static_cast</para></item>
            <item><para>boost::pool_allocator now works with vector of
vectors</para></item>
            <item><para>Boost pool is now compatible with Microsoft
memory leak detection</para></item>
          </unorderedlist></item>
          <item><para>Program Options:</para>
          <unorderedlist>
            <item><para>Fixed errors in examples in docs</para></item>
            <item><para>Now takes argv as const</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Breaking change: boost/proto/core.hpp no longer
defines</para></item>
            <item><para>functional::pop_front and functional::reverse,
which have moved to their own headers under
boost/proto/functional</para></item>
            <item><para>Add callable wrappers for more Fusion algorithms
(including fusion::at); and callable wrappers for some std utilities
like make_pair, first and second, all under the new
boost/proto/functional directory</para></item>
            <item><para>Allow transforms to be specified separately from
a grammar</para></item>
            <item><para>proto::matches preserves domain-specific
expression wrappers</para></item>
            <item><para>Fix ADL issue with operator, in proto::and_
transform</para></item>
            <item><para>Fix handling of grammar checking in expressions
involving multiple domains</para></item>
            <item><para>Fix ambiguous operator&lt;&lt; in
proto::display_expr</para></item>
            <item><para>fusion::is_sequence answers true for Proto
expressions</para></item>
            <item><para>Eliminate -Wundef GCC warning in
boost/proto/fusion.hpp</para></item>
          </unorderedlist></item>
          <item><para>Signals:</para>
          <unorderedlist>
            <item><para>gcc warning cleanup</para></item>
          </unorderedlist></item>
          <item><para>Spirit:</para>
          <unorderedlist>
            <item><para>Spirit V2.4.2, see the 'What's New' section for
details.</para></item>
          </unorderedlist></item>
          <item><para>Tokenizer:</para>
          <unorderedlist>
            <item><para>isspace/ispunct was called with wrong character
type</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Avoid using operator&amp; with the value
type.</para></item>
            <item><para>Avoid -Wconversion warnings.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Tools">
          <item><para>Boostbook:</para>
          <unorderedlist>
            <item><para>Better support for attributes on root elements -
including lang.</para></item>
          </unorderedlist></item>
          <item><para>Inspect:</para>
          <unorderedlist>
            <item><para>Check that Boost headers do not use C's assert
macro.</para></item>
          </unorderedlist></item>
          <item><para>Quickbook:</para>
          <unorderedlist>
            <item><para>Add support for lang attribute in documentation
info.</para></item>
            <item><para>Improved anchors.</para></item>
            <item><para>Support import, include and xinclude in
conditional phrases.</para></item>
            <item><para>Uses Filesystem 3.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.44.0" to="1.45.0">
        <items name="Updated Libraries">
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Fixed a problem on kqueue-based platforms where
a deadline_timer may never fire if the io_service is running in a
background thread.</para></item>
            <item><para>Fixed a const-correctness issue that prevented
valid uses of has_service&lt;&gt; from compiling.</para></item>
            <item><para>Fixed MinGW cross-compilation.</para></item>
            <item><para>Removed dependency on deprecated Boost.System
functions.</para></item>
            <item><para>Ensured close()/closesocket() failures are
correctly propagated.</para></item>
            <item><para>Added a check for errors returned by
InitializeCriticalSectionAndSpinCount.</para></item>
            <item><para>Added support for hardware flow control on
QNX.</para></item>
            <item><para>Always use pselect() on HP-UX, if it is
available.</para></item>
            <item><para>Ensured handler arguments are passed as
lvalues.</para></item>
            <item><para>Fixed Windows build when thread support is
disabled.</para></item>
            <item><para>Fixed a Windows-specific problem where
deadline_timer objects with expiry times set more than 5 minutes in the
future may never expire.</para></item>
            <item><para>Fixed the resolver backend on BSD platforms so
that an empty service name resolves to port number 0, as per the
documentation.</para></item>
            <item><para>Fixed read operations so that they do not accept
buffer sequences of type const_buffers_1.</para></item>
            <item><para>Redefined Protocol and id to avoid clashing with
Objective-C++ keywords.</para></item>
            <item><para>Fixed a vector reallocation performance issue
that can occur when there are many active deadline_timer
objects.</para></item>
            <item><para>Fixed the kqueue backend so that it compiles on
NetBSD.</para></item>
            <item><para>Fixed the socket io_control() implementation on
64-bit Mac OS X and BSD platforms.</para></item>
            <item><para>Fixed a Windows-specific problem where failures
from accept() are incorrectly treated as successes.</para></item>
            <item><para>Deprecated the separate compilation header
&lt;boost/asio/impl/src.cpp&gt; in favour of
&lt;boost/asio/impl/src.hpp&gt;.</para></item>
          </unorderedlist></item>
          <item><para>Config:</para>
          <unorderedlist>
            <item><para>Added new defect macros,
BOOST_NO_VARIADIC_MACROS and
BOOST_NO_NUMERIC_LIMITS_LOWEST.</para></item>
            <item><para>Minor fixes.</para></item>
          </unorderedlist></item>
          <item><para>Flyweight:</para>
          <unorderedlist>
            <item><para>Fixed a hanging problem with intermodule_holder
in Win32 platforms related to a Boost.Interprocess issue.</para></item>
            <item><para>Removed an internal assertion incompatible with
program termination via std::exit.</para></item>
          </unorderedlist></item>
          <item><para>Foreach:</para>
          <unorderedlist>
            <item><para>Fix ambiguitiy by making auto_any constructor
explicit.</para></item>
          </unorderedlist></item>
          <item><para>Fusion:</para>
          <unorderedlist>
            <item><para>Added BOOST_FUSION_ADAPT_ADT,
BOOST_FUSION_ADAPT_TPL_ADT, BOOST_FUSION_ADAPT_ASSOC_ADT and
BOOST_FUSION_ADAPT_ASSOC_TPL_ADT.</para></item>
          </unorderedlist></item>
          <item><para>Graph:</para>
          <unorderedlist>
            <item><para>Added Stoer-Wagner min-cut
algorithm.</para></item>
            <item><para>Added implicit graph (implicit_graph) and A*
(astar_maze) examples.</para></item>
            <item><para>Added bundled property support for graph
properties.</para></item>
            <item><para>Fixed bugs.</para></item>
            <item><para>Fixed documentation bugs.</para></item>
          </unorderedlist></item>
          <item><para>Interprocess:</para>
          <unorderedlist>
            <item><para>Fixed bugs.</para></item>
            <item><para>Added support for standard rvalue reference move
semantics (tested on GCC 4.5 and VC10).</para></item>
            <item><para>Permissions can be detailed for interprocess
named resources.</para></item>
            <item><para>mapped_region::flush initiates disk flushing but
does not guarantee it's completed when returns, since it is not
portable.</para></item>
            <item><para>FreeBSD and MacOS now use posix semaphores to
implement named semaphores and mutex.</para></item>
          </unorderedlist></item>
          <item><para>Math:</para>
          <unorderedlist>
            <item><para>Added inverse gamma distribution and inverse
chi_square and scaled inverse chi_square.</para></item>
            <item><para>Added warnings about potential ambiguity with
std random library in distribution and function names.</para></item>
            <item><para>Editorial revision of documentation, and added
FAQ.</para></item>
          </unorderedlist></item>
          <item><para>Meta State Machine:</para>
          <unorderedlist>
            <item><para>Support for serialization.</para></item>
            <item><para>Possibility to use normal functors (from functor
front-end) in eUML.</para></item>
            <item><para>New constructors where substates / submachines
can be taken as arguments. This allows passing arguments to the
constructor of a submachine.</para></item>
            <item><para>Bugfixes (anonymous transitions)</para></item>
          </unorderedlist></item>
          <item><para>MultiArray:</para>
          <unorderedlist>
            <item><para>Fixes for bugs.</para></item>
            <item><para>Added new examples and test cases.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Knock down value of proto::N.</para></item>
            <item><para>Support non-rtti compilers</para></item>
            <item><para>Fix bug with proto::matches, array types and the
wildcard pattern.</para></item>
            <item><para>Make Proto work on MSVC with the /clr
option</para></item>
            <item><para>Add const-qualified overloads of
proto::eval</para></item>
          </unorderedlist></item>
          <item><para>Spirit:</para>
          <unorderedlist>
            <item><para>Spirit V2.4.1, see the 'What's New' section for
details.</para></item>
          </unorderedlist></item>
          <item><para>TypeTraits:</para>
          <unorderedlist>
            <item><para>Added new traits add_rvalue_reference,
add_lvalue_reference and common_type.</para></item>
            <item><para>Minor fixes to is_signed, is_unsigned and
is_virtual_base_of.</para></item>
          </unorderedlist></item>
          <item><para>uBLAS:</para>
          <unorderedlist>
            <item><para>Mixed types operation are possible and new tests
added (like matrix&lt;complex&gt;+matrix&lt;double&gt;).</para></item>
          </unorderedlist></item>
          <item><para>New features:</para>
          <unorderedlist>
            <item><para>a new size&lt;&gt; operator is available. For
example size&lt;1&gt;(A+B) give the number of rows of the sum of
matrices A and B.</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Fix inserting from iterators which return by
copy from operator* in boost::unordered_map and
boost::unordered_set.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive:</para>
          <unorderedlist>
            <item><para>xpressive::as handles wide-char sub_match
objects.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Tools">
          <item><para>Boostbook:</para>
          <unorderedlist>
            <item><para>Fix syntax highlighter for comments at the end
of code blocks.</para></item>
          </unorderedlist></item>
          <item><para>Quickbook:</para>
          <unorderedlist>
            <item><para>Fix command line macros.</para></item>
            <item><para>Nested code snippets.</para></item>
            <item><para>Nested documentation info
comments.</para></item>
            <item><para>Revert xml escaping document info, it broke some
documentation files (will now be in 1.6).</para></item>
            <item><para>Some other small tweaks.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.43.0" to="1.44.0">
        <items name="New Libraries">
          <item><para>Meta State Machine:</para>
          <unorderedlist>
            <item><para>High-performance expressive UML2 finite state
machines.</para></item>
          </unorderedlist></item>
          <item><para>Polygon:</para>
          <unorderedlist>
            <item><para>Booleans/clipping, resizing/offsetting and more
for planar polygons with integral coordinates.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Accumulators:</para>
          <unorderedlist>
            <item><para>Correct miscellaneous documentation
inaccuracies</para></item>
          </unorderedlist></item>
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Reduced compile times. (Note that some programs
may need to add additional #includes, e.g. if the program uses
boost::array but does not explicitly include
&lt;boost/array.hpp&gt;.)</para></item>
            <item><para>Reduced the size of generated
code.</para></item>
            <item><para>Refactored deadline_timer implementation to
improve performance.</para></item>
            <item><para>Improved multiprocessor scalability on Windows
by using a dedicated hidden thread to wait for timers.</para></item>
            <item><para>Improved performance of asio::streambuf with
async_read() and async_read_until(). These read operations now use the
existing capacity of the streambuf when reading, rather than limiting
the read to 512 bytes.</para></item>
            <item><para>Added optional separate
compilation. To enable, add #include &lt;boost/asio/impl/src.cpp&gt; to
one source file in a program, then build the program with
BOOST_ASIO_SEPARATE_COMPILATION defined in the project/compiler
settings. Alternatively, BOOST_ASIO_DYN_LINK may be defined to build a
separately-compiled Asio as part of a shared library.</para></item>
            <item><para>Added new macro BOOST_ASIO_DISABLE_FENCED_BLOCK
to permit the disabling of memory fences around completion handlers,
even if thread support is enabled.</para></item>
            <item><para>Reworked timeout examples to better illustrate
typical use cases.</para></item>
            <item><para>Ensured that handler arguments are passed as
const types.</para></item>
            <item><para>Fixed incorrect parameter order in null_buffers
variant of async_send_to.</para></item>
            <item><para>Ensured unsigned char is used with isdigit in
getaddrinfo emulation.</para></item>
            <item><para>Fixed handling of very small but non-zero
timeouts.</para></item>
            <item><para>Fixed crash that occurred when an empty buffer
sequence was passed to a composed read or write operation.</para></item>
            <item><para>Added missing operator+ overload in
buffers_iterator.</para></item>
            <item><para>Implemented cancellation of null_buffers
operations on Windows.</para></item>
          </unorderedlist></item>
          <item><para>Config:</para>
          <unorderedlist>
            <item><para>Added new defect macro,
BOOST_NO_COMPLETE_VALUE_INITIALIZATION.</para></item>
            <item><para>Added new defect macro
BOOST_NO_0X_HDR_TYPEINDEX.</para></item>
            <item><para>Added support for code visibility in
GCC.</para></item>
          </unorderedlist></item>
          <item><para>Filesystem:</para>
          <unorderedlist>
            <item><para>This release contains both version 2 and version
3 of the library.</para></item>
            <item><para>Version 3 is a major upgrade that will break
some existing user code, so version 2 is the default. Users are
encouraged to migrate to version 3.</para></item>
            <item><para>See 'Version 2' and 'Version 3' for more
information.</para></item>
            <item><para>Fix problems with symbol visibility for shared
libraries.</para></item>
            <item><para>Fix various minor problems.</para></item>
          </unorderedlist></item>
          <item><para>Foreach:</para>
          <unorderedlist>
            <item><para>Add boost/foreach_fwd.hpp for forward
declarations of foreach's customization points.</para></item>
            <item><para>Remove out-of-date work-arounds for sun
compilers.</para></item>
          </unorderedlist></item>
          <item><para>Fusion:</para>
          <unorderedlist>
            <item><para>Added fusion::reverse_fold, fusion::iter_fold
and fusion::reverse_iter_fold.</para></item>
          </unorderedlist></item>
          <item><para>Hash:</para>
          <unorderedlist>
            <item><para>Option to prevent implicit casts when calling
the hash function by defining the macro BOOST_HASH_NO_IMPLICIT_CASTS,
which can avoid some subtle problems. This might be activated by default
in a future version.</para></item>
          </unorderedlist></item>
          <item><para>Iostreams:</para>
          <unorderedlist>
            <item><para>Several fixes for file descriptors class,
including a breaking change to the constructors and open methods for
file_descriptor, file_descriptor_source and file_descriptor_sink. See
the documentation for details. The old methods are still available if
you define BOOST_IOSTREAMS_USE_DEPRECATED.</para></item>
            <item><para>Fix several issues with compression and
decompression.</para></item>
            <item><para>And a load more miscellaneous
fixes.</para></item>
          </unorderedlist></item>
          <item><para>Math:</para>
          <unorderedlist>
            <item><para>Fixed incorrect range and support for Rayleigh
distribution.</para></item>
          </unorderedlist></item>
          <item><para>MPL:</para>
          <unorderedlist>
            <item><para>Make mpl::string work with
mpl::transform.</para></item>
          </unorderedlist></item>
          <item><para>Multi-index Containers:</para>
          <unorderedlist>
            <item><para>Fixed a bug preventing the use of modify_key
with rollback in ordered and hashed indices when Modifier and Rollback
are different types.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Minor change in behavior: when using proto::and_
as a transform, apply all transforms but only return the result of
applying the last.</para></item>
            <item><para>Minor change in behavior: proto::as_expr and
proto::as_child no longer run objects that are already proto expressions
through the expression domain's generator.</para></item>
            <item><para>Minor change in behavior: Proto uses
proto::basic_expr instead of proto::expr when possible for better
compile times.</para></item>
            <item><para>Add support for sub-domains.</para></item>
            <item><para>Introduce per-domain as_expr and as_child
customization points to allow for domain-specific customization of
variable capture behavior.</para></item>
            <item><para>The proto::_default transform is also a grammar
that matches the expressions the transform knows how to
handle.</para></item>
            <item><para>Add proto::_void, a no-op primitive transform
that does nothing and returns void.</para></item>
            <item><para>The proto::pass_through transform doesn't strip
expression wrappers.</para></item>
            <item><para>Const-correctness fixes when invoking proto
domains.</para></item>
          </unorderedlist></item>
          <item><para>Regex:</para>
          <unorderedlist>
            <item><para>Fixed various issues.</para></item>
          </unorderedlist></item>
          <item><para>Spirit:</para>
          <unorderedlist>
            <item><para>Spirit V2.4, see the 'What's New' section for
details.</para></item>
          </unorderedlist></item>
          <item><para>System:</para>
          <unorderedlist>
            <item><para>Change system_category and generic_category to
functions, to conform to the C++0x FCD. This change may cause compile
errors some user code; the fix is add "()" to references to
system_category and generic_category, so that they become function
calls.</para></item>
            <item><para>Fix problems with symbol visibility for shared
libraries.</para></item>
            <item><para>Fixed various issues.</para></item>
          </unorderedlist></item>
          <item><para>Thread:</para>
          <unorderedlist>
            <item><para>Fixes for miscellaneous issues. Fixes for other
miscellaneous issues (remove warnings, support newer compilers,
etc.)</para></item>
          </unorderedlist></item>
          <item><para>TR1:</para>
          <unorderedlist>
            <item><para>Fixed VC10 support.</para></item>
            <item><para>std::tr1::result_of always uses the TR1 ResultOf
protocol, even on compilers that support the C++0x decltype-based
implementation.</para></item>
          </unorderedlist></item>
          <item><para>Type Traits:</para>
          <unorderedlist>
            <item><para>Added support for rvalue references throughout
the library, plus two new traits classes is_rvalue_reference and
is_lvalue_reference.</para></item>
          </unorderedlist></item>
          <item><para>uBLAS:</para>
          <unorderedlist>
            <item><para>New assignment operators to feed in vectors and
matrices in many nice ways.</para></item>
            <item><para>New doxygen-based documentation</para></item>
            <item><para>Enable arithmetic operators (+,-,*,/) to work
between ublas containers</para></item>
            <item><para>of std::complex and integral
types.</para></item>
            <item><para>Removed unused variables in
functional.hpp.</para></item>
            <item><para>New matrix_indirect and vector_indirect views to
access elements with a matrix or vector of indices</para></item>
          </unorderedlist></item>
          <item><para>Utility:</para>
          <unorderedlist>
            <item><para>Added a new template class,
boost::initialized&lt;T&gt;.</para></item>
            <item><para>New version of value_initialized&lt;T&gt; no
longer calls memset when the compiler has implemented
value-initialization completely.</para></item>
            <item><para>New template boost::tr1_result_of that
implements the TR1 ResultOf protocol even if boost::result_of uses the
C++0x decltype-based implementation.</para></item>
          </unorderedlist></item>
          <item><para>Uuid:</para>
          <unorderedlist>
            <item><para>Define BOOST_UUID_NO_TYPE_TRAITS to remove the
dependency on Boost.TypeTraits.</para></item>
            <item><para>Stream operator&lt;&lt; handles left, internal,
and right manipulators.</para></item>
            <item><para>Added to_string, to_wstring to convert a uuid to
a string.</para></item>
            <item><para>Fixed minor bugs in documentation.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive:</para>
          <unorderedlist>
            <item><para>Replace non-portable using declarations with
typedefs in nested_results.</para></item>
            <item><para>Support user-defined assertions with
placeholders for non-local variables.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Tools">
          <item><para>Boostbook:</para>
          <unorderedlist>
            <item><para>Significantly faster.</para></item>
            <item><para>Improved syntax highlighter.</para></item>
          </unorderedlist></item>
          <item><para>Quickbook:</para>
          <unorderedlist>
            <item><para>Use the cygwin 1.7 API for better path
handling.</para></item>
            <item><para>Improved boostbook generation.</para></item>
            <item><para>Tweak the grammar to clean up some edge
cases.</para></item>
            <item><para>For more detail see the change
log.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.42.0" to="1.43.0">
        <items name="New Libraries">
          <item><para>Functional/factory:</para>
          <unorderedlist>
            <item><para>Function objects for dynamic and by-value
construction.</para></item>
          </unorderedlist></item>
          <item><para>Functional/forward:</para>
          <unorderedlist>
            <item><para>Function object adapters to address the
forwarding problem.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Major Updates">
          <item><para>Range:</para>
          <unorderedlist>
            <item><para>Boost.Range has undergone extensive updates that
it include all of the features from the recently reviewed
Boost.RangeEx.</para></item>
            <item><para>Range-based version of the full STL iterator
based algorithms.</para></item>
            <item><para>Range adaptors which can be combined with
range-based algorithms for unprecedented expressiveness and
efficiency.</para></item>
            <item><para>New functions: irange, istream_range, join,
combine.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Accumulators:</para>
          <unorderedlist>
            <item><para>Avoid premature template evaluation in operator
overload return types.</para></item>
          </unorderedlist></item>
          <item><para>Array:</para>
          <unorderedlist>
            <item><para>Added support for SunCC compiler.</para></item>
            <item><para>Added 'fill' member function.</para></item>
            <item><para>Changed exception code to use
boost::throw_exception.</para></item>
          </unorderedlist></item>
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Improved performance.</para></item>
            <item><para>Reduced compile times.</para></item>
            <item><para>Reduced the size of generated
code.</para></item>
            <item><para>Extended the guarantee that background threads
don't call user code to all asynchronous operations.</para></item>
            <item><para>Changed to use edge-triggered epoll on
Linux.</para></item>
            <item><para>Changed to use timerfd for dispatching timers on
Linux, when available.</para></item>
            <item><para>Changed to use one-shot notifications with
kqueue on Mac OS X and BSD platforms.</para></item>
            <item><para>Added a bitmask type
ip::resolver_query_base::flags as per the TR2 proposal. This type
prevents implicit conversion from int to flags, allowing the compiler to
catch cases where users incorrectly pass a numeric port number as the
service name.</para></item>
            <item><para>Added #define NOMINMAX for all Windows
compilers. Users can define BOOST_ASIO_NO_NOMINMAX to suppress this
definition.</para></item>
            <item><para>Fixed a bug where 0-byte asynchronous reads were
incorrectly passing an error::eof result to the completion
handler.</para></item>
            <item><para>Changed the io_control() member functions to
always call ioctl on the underlying descriptor when modifying blocking
mode.</para></item>
            <item><para>Changed the resolver implementation to longer
require the typedefs InternetProtocol::resolver_query and
InternetProtocol::resolver_iterator, as neither typedef is part of the
documented InternetProtocol requirements. The corresponding typedefs in
the ip::tcp, ip::udp and ip::icmp classes have been
deprecated.</para></item>
            <item><para>Fixed out-of-band handling for reactors not
based on select().</para></item>
            <item><para>Added new BOOST_ASIO_DISABLE_THREADS macro that
allows Asio's threading support to be independently
disabled.</para></item>
            <item><para>Minor documentation improvements.</para></item>
          </unorderedlist></item>
          <item><para>Fusion:</para>
          <unorderedlist>
            <item><para>Added new macros for adapting or defining custom
types.</para></item>
          </unorderedlist></item>
          <item><para>Iostreams:</para>
          <unorderedlist>
            <item><para>Minor fixes.</para></item>
          </unorderedlist></item>
          <item><para>Multi-index Containers:</para>
          <unorderedlist>
            <item><para>Serialization of non default constructible
values is now properly supported through user-provided facilities
save_construct_data and load_construct_data. multi_index_container
serialization class version has been bumped from 1 to 2.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Minor change in behavior: non-const expression
self-assignment creates an assign node.</para></item>
            <item><para>Minor change to recommended expression extension
mechanism: use BOOST_PROTO_EXTENDS_USING_ASSIGN().</para></item>
            <item><para>Fix error in invocation of callable monomorphic
function objects in Proto transforms.</para></item>
            <item><para>Fix misc const correctness issues, work around
fusion bug.</para></item>
            <item><para>Add non-const function call overloads to proto
terminals.</para></item>
            <item><para>Add a default constructor to
proto::literal&lt;&gt;.</para></item>
            <item><para>Do not use deprecated config
macros.</para></item>
            <item><para>Add proto::assert_matches() function and friends
to &lt;boost/proto/debug.hpp&gt;.</para></item>
            <item><para>functional::make_expr&lt;&gt; and
functional::unpack_expr&lt;&gt; return const-qualified
rvalues.</para></item>
            <item><para>Add documentation for Expr and Domain
concepts.</para></item>
          </unorderedlist></item>
          <item><para>Random:</para>
          <unorderedlist>
            <item><para>Put the implementation of random_device in a
compiled lib, and added Windows support.</para></item>
            <item><para>Rewrote the documentation using
Quickbook/Doxygen/Boostbook and brought it up to date.</para></item>
          </unorderedlist></item>
          <item><para>Spirit:</para>
          <unorderedlist>
            <item><para>Spirit V2.3, see the 'What's New' section for
details.</para></item>
          </unorderedlist></item>
          <item><para>Thread:</para>
          <unorderedlist>
            <item><para>Uses boost::throw_exception for all exceptions
except thread_interrupted</para></item>
            <item><para>Bug fix.</para></item>
            <item><para>Optimizations to mutex locks and
call_once</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>erase_return_void is now
quick_erase.</para></item>
          </unorderedlist></item>
          <item><para>Uuid:</para>
          <unorderedlist>
            <item><para>Split generators into separate
files.</para></item>
            <item><para>Fixed bug in
basic_random_generator.</para></item>
            <item><para>Updated documentation.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive:</para>
          <unorderedlist>
            <item><para>Add missing include to
&lt;boost/xpressive/regex_error.hpp&gt;.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Build System">
          <item><para>When cross-compiling to GNU targets, static
libraries are properly created. Previously, using such libraries
resulted in Archive has no index error.</para></item>
          <item><para>The naming of DLL and import libraries with gcc
compiler on Windows, both mingw and cygwin, now matches default
conventions of those environments. Previously, the naming scheme was the
same as for other Windows compilers.</para></item>
        </items>

        <items name="Updated Tools">
          <item><para>Quickbook:</para>
          <unorderedlist>
            <item><para>Unicode escape characters.</para></item>
            <item><para>Support the UTF-8 byte order mark.</para></item>
            <item><para>Disallow [ in simple markup. Fixes some errors
with mismatched punctuation.</para></item>
            <item><para>Add a command line flag (-D) to define macros at
the command line.</para></item>
            <item><para>Improved post-processor output.</para></item>
            <item><para>Check that [section] and [endsect] tags are
balanced in templates.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.41.0" to="1.42.0">
        <items name="New Libraries">
          <item><para>Uuid:</para>
          <unorderedlist>
            <item><para>A universally unique identifier.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Added a new HTTP Server 4 example illustrating
the use of stackless coroutines with Asio.</para></item>
            <item><para>Changed handler allocation and invocation to use
boost::addressof to get the address of handler objects, rather than
applying operator&amp; directly.</para></item>
            <item><para>Restricted MSVC buffer debugging workaround to
2008, as it causes a crash with 2010 beta 2.</para></item>
            <item><para>Fixed a problem with the lifetime of handler
memory, where Windows needs the OVERLAPPED structure to be valid until
both the initiating function call has returned and the completion packet
has been delivered.</para></item>
            <item><para>Don't block signals while performing system
calls, but instead restart the calls if they are
interrupted.</para></item>
            <item><para>Documented the guarantee made by strand objects
with respect to order of handler invocation.</para></item>
            <item><para>Changed strands to use a pool of
implementations, to make copying of strands cheaper.</para></item>
            <item><para>Ensured that kqueue support is enabled for BSD
platforms.</para></item>
            <item><para>Added a boost_ prefix to the extern "C" thread
entry point function.</para></item>
            <item><para>In getaddrinfo emulation, only check the socket
type (SOCK_STREAM or SOCK_DGRAM) if a service name has been specified.
This should allow the emulation to work with raw sockets.</para></item>
            <item><para>Added a workaround for some broken Windows
firewalls that make a socket appear bound to 0.0.0.0 when it is in fact
bound to 127.0.0.1.</para></item>
            <item><para>Applied a fix for reported excessive CPU usage
under Solaris.</para></item>
            <item><para>Added some support for platforms that use older
compilers such as g++ 2.95.</para></item>
          </unorderedlist></item>
          <item><para>Circular Buffer:</para>
          <unorderedlist>
            <item><para>Added methods erase_begin(size_type) and
erase_end(size_type) with constant complexity for such types of stored
elements which do not need an explicit destruction e.g. int or
double.</para></item>
            <item><para>Similarly changed implementation of the clear()
method and the destructor so their complexity is now constant for such
types of stored elements which do not require an explicit destruction
(the complexity for other types remains linear).</para></item>
          </unorderedlist></item>
          <item><para>Fusion:</para>
          <unorderedlist>
            <item><para>The accumulator is the first argument to the
functor of fusion::fold and fusion::accumulate.</para></item>
            <item><para>Added support for associative iterators and
views.</para></item>
          </unorderedlist></item>
          <item><para>Graph:</para>
          <unorderedlist>
            <item><para>Removed old interface to
compressed_sparse_row_graph, making new interface the
default.</para></item>
          </unorderedlist></item>
          <item><para>Integer:</para>
          <unorderedlist>
            <item><para>Reverted Trunk to release branch state (i.e. a
"known good state").</para></item>
            <item><para>Fixed some known issues.</para></item>
            <item><para>Added long long support to boost::static_log2,
boost::static_signed_min, boost::static_signed_max,</para></item>
            <item><para>boost::static_unsigned_minboost::static_unsigned_max,
when available.</para></item>
            <item><para>The argument type and the result type of
boost::static_signed_min etc are now typedef'd. Formerly, they were
hardcoded as unsigned long and int respectively. Please, use the
provided typedefs in new code (and update old code as soon as
possible).</para></item>
          </unorderedlist></item>
          <item><para>Iostreams:</para>
          <unorderedlist>
            <item><para>Fixed many outstanding issues.</para></item>
          </unorderedlist></item>
          <item><para>Program.Options:</para>
          <unorderedlist>
            <item><para>Information about option name added to a few
exception classes and various clean ups in exception
classes.</para></item>
            <item><para>Description wordwrapping in presense of default
parameters fixed.</para></item>
            <item><para>Empty value in configuration file is now
permitted.</para></item>
            <item><para>Quotes are no longer stripped from string
values.</para></item>
            <item><para>Fix endless loop in case of long default
arguments.</para></item>
            <item><para>Fix compile warning caused by usage of
boost::any.</para></item>
            <item><para>Fix memory bug in
example/response_file.cpp.</para></item>
            <item><para>Most compilation warnings were
fixed.</para></item>
            <item><para>Make column width for description text
configurable..</para></item>
            <item><para>Add general split function:
split_unix().</para></item>
            <item><para>Enable open config files from given file
name.</para></item>
            <item><para>Additional flag for required
options.</para></item>
            <item><para>Enable case insensitive style for command
line.</para></item>
          </unorderedlist></item>
          <item><para>PropertyMap:</para>
          <unorderedlist>
            <item><para>Removed old header files (directly in the boost/
directory); they were deprecated since 1.40, replaced by headers in
boost/property_map/.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Fix const correctness issues with proto::flatten
and friends.</para></item>
            <item><para>Accomodate recent change to fusion::fold, remove
old support for Doxygen and pre-1.35 Fusion.</para></item>
            <item><para>In binary operations, when one operand has a
user-specified domain and the other has the default domain, the
user-specified domain trumps.</para></item>
            <item><para>Fix BOOST_PROTO_EXTENDS to work with elaborated
types.</para></item>
            <item><para>Work around EDG compiler bug with function types
and cv-qualification.</para></item>
          </unorderedlist></item>
          <item><para>Regex:</para>
          <unorderedlist>
            <item><para>Added support for Functors rather than strings
as format expressions.</para></item>
            <item><para>Improved error reporting when throwing
exceptions to include better more relevant information.</para></item>
            <item><para>Improved performance and reduced stack usage of
recursive expressions.</para></item>
            <item><para>Fixed some bugs.</para></item>
          </unorderedlist></item>
          <item><para>Spirit:</para>
          <unorderedlist>
            <item><para>Spirit V2.2, see the 'What's New' section for
details.</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Support instantiating the containers with
incomplete value types.</para></item>
            <item><para>Add erase_return_void as a temporary workaround
for the current erase which can be inefficient because it has to find
the next element to return an iterator.</para></item>
            <item><para>Add templated find overload for compatible
keys.</para></item>
            <item><para>Improved codegear compatibility.</para></item>
            <item><para>Other minor changes, full details in the
changelog.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive:</para>
          <unorderedlist>
            <item><para>match_results no longer relies on undefined
behavior in std::list.</para></item>
            <item><para>Do NOT copy singular iterators.</para></item>
            <item><para>Eliminate gcc and darwin warnings.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.40.0" to="1.41.0">
        <items name="New Libraries">
          <item><para>Property Tree:</para>
          <unorderedlist>
            <item><para>A tree data structure especially suited to
storing configuration data.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Libraries">
          <item><para>DateTime:</para>
          <unorderedlist>
            <item><para>The default format for time durations is now
"%-%O:%M:%S%F" instead of "%-%H:%M:%S%F" that was used previously. In
order to retain the old behavior, the format string has to be specified
explicitly during the time IO facet construction.</para></item>
            <item><para>Gregorian dates now use 32-bit integer type
internally on 64-bit platforms.</para></item>
          </unorderedlist></item>
          <item><para>Filesystem:</para>
          <unorderedlist>
            <item><para>Bug fixes.</para></item>
          </unorderedlist></item>
          <item><para>Iostreams:</para>
          <unorderedlist>
            <item><para>Some old unreleased developments. There are
still several open issues that should be fixed in the next
version.</para></item>
            <item><para>Add a grep filter.</para></item>
            <item><para>Support archives with multiple
members.</para></item>
            <item><para>Make tee work with input streams.</para></item>
            <item><para>Improved filesystem
interoperability.</para></item>
            <item><para>Several warnings fixed or
suppressed.</para></item>
            <item><para>Various other fixes.</para></item>
          </unorderedlist></item>
          <item><para>Math:</para>
          <unorderedlist>
            <item><para>Substantially improved the performance of the
incomplete gamma function and it's inverse: this enhances the
performance of the gamma, poisson, chi-squared and non-central
chi-squared distributions.</para></item>
          </unorderedlist></item>
          <item><para>Multi-index Containers:</para>
          <unorderedlist>
            <item><para>Maintenance fixes.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Clean up some MSVC warnings and errors in /Za
(disable Microsoft extensions) mode.</para></item>
            <item><para>Fixes for c++0x mode on various
compilers.</para></item>
          </unorderedlist></item>
          <item><para>Python:</para>
          <unorderedlist>
            <item><para>Boost.Python now supports Python
3.</para></item>
          </unorderedlist></item>
          <item><para>Regex:</para>
          <unorderedlist>
            <item><para>Added support for many Perl 5.10 syntax elements
including named sub-expressions, branch resets and recursive regular
expressions.</para></item>
          </unorderedlist></item>
          <item><para>Spirit:</para>
          <unorderedlist>
            <item><para>This is the initial official release of the new
Spirit V2.1, a completely new library for parsing, lexing, and output
generation. Note: this release is not backwards compatible with earlier
versions. Known issue: qi::symbol::find will match a symbol that starts
with the string you're searching for. This will be fixed in the next
version.</para></item>
          </unorderedlist></item>
          <item><para>System:</para>
          <unorderedlist>
            <item><para>Bug fix.</para></item>
          </unorderedlist></item>
          <item><para>Thread:</para>
          <unorderedlist>
            <item><para>Support for futures, promises and packaged tasks
added boost::thread_specific_ptr is now faster when there are lots of
thread-specific objects</para></item>
            <item><para>Some Boost.Thread facilities are now
header-only</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Major update:</para>
            <unorderedlist>
              <item><para>Replaced a lot of the macro based implementation
with a cleaner template based implementation.</para></item>
              <item><para>Reduced memory use.</para></item>
              <item><para>Full details in the changelog.</para></item>
            </unorderedlist></item>
          </unorderedlist></item>
          <item><para>Utility:</para>
          <unorderedlist>
            <item><para>A "const" issue of value_initialized is fixed:
Its data() member function and its conversion operator are replaced by
overloads for const and non-const access.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive:</para>
          <unorderedlist>
            <item><para>Fix infinite loop with some uses of \Q...\E
quotemeta.</para></item>
            <item><para>Eliminate unreachable code warnings on MSVC
Clean up some MSVC warnings and errors in /Za ("disable Microsoft
extensions") mode.</para></item>
            <item><para>Fixes for c++0x mode on various
compilers.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Build System">
          <item><para>A bug preventing "fat" 32-bit + 64-bit builds on
OSX has been fixed.</para></item>
        </items>

        <items name="Boost.CMake moved">
          <item><para>The cmake version of boost has moved; the
Boost.CMmake release will be separate and will lag the main release
slightly, but will also be capable of producing patch releases as
necessary.</para></item>
        </items>

        <items name="Updated Tools">
          <item><para>Quickbook 1.5:</para>
          <unorderedlist>
            <item><para>These changes require your document to use the
[quickbook 1.5] tag:</para>
            <unorderedlist>
              <item><para>More intuitive syntax and variable lookup for
template calls</para></item>
              <item><para>Image attributes.</para></item>
              <item><para>Table Ids.</para></item>
              <item><para>Better handling of whitespace in section
syntax.</para></item>
            </unorderedlist></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.39.0" to="1.40.0">
        <items name="Update">
          <item><para>Added missing notes for Graph and Property
Map.</para></item>
        </items>

        <items name="Boost.CMake">
          <item><para>Boost.CMake is now distributed separately. The
cmake build for boost is BROKEN in the tarballs above.</para></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Accumulators:</para>
          <unorderedlist>
            <item><para>Works on GCC 4.4.</para></item>
          </unorderedlist></item>
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Added a new ping example to illustrate the use
of ICMP sockets.</para></item>
            <item><para>Changed the buffered*_stream&lt;&gt; templates
to treat 0-byte reads and writes as no-ops, to comply with the
documented type requirements for SyncReadStream, AsyncReadStream,
SyncWriteStream and AsyncWriteStream.</para></item>
            <item><para>Changed some instances of the throw keyword to
boost::throw_exception() to allow Asio to be used when exception support
is disabled. Note that the SSL wrappers still require exception
support.</para></item>
            <item><para>Made Asio compatible with the OpenSSL 1.0
beta.</para></item>
            <item><para>Eliminated a redundant system call in the
Solaris /dev/poll backend.</para></item>
            <item><para>Fixed a bug in resizing of the bucket array in
the internal hash maps.</para></item>
            <item><para>Ensured correct propagation of the error code
when a synchronous accept fails.</para></item>
            <item><para>Ensured correct propagation of the error code
when a synchronous read or write on a Windows HANDLE
fails.</para></item>
            <item><para>Fixed failures reported when _GLIBCXX_DEBUG is
defined.</para></item>
            <item><para>Fixed custom memory allocation support for
timers.</para></item>
            <item><para>Tidied up various warnings reported by
g++.</para></item>
            <item><para>Various documentation improvements, including
more obvious hyperlinks to function overloads, header file information,
examples for the handler type requirements, and adding enum values to
the index.</para></item>
          </unorderedlist></item>
          <item><para>Circular Buffer:</para>
          <unorderedlist>
            <item><para>Fixed bugs.</para></item>
          </unorderedlist></item>
          <item><para>Foreach:</para>
          <unorderedlist>
            <item><para>Workaround for conflict with Python
headers.</para></item>
          </unorderedlist></item>
          <item><para>Function:</para>
          <unorderedlist>
            <item><para>Optimize the use of small target
objects.</para></item>
            <item><para>Make Boost.Function compile under
BOOST_NO_EXCEPTIONS.</para></item>
            <item><para>Various minor fixes.</para></item>
          </unorderedlist></item>
          <item><para>Fusion:</para>
          <unorderedlist>
            <item><para>Improved compile times for
fusion::vector.</para></item>
          </unorderedlist></item>
          <item><para>Graph:</para>
          <unorderedlist>
            <item><para>Merged in the Parallel Boost Graph Library,
giving a full suite of graph algorithms and data structures for
distributed-memory computers (such as clusters).</para></item>
            <item><para>Updates to the interface of the compressed
sparse row graph, including constructors from unsorted edge
lists.</para></item>
            <item><para>An implicit grid graph, saving memory over using
the former generator.</para></item>
            <item><para>New algorithms: Dijkstra's single-source
shortest path algorithm without a separate color map and an algorithm to
find maximal common subgraphs between two graphs.</para></item>
            <item><para>Assorted bug fixes.</para></item>
          </unorderedlist></item>
          <item><para>Hash:</para>
          <unorderedlist>
            <item><para>Automatically configure the float functions
using template metaprogramming instead of trying to configure every
possibility manually.</para></item>
          </unorderedlist></item>
          <item><para>Interprocess:</para>
          <unorderedlist>
            <item><para>Windows shared memory is created in Shared
Documents folder so that it can be shared between services and
processes</para></item>
            <item><para>Fixed bugs.</para></item>
          </unorderedlist></item>
          <item><para>Intrusive:</para>
          <unorderedlist>
            <item><para>Code cleanup in tree_algorithms.hpp and
avl_tree_algorithms.hpp</para></item>
            <item><para>Fixed bug.</para></item>
          </unorderedlist></item>
          <item><para>MPL:</para>
          <unorderedlist>
            <item><para>Added mpl::char_ and mpl::string for
compile-time string manipulation, based on multichar
literals.</para></item>
            <item><para>Updated MPL Reference Manual.</para></item>
            <item><para>Bug fixes.</para></item>
          </unorderedlist></item>
          <item><para>Program.Options:</para>
          <unorderedlist>
            <item><para>Support for building with disabled
exceptions.</para></item>
            <item><para>Unicode parser no longer drops original
tokens.</para></item>
            <item><para>Fixed crash on user-inserted items in
variables_map.</para></item>
          </unorderedlist></item>
          <item><para>Property Map:</para>
          <unorderedlist>
            <item><para>Moved property map code into a separate
directory, boost/property_map/.</para></item>
            <item><para>The old files exist and forward to the new ones;
the previous files directly in boost/ will be removed in Boost
1.42.0.</para></item>
            <item><para>Moved distributed property maps to
boost::graph::parallel namespace.</para></item>
            <item><para>Added a property map based on a
boost::shared_array, providing a simpler interface.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>PrimitiveTransforms have stricter conformance to
ResultOf protocol. (Warning: some invalid code may break.)</para></item>
            <item><para>Add a sensible default for proto::_default's
template parameter.</para></item>
            <item><para>Improved default evaluation strategy for
pointers to members.</para></item>
            <item><para>GCC 3.4 portability fixes.</para></item>
            <item><para>Work around Visual C++'s non-std-compliant
ciso646 macros.</para></item>
          </unorderedlist></item>
          <item><para>Random:</para>
          <unorderedlist>
            <item><para>Made the constructors of all the generators call
the copy constructor when passed a non-const reference.</para></item>
            <item><para>Changed seeding functions to accept any
arithmetic type. As a side-effect, the exact signature of seed changed
for some classes.</para></item>
            <item><para>Major bug fixes in uniform_int.</para></item>
          </unorderedlist></item>
          <item><para>Serialization:</para>
          <unorderedlist>
            <item><para>Removed deprecated headers:
boost/static_warning.hpp, boost/state_saver.hpp, boost/smart_cast.hpp,
boost/pfto.hpp. Use the the equivalent headers in the
boost/serialization/ directory instead.</para></item>
            <item><para>detail::archive_serializer_map should now be
used instead of detail::archive_pointer_iserializer.</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Implement emplace for all compilers, not just
ones with rvalue references and variadic templates.</para></item>
            <item><para>Create less buckets by default.</para></item>
            <item><para>Some minor tweaks for better compiler
support.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive:</para>
          <unorderedlist>
            <item><para>Works on Visual C++ 10.0.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Build System">
          <item><para>The default naming of libraries in Unix-like
environment now matches system conventions, and does not include various
decorations. Naming of libraries on Cygwin was also fixed. Support for
beta versions of Microsoft Visual Studio 10 was added. With gcc, 64-bit
compilation no longer requires that target architecture be
specified.</para></item>
        </items>

        <items name="Updated Tools">
          <item><para>Boostbook:</para>
          <unorderedlist>
            <item><para>Hide INTERNAL ONLY enums in doxygen
documentation.</para></item>
            <item><para>Tweaked appearance of member
classes/structs/unions in a class synopsis.</para></item>
          </unorderedlist></item>
          <item><para>Quickbook:</para>
          <unorderedlist>
            <item><para>Support python code snippets.</para></item>
            <item><para>Add teletype source mode</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.38.0" to="1.39.0">
        <items name="New Libraries">
          <item><para>Signals2:</para>
          <unorderedlist>
            <item><para>Managed signals &amp; slots callback
implementation (thread-safe version 2).</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Implement automatic resizing of the bucket array
in the internal hash maps. This is to improve performance for very large
numbers of asynchronous operations and also to reduce memory usage for
very small numbers. A new macro BOOST_ASIO_HASH_MAP_BUCKETS may be used
to tweak the sizes used for the bucket arrays.</para></item>
            <item><para>Add performance optimisation for the Windows
IOCP backend for when no timers are used.</para></item>
            <item><para>Prevent locale settings from affecting
formatting of TCP and UDP endpoints.</para></item>
            <item><para>Fix a memory leak that occurred when an
asynchronous SSL operation's completion handler threw an
exception.</para></item>
            <item><para>Fix the implementation of io_control() so that
it adheres to the documented type requirements for
IoControlCommand.</para></item>
            <item><para>Fix incompatibility between Asio and
ncurses.h.</para></item>
            <item><para>On Windows, specifically handle the case when an
overlapped ReadFile call fails with ERROR_MORE_DATA. This enables a hack
where a windows::stream_handle can be used with a message-oriented named
pipe.</para></item>
            <item><para>Fix system call wrappers to always clear the
error on success, as POSIX allows successful system calls to modify
errno.</para></item>
            <item><para>Don't include termios.h if
BOOST_ASIO_DISABLE_SERIAL_PORT is defined.</para></item>
            <item><para>Cleaned up some more MSVC level 4
warnings.</para></item>
            <item><para>Various documentation fixes.</para></item>
          </unorderedlist></item>
          <item><para>Flyweight:</para>
          <unorderedlist>
            <item><para>The refcounted component was not thread-safe due
to an incorrect implementation and could deadlock under heavy usage
conditions. This problem has been corrected.</para></item>
          </unorderedlist></item>
          <item><para>Foreach:</para>
          <unorderedlist>
            <item><para>Eliminate shadow warnings on gcc for nested
FOREACH loops</para></item>
            <item><para>Portability fix for Intel-Win
toolset</para></item>
          </unorderedlist></item>
          <item><para>Hash:</para>
          <unorderedlist>
            <item><para>Remove deprecated headers for hashing
containers. Everything that was in them is included in
&lt;functional/hash.hpp&gt;.</para></item>
            <item><para>Other minor changes, full details in the library
change log.</para></item>
          </unorderedlist></item>
          <item><para>Interprocess:</para>
          <unorderedlist>
            <item><para>Increased portability and bug fixes. Full
details in the library change log.</para></item>
          </unorderedlist></item>
          <item><para>Intrusive:</para>
          <unorderedlist>
            <item><para>Optimizations and bug fixes. Full details in the
library change log.</para></item>
          </unorderedlist></item>
          <item><para>Program.Options:</para>
          <unorderedlist>
            <item><para>Multitoken options fixed.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Work around incompatibility with standard Linux
header.</para></item>
            <item><para>Add proto::noinvoke&lt;&gt; to block
metafunction invocation in object transforms.</para></item>
          </unorderedlist></item>
          <item><para>PtrContainer:</para>
          <unorderedlist>
            <item><para>Bug fixes from Trac applied.</para></item>
          </unorderedlist></item>
          <item><para>Range:</para>
          <unorderedlist>
            <item><para>Bug fixes from Trac applied.</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Fixed regression in 1.38 that prevented
unordered from using more than about 1.5 million buckets.</para></item>
            <item><para>Minor implementation changes.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive:</para>
          <unorderedlist>
            <item><para>Work around for gcc optimization problem
resulting in pure virtual function call runtime error.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Tools">
          <item><para>Boostbook:</para>
          <unorderedlist>
            <item><para>Improved PDF generation.</para></item>
            <item><para>Preliminary HTMLHelp support.</para></item>
            <item><para>Add default path for callout
images.</para></item>
            <item><para>Include data members' &lt;purpose&gt; in the
class synopsis.</para></item>
            <item><para>Fix bug where a function's &lt;purpose&gt;
wasn't displayed if it was just plain text.</para></item>
            <item><para>Support the alt tag in &lt;headername&gt; and
&lt;macroname&gt; Use this if the header or macro name is different to
the contents of the tag.</para></item>
            <item><para>Support links relative to the boost root in
&lt;ulink&gt; tags, using a custom url, see the linking documentation
for details.</para></item>
            <item><para>Avoid generating filenames that only differ in
case for function, method and macro documentation.</para></item>
            <item><para>Run the docbook chunker quietly, unless
boostbook.verbose is set. This parameter might be used in other places
in future releases.</para></item>
            <item><para>Make the 1.1 DTD available.</para></item>
            <item><para>Fill in some missing reference
documentation.</para></item>
          </unorderedlist></item>
          <item><para>Changes to doxygen integration:</para>
          <unorderedlist>
            <item><para>Support \throw.</para></item>
            <item><para>Support global variables and
enums.</para></item>
            <item><para>Better support for documentation written in
function and method bodies.</para></item>
            <item><para>Workaround a problem with doxygen 1.5.8's xml
output.</para></item>
          </unorderedlist></item>
          <item><para>Quickbook:</para>
          <unorderedlist>
            <item><para>Return an error code and error count if there
are any errors.</para></item>
            <item><para>Support both windows and cygwin paths at the
compile line when compiled with cygwin.</para></item>
          </unorderedlist></item>
          <item><para>Fix some issues with C++ and Python code:</para>
          <unorderedlist>
            <item><para>Fail gracefully for a mismatched
''.</para></item>
            <item><para>Warn if any unexpected character are encountered
and write them out properly.</para></item>
            <item><para>Fix a bug for hex encoded characters in
strings.</para></item>
            <item><para>Improved testing, including tests for expected
failures.</para></item>
            <item><para>Generate valid document info for document types
other than library.</para></item>
            <item><para>Remove library specific
attributes.</para></item>
            <item><para>Put title before info block.</para></item>
            <item><para>Fix a bug when calling templates.</para></item>
            <item><para>Less warnings when built using
gcc.</para></item>
            <item><para>Small documentation improvements.</para></item>
            <item><para>Fix a bug with xinclude pages when outdir is the
current directory.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.37.0" to="1.38.0">
        <items name="New Libraries">
          <item><para>Flyweight:</para>
          <unorderedlist>
            <item><para>Design pattern to manage large quantities of
highly redundant objects.</para></item>
          </unorderedlist></item>
          <item><para>ScopeExit:</para>
          <unorderedlist>
            <item><para>Execute arbitrary code at scope
exit.</para></item>
          </unorderedlist></item>
          <item><para>Swap:</para>
          <unorderedlist>
            <item><para>Enhanced generic swap function.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Accumulators:</para>
          <unorderedlist>
            <item><para>Add rolling_sum, rolling_count and rolling_mean
accumulators.</para></item>
          </unorderedlist></item>
          <item><para>Any:</para>
          <unorderedlist>
            <item><para>Use a by-value argument for
operator=.</para></item>
          </unorderedlist></item>
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Improved compatibility with some Windows
firewall software.</para></item>
            <item><para>Ensured arguments to
windows::overlapped_ptr::complete() are correctly passed to the
completion handler.</para></item>
            <item><para>Fixed a link problem and multicast failure on
QNX.</para></item>
            <item><para>Fixed a compile error in SSL support on MinGW /
g++ 3.4.5.</para></item>
            <item><para>Drop back to using a pipe for notification if
eventfd is not available at runtime on Linux.</para></item>
            <item><para>Various minor bug and documentation
fixes.</para></item>
          </unorderedlist></item>
          <item><para>Config:</para>
          <unorderedlist>
            <item><para>Add new macros BOOST_NO_STD_UNORDERED and
BOOST_NO_INITIALIZER_LISTS.</para></item>
            <item><para>Added Codegear compiler support.</para></item>
            <item><para>Added Dragonfly to the BSD family of
configs.</para></item>
            <item><para>Updated MSVC's binary ABI settings to match
compiler default when doing 64-bit builds.</para></item>
            <item><para>Recognise latest compilers from MS and
Intel.</para></item>
          </unorderedlist></item>
          <item><para>Date_Time:</para>
          <unorderedlist>
            <item><para>Added support for formatting and reading time
durations longer than 24 hours with new formatter: %0.</para></item>
            <item><para>Removed the testfrmwk.hpp file from the public
include directory.</para></item>
            <item><para>Fixed several bugs and compile
errors.</para></item>
          </unorderedlist></item>
          <item><para>Exception:</para>
          <unorderedlist>
            <item><para>Improved and more customizable
diagnostic_information output.</para></item>
          </unorderedlist></item>
          <item><para>Filesystem:</para>
          <unorderedlist>
            <item><para>Fix native(name) test failures on POSIX-like
systems.</para></item>
            <item><para>Several bugfixes.</para></item>
          </unorderedlist></item>
          <item><para>Graph:</para>
          <unorderedlist>
            <item><para>Added a new algorithms for Travelling Salesman
Problem approximation (metric_tsp_approx) and resource-constrained
Shortest Paths (r_c_shortest_paths).</para></item>
            <item><para>Support for named vertices in
adjacency_list.</para></item>
            <item><para>A number of bugfixes.</para></item>
          </unorderedlist></item>
          <item><para>Hash:</para>
          <unorderedlist>
            <item><para>boost/functional/detail/container_fwd.hpp has
been moved to boost/detail/container_fwd.hpp. The current location is
deprecated.</para></item>
          </unorderedlist></item>
          <item><para>Interprocess:</para>
          <unorderedlist>
            <item><para>Updated documentation to show rvalue-references
functions instead of emulation functions.</para></item>
            <item><para>More non-copyable classes are now
movable.</para></item>
            <item><para>Move-constructor and assignments now leave moved
object in default-constructed state instead of just swapping
contents.</para></item>
            <item><para>Several bugfixes.</para></item>
          </unorderedlist></item>
          <item><para>Intrusive:</para>
          <unorderedlist>
            <item><para>New treap-based containers: treap, treap_set,
treap_multiset.</para></item>
            <item><para>Corrected compilation bug for Windows-based 64
bit compilers.</para></item>
            <item><para>Corrected exception-safety bugs in container
constructors.</para></item>
            <item><para>Updated documentation to show rvalue-references
functions instead of emulation functions.</para></item>
          </unorderedlist></item>
          <item><para>Lexical Cast:</para>
          <unorderedlist>
            <item><para>Changed to work without RTTI when
BOOST_NO_TYPEID is defined.</para></item>
          </unorderedlist></item>
          <item><para>Math:</para>
          <unorderedlist>
            <item><para>Added Johan Rade's optimised floating point
classification routines.</para></item>
            <item><para>Fixed code so that it compiles in GCC's
-pedantic mode.</para></item>
          </unorderedlist></item>
          <item><para>Multi-index Containers:</para>
          <unorderedlist>
            <item><para>Some redundant type definitions have been
deprecated. Consult the library release notes for further
information.</para></item>
          </unorderedlist></item>
          <item><para>Proto:</para>
          <unorderedlist>
            <item><para>Fix problem with SFINAE of binary
operators.</para></item>
            <item><para>Fix proto::call transform for callable
transforms with &gt;3 arguments.</para></item>
            <item><para>result_of::value changed behavior for
array-by-value terminals.</para></item>
            <item><para>unpack_expr requires only Forward Sequences
rather than Random Access Sequences.</para></item>
            <item><para>Deprecate legacy undocumented
BOOST_PROTO_DEFINE_(VARARG_)FUNCTION_TEMPLATE macros.</para></item>
            <item><para>Add BOOST_PROTO_REPEAT and
BOOST_PROTO_LOCAL_ITERATE macros to help with repetitive code
generation</para></item>
            <item><para>Support for nullary expressions with tag types
other than proto::tag::terminal</para></item>
            <item><para>Allow 0- and 1-argument variants of proto::or_
and proto::and_</para></item>
          </unorderedlist></item>
          <item><para>Regex:</para>
          <unorderedlist>
            <item><para>Breaking change: empty expressions, and empty
alternatives are now allowed when using the Perl regular expression
syntax. This change has been added for Perl compatibility, when the new
syntax_option_type no_empty_expressions is set then the old behaviour is
preserved and empty expressions are prohibited.</para></item>
            <item><para>Added support for Perl style ${n} expressions in
format strings.</para></item>
            <item><para>Added support for accessing the location of
sub-expressions within the regular expression string.</para></item>
            <item><para>Fixed compiler compatibility
issues.</para></item>
          </unorderedlist></item>
          <item><para>Thread:</para>
          <unorderedlist>
            <item><para>No longer catches unhandled exceptions in
threads as this debuggers couldn't identify the cause of unhandled
exceptions in threads. An unhandled exception will still cause the
application to terminate.</para></item>
          </unorderedlist></item>
          <item><para>TR1:</para>
          <unorderedlist>
            <item><para>Added support for the TR1 math functions and the
unordered containers.</para></item>
          </unorderedlist></item>
          <item><para>Type Traits:</para>
          <unorderedlist>
            <item><para>Added support for Codegear
intrinsics.</para></item>
            <item><para>Minor tweaks to warning suppression and
alignment_of code.</para></item>
          </unorderedlist></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Use boost::swap.</para></item>
            <item><para>Use a larger prime number list for selecting the
number of buckets.</para></item>
            <item><para>Use aligned storage to store the
types.</para></item>
            <item><para>Add support for C++0x initializer lists where
they're available.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive:</para>
          <unorderedlist>
            <item><para>basic_regex gets nested syntax_option_flags and
value_type typedef, for compatibility with
std::basic_regex</para></item>
            <item><para>Ported to Proto v4; Proto v2 at
boost/xpressive/proto has been removed. regex_error inherits from
boost::exception</para></item>
          </unorderedlist></item>
        </items>

        <items name="Other Changes">
          <item><para>Experimental support for building Boost with CMake
has been introduced in this version.</para></item>
          <item><para>Fixed subversion properties for several files.
Most notably, unix shell scripts should always have unix line endings,
even in the windows packages.</para></item>
        </items>
      </change>

      <change from="1.36.0" to="1.37.0">
        <items name="New Libraries">
          <item><para>Proto:  Expression template library and compiler
construction toolkit for domain-specific embedded languages, from Eric
Niebler.</para></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Enhanced CompletionCondition concept with
the signature size_t CompletionCondition(error_code ec, size_t total),
where the return value indicates the maximum number of bytes to be
transferred on the next read or write operation. (The old
CompletionCondition signature is still supported for backwards
compatibility).</para></item>
            <item><para>New windows::overlapped_ptr class to allow
arbitrary overlapped I/O functions (such as TransmitFile) to be used
with Asio.</para></item>
            <item><para>On recent versions of Linux, an eventfd
descriptor is now used (rather than a pipe) to interrupt a blocked
select/epoll reactor.</para></item>
            <item><para>Added const overloads of
lowest_layer().</para></item>
            <item><para>Synchronous read, write, accept and connect
operations are now thread safe (meaning that it is now permitted to
perform concurrent synchronous operations on an individual socket, if
supported by the OS).</para></item>
            <item><para>Reactor-based io_service implementations now
use lazy initialisation to reduce the memory usage of an io_service
object used only as a message queue.</para></item>
          </unorderedlist></item>
          <item><para>Circular Buffer:</para>
          <unorderedlist>
            <item><para>Added new methods is_linearized() and
rotate(const_iterator).</para></item>
            <item><para>Minor bug fixes and documentation
updates.</para></item>
          </unorderedlist></item>
          <item><para>Dynamic Bitset:</para>
          <unorderedlist>
            <item><para>Constructor "do the right thing" dispatch, a
la standard sequence containers (follows the proposed resolution of
library issue 438, currently in the C++0x working
paper).</para></item>
            <item><para>Improvements to documentation, code examples
and implementation.</para></item>
          </unorderedlist></item>
          <item><para>Exception:</para>
          <unorderedlist>
            <item><para>Support for non-RTTI builds.</para></item>
            <item><para>Optimizations.</para></item>
            <item><para>A new macro BOOST_THROW_EXCEPTION which can
be used instead of boost::throw_exception when throwing, to
automatically record information about the location of the throw in
the exception object.</para></item>
          </unorderedlist></item>
          <item><para>Hash:</para>
          <unorderedlist>
            <item><para>Minor bug fix (ticket 2264).</para></item>
          </unorderedlist></item>
          <item><para>Interprocess:</para>
          <unorderedlist>
            <item><para>Added placement insertion (emplace(),
emplace_back()...) methods to containers.</para></item>
            <item><para>Containers can be used now in recursive
types.</para></item>
            <item><para>Minor bug fixes.</para></item>
          </unorderedlist></item>
          <item><para>Intrusive:</para>
          <unorderedlist>
            <item><para>Intrusive now takes advantage of compilers
with variadic templates.</para></item>
            <item><para>clone_from functions now copy predicates and
hash functions of associative containers.</para></item>
            <item><para>Added incremental hashing to unordered
containers via incremental&lt;&gt; option.</para></item>
            <item><para>Minor bug fixes.</para></item>
          </unorderedlist></item>
          <item><para>Math.Special Functions: Improved accuracy and
testing of the inverse hypergeometric functions.</para></item>
          <item><para>Type Traits: Added better support for the
Codegear compiler.</para></item>
          <item><para>Unordered:</para>
          <unorderedlist>
            <item><para>Rename overload of emplace with hint, to
emplace_hint as specified in n2691.</para></item>
            <item><para>Provide forwarding headers at
&lt;boost/unordered/unordered_map_fwd.hpp&gt; and
&lt;boost/unordered/unordered_set_fwd.hpp&gt;.</para></item>
            <item><para>Move all of the implementation inside the
boost/unordered directory.</para></item>
          </unorderedlist></item>
        </items>

        <items name="Compilers Tested">
          <item><para>Boost's primary test compilers
are:</para>
          <unorderedlist>
            <item><para>GCC 4.01 on Mac OS X 10.4.10 with both Intel
and Power PC</para></item>
            <item><para>GCC 4.4.5 on Ubuntu Linux 8.10</para></item>
            <item><para>GCC 4.3.2 on Debian Sid</para></item>
            <item><para>GCC 4.2.1 on HP-UX Integrity</para></item>
            <item><para>HP C/aC++ B3910B A.06.17 on HP-UX
64-bit</para></item>
            <item><para>Visual C++ 9.0 SP1, 8.0, and 7.1 SP1, all on
Windows XP</para></item>
          </unorderedlist></item>
          <item><para>Boost's additional test compilers
include:</para>
          <unorderedlist>
            <item><para>GCC 4.1.2 on NetBSD</para></item>
            <item><para>HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX
B.11.31 9000/800 RISC</para></item>
            <item><para>IBM XL C/C++ Enterprise Edition for AIX,
V10.1.0.0, on AIX Version 5.3.0.40</para></item>
            <item><para>Intel 9.1, 10.0, and 10.1, on Mac OS X
10.4.10</para></item>
            <item><para>Compaq C++ V7.1-006 for Compaq Tru64 Unix on
an OSF1 V5.1 platform.</para></item>
            <item><para>Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun
Solaris 5.10.</para></item>
            <item><para>On Linux:</para>
            <unorderedlist>
              <item><para>GCC 3.4.3, 4.0.1, 4.2.1, 4.4.5,
4.3.2.</para></item>
              <item><para>GCC 4.3.2 with C++0x
extensions.</para></item>
              <item><para>GCC 4.1.1, 4.2.1 on 64 bit
linux.</para></item>
              <item><para>Intel C++ 8.1, 9.0, 9.1 and
10.0</para></item>
              <item><para>QLogic PathScale(TM) Compiler Suite:
Version 3.1</para></item>
              <item><para>Sun Compiler 5.9, 5.10 with
stdcxx</para></item>
            </unorderedlist></item>
            <item><para>On Windows:</para>
            <unorderedlist>
              <item><para>Several testers using Visual C++ 7.1,
8.0, 9.0 and 10.0</para></item>
              <item><para>Visual C++ 7.1 with Apache C++ Standard
Library 4.2.x branch.</para></item>
              <item><para>Visual C++ 8.0 with STLport
5.1</para></item>
              <item><para>Visual C++ 8.0 with STLport 5.1
cross-compiling for Windows Mobile 5.0 Pocket PC SDK
(ARMV4I).</para></item>
              <item><para>Intel 10.1, with Visual C++ 9
backend.</para></item>
              <item><para>Borland 5.9.3 and 6.10.0</para></item>
              <item><para>64 bit Intel 10.1, with Visual C++ 9
backend.</para></item>
              <item><para>64 bit Visual C++ 9.0.</para></item>
              <item><para>64-bit Visual C++ 9.0 with Apache C++
Standard Library 4.2.x branch.</para></item>
              <item><para>Comeau C++ 4.3.10.1 beta 2, with Visual
C++ 9 backend.</para></item>
            </unorderedlist></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.35.0" to="1.36.0">
        <items name="New Libraries">
          <item><para>Accumulators: Framework for incremental
calculation, and collection of statistical accumulators, from Eric
Niebler.</para></item>
          <item><para>Exception: A library for transporting of
arbitrary data in exception objects, and transporting of exceptions
between threads.</para></item>
          <item><para>Units: Zero-overhead dimensional analysis and
unit/quantity manipulation and conversion.</para></item>
          <item><para>Unordered: Unordered associative
containers.</para></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Asio:</para>
          <unorderedlist>
            <item><para>Added support for serial ports.</para></item>
            <item><para>Added support for UNIX domain
sockets.</para></item>
            <item><para>Added support for raw sockets and
ICMP.</para></item>
            <item><para>Added wrappers for POSIX stream-oriented file
descriptors (excluding regular files).</para></item>
            <item><para>Added wrappers for Windows stream-oriented
HANDLEs such as named pipes (requires HANDLEs that work with I/O
completion ports).</para></item>
            <item><para>Added wrappers for Windows random-access
HANDLEs such as files (requires HANDLEs that work with I/O completion
ports).</para></item>
            <item><para>Added support for reactor-style operations
(i.e. they report readiness but perform no I/O) using a new
null_buffers type.</para></item>
            <item><para>Added an iterator type for bytewise traversal
of buffer sequences.</para></item>
            <item><para>Added new read_until() and async_read_until()
overloads that take a user-defined function object for locating
message boundaries.</para></item>
            <item><para>Added an experimental two-lock queue (enabled
by defining BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE) that may provide better
io_service scalability across many processors.</para></item>
            <item><para>Various fixes, performance improvements, and
more complete coverage of the custom memory allocation
support.</para></item>
          </unorderedlist></item>
          <item><para>Assign: list_of() (and its variants) now has
overloaded comparison operators. This allows you to write test code
such as BOOST_CHECK_EQUAL( my_container, list_of(2)(3)(4)(5)
);.</para></item>
          <item><para>Circular Buffer:</para>
          <para>Default constructor now doesn't allocate memory,
and sets the capacity of the buffer to 0</para></item>
          <item><para>Foreach: BOOST_FOREACH macro for easily
iterating over the elements of a sequence.</para>
          <para>New BOOST_REVERSE_FOREACH macro for iterating over a
sequence in reverse.</para></item>
          <item><para>Function: Improved allocator
support.</para></item>
          <item><para>Hash: Minor updates and fixes, for more info see
the change log.</para></item>
          <item><para>Interprocess:</para>
          <unorderedlist>
            <item><para>Added anonymous shared memory for UNIX
systems.</para></item>
            <item><para>Fixed missing move semantics on managed
memory classes.</para></item>
            <item><para>Added copy_on_write and open_read_only
options for shared memory and mapped file managed
classes.</para></item>
            <item><para>shared_ptr is movable and supports
aliasing.</para></item>
          </unorderedlist></item>
          <item><para>Intrusive:</para>
          <unorderedlist>
            <item><para>Added linear&lt;&gt; and cache_last&lt;&gt;
options to singly linked lists.</para></item>
            <item><para>Added optimize_multikey&lt;&gt; option to
unordered container hooks.</para></item>
            <item><para>Optimized unordered containers when
store_hash option is used in the hook.</para></item>
            <item><para>Implementation changed to avoid explicit use
of try-catch blocks and be compilable with exceptions
disabled.</para></item>
          </unorderedlist></item>
          <item><para>Math:</para>
          <unorderedlist>
            <item><para>Added new non-central Chi-Square, Beta, F
and T distributions.</para></item>
            <item><para>Added Exponential Integral and Zeta special
functions.</para></item>
            <item><para>Added Rounding, Truncation, and
Unit-in-the-last-place functions.</para></item>
            <item><para>Added support for compile time powers of a
runtime base.</para></item>
            <item><para>Added a few SSE2 based optimisations for the
Lanczos approximations.</para></item>
          </unorderedlist></item>
          <item><para>MPI:</para>
          <unorderedlist>
            <item><para>Added support for non-blocking operations in
Python.</para></item>
            <item><para>Added support for graph
topologies.</para></item>
          </unorderedlist></item>
          <item><para>Multi-index Containers: Minor additions and
maintenance fixes. Consult the library release notes for further
information.</para></item>
          <item><para>PtrContainer: Support for a few more containers,
and addition of insert iterators. For details see upgrading
details.</para></item>
          <item><para>Spirit: Integrated the "Classic" Spirit V1.8.x
code base with Spirit V2, "The New Generation". See Change
Log.</para></item>
          <item><para>Thread:</para>
          <unorderedlist>
            <item><para>New generic lock and try_lock functions for
locking multiple mutexes at once.</para></item>
            <item><para>Rvalue reference support for move semantics
where the compilers supports it.</para></item>
            <item><para>A few bugs fixed and missing functions added
(including the serious win32 condition variable bug).</para></item>
            <item><para>scoped_try_lock types are now
backwards-compatible with Boost 1.34.0 and previous
releases.</para></item>
            <item><para>Support for passing function arguments to
the thread function by supplying additional arguments to the thread
constructor.</para></item>
            <item><para>Backwards-compatibility overloads added for
timed_lock and timed_wait functions to allow use of xtime for
timeouts.</para></item>
          </unorderedlist></item>
          <item><para>Wave:</para>
          <unorderedlist>
            <item><para>Wave V2.0 is a new major release introducing
some breaking API changes, preventing it to be used with Boost
versions earlier than V1.36.0. Mainly, the API and hook interface have
been streamlined for more consistency.</para></item>
            <item><para>Fixed a couple of bugs, improved regression
test system to include testing of the preporcessing hooks interface
(for details see: Changelog).</para></item>
          </unorderedlist></item>
          <item><para>Xpressive: Regular expressions that can be
written as strings or as expression templates, and that can refer to
each other and themselves recursively with the power of context-free
grammars</para>
          <unorderedlist>
            <item><para>skip() for specifying which parts of the
input sequence to ignore when matching it against a
regex.</para></item>
            <item><para>regex_replace() accepts formatter objects
and formatter expressions in addition to format strings.</para></item>
            <item><para>Range-based regex_replace()
algorithm.</para></item>
            <item><para>Fix crash when semantic actions are placed
in look-aheads, look-behinds or independent
sub-expressions.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.34.1" to="1.35.0">
        <items name="New Libraries">
          <item><para>Asio: Portable networking, including sockets,
timers, hostname resolution and socket iostreams.</para></item>
          <item><para>Bimap: Boost.Bimap is a bidirectional maps
library for C++. With Boost.Bimap you can create associative
containers in which both types can be used as key.</para></item>
          <item><para>Circular Buffer: STL compliant container also
known as ring or cyclic buffer.</para></item>
          <item><para>Function Types: Boost.FunctionTypes provides
functionality to classify, decompose and synthesize function, function
pointer, function reference and pointer to member types.</para></item>
          <item><para>Fusion: Library for working with tuples,
including various containers, algorithms, etc.</para></item>
          <item><para>GIL: Generic Image Library.</para></item>
          <item><para>Interprocess: Shared memory, memory mapped
files, process-shared mutexes, condition variables, containers and
allocators.</para></item>
          <item><para>Intrusive: Intrusive containers and
algorithms.</para></item>
          <item><para>Math/Special Functions: A wide selection of
mathematical special functions.</para></item>
          <item><para>Math/Statistical Distributions: A wide selection
of univariate statistical distributions and functions that operate on
them.</para></item>
          <item><para>MPI: Message Passing Interface library, for use
in distributed-memory parallel application programming.</para></item>
          <item><para>System: Operating system support, including the
diagnostics support that will be part of the C++0x standard
library.</para></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Graph: Generic graph components and algorithms.
Highlights:</para>
          <unorderedlist>
            <item><para>kolmogorov_max_flow, part of the 2006 Google
Summer of Code.</para></item>
            <item><para>read_dimacs_max_flow and
write_dimacs_max_flow for max-flow problems.</para></item>
            <item><para>read_graphml and write_graphml for GraphML
input/output.</para></item>
            <item><para>minimum_cycle_ratio and
maximum_cycle_ratio.</para></item>
            <item><para>boyer_myrvold_planarity_test, along with a
suite of algorithms for planar graphs.</para></item>
            <item><para>LEDA Adaptor improvements.</para></item>
          </unorderedlist></item>
          <item><para>Hash: A TR1 hash function object.
Highlights:</para>
          <unorderedlist>
            <item><para>Support for long long,
std::complex.</para></item>
            <item><para>Improved the algorithm for hashing floating
point numbers.</para></item>
            <item><para>A few bug and warning fixes.</para></item>
          </unorderedlist></item>
          <item><para>Iostreams: Framework for defining streams,
stream buffers and i/o filters. Highlights:</para>
          <unorderedlist>
            <item><para>Clarified the semantics of close(). This
fixes several bugs but will break some existing code. See Release
Notes for details.</para></item>
            <item><para>Numerous other bug fixes and
optimizations.</para></item>
          </unorderedlist></item>
          <item><para>Multi Array:</para>
          <unorderedlist>
            <item><para>Added "dimensionality" compile-time
constante to the MultiArray concept.</para></item>
            <item><para>For greater control over error situations,
uses of C++ assert have been replaced with BOOST_ASSERT.</para></item>
            <item><para>Fixed a bug with simultaneous resizing and
reindexing.</para></item>
          </unorderedlist></item>
          <item><para>Multi-index Containers:</para>
          <unorderedlist>
            <item><para>New global_fun predefined key
extractor.</para></item>
            <item><para>Added iterator_to facility.</para></item>
            <item><para>Included support for non-standard allocators
such as those of Boost.Interprocess, which makes
multi_index_containers placeable in shared memory.</para></item>
            <item><para>New versions of modify and modify_key with
rollback, as described in the tutorial.</para></item>
            <item><para>A number of optimizations and minor
improvements have also been included. For a complete list of changes,
see the library release notes.</para></item>
          </unorderedlist></item>
          <item><para>Serialization: Boost.Serialization has been
updated with optimizations for dense arrays.</para></item>
          <item><para>Thread:</para>
          <unorderedlist>
            <item><para>The Thread library has been updated to be
more in line with the C++0x working draft.</para></item>
            <item><para>Instances of boost::thread and of the
various lock types are now movable.</para></item>
            <item><para>Threads can be interrupted at interruption
points.</para></item>
            <item><para>Condition variables can now be used with any
type that implements the Lockable concept, through the use of
boost::condition_variable_any (boost::condition is a typedef to
boost::condition_variable_any, provided for backwards compatibility).
boost::condition_variable is provided as an optimization, and will
only work with boost::unique_lock&lt;boost::mutex&gt;
(boost::mutex::scoped_lock).</para></item>
            <item><para>Thread IDs are separated from boost::thread,
so a thread can obtain it's own ID (using
boost::this_thread::get_id()), and IDs can be used as keys in
associative containers, as they have the full set of comparison
operators.</para></item>
            <item><para>Timeouts are now implemented using the Boost
DateTime library, through a typedef boost::system_time for absolute
timeouts, and with support for relative timeouts in many cases.
boost::xtime is supported for backwards compatibility
only.</para></item>
            <item><para>Locks are implemented as publicly accessible
templates boost::lock_guard, boost::unique_lock, boost::shared_lock,
and boost::upgrade_lock, which are templated on the type of the mutex.
The Lockable concept has been extended to include publicly available
lock() and unlock() member functions, which are used by the lock
types.</para></item>
            <item><para>boost::try_mutex has been removed, and the
functionality subsumed into boost::mutex. boost::try_mutex is left as
a typedef, but is no longer a separate class.</para></item>
            <item><para>boost::recursive_try_mutex has been removed,
and the functionality subsumed into boost::recursive_mutex.
boost::recursive_try_mutex is left as a typedef, but is no longer a
separate class.</para></item>
            <item><para>boost::detail::thread::lock_ops has been
removed. Code that relies on the lock_ops implementation detail will
no longer work, as this has been removed, as it is no longer necessary
now that mutex types now have public lock() and unlock() member
functions.</para></item>
            <item><para>scoped_lock constructors with a second
parameter of type bool are no longer provided. With previous boost
releases, boost::mutex::scoped_lock some_lock(some_mutex,false); could
be used to create a lock object that was associated with a mutex, but
did not lock it on construction. This facility has now been replaced
with the constructor that takes a boost::defer_lock_type as the second
parameter: boost::mutex::scoped_lock
some_lock(some_mutex,boost::defer_lock);</para></item>
            <item><para>The broken boost::read_write_mutex has been
replaced with boost::shared_mutex.</para></item>
          </unorderedlist></item>
          <item><para>Wave: Standards conformant implementation of
the mandated C99/C++ preprocessor functionality packed behind an easy
to use iterator interface. Highlights:</para>
          <unorderedlist>
            <item><para>Added the possibility to continue the
preprocessing after an error occured.</para></item>
            <item><para>Added the macro introspection API to the
wave::context object.</para></item>
            <item><para>Added threading support to the
library.</para></item>
            <item><para>Improved the overall performance by upto
30%.</para></item>
            <item><para>Changed and unified preprocessor hook
interface (this is an interface breaking change!), added several new
preprocessor hook functions.</para></item>
            <item><para>Added serialization support.</para></item>
            <item><para>Added new examples (for instance: Hannibal -
a partial C++ parser).</para></item>
            <item><para>Added a new lexical analyzer based on
Lexertl library.</para></item>
            <item><para>Fixed a large number of other bugs and
problems.</para></item>
          </unorderedlist></item>
          <item><para>Xpressive: Regular expressions that can be
written as strings or as expression templates, and that can refer to
each other and themselves recursively with the power of context-free
grammars. Highlights:</para>
          <unorderedlist>
            <item><para>Added semantic actions to static regexes. A
semantic action is code that executes when part of a regular
expression matches.</para></item>
            <item><para>Added custom assertions to static regexes. A
custom assertion is a Boolean predicate that can participate in the
regex match.</para></item>
            <item><para>Added named regexes for embedding a static
or dynamic regex into a dynamic regex. This can be used to create
dynamic regex grammars.</para></item>
            <item><para>Added named captures to dynamic regexes,
like Perl.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.34.0" to="1.34.1">
        <item><para>This is a bug fix release addressing many problems
with the 1.34.0 release. It is a recommended upgrade for all users of
Boost 1.34.0. For a complete list of fixes see Boost
Trac.</para></item>
      </change>

      <change from="1.33.1" to="1.34.0">
        <items name="New Libraries">
          <item><para>Foreach Library: BOOST_FOREACH macro for easily
iterating over the elements of a sequence.</para></item>
          <item><para>Statechart Library: Arbitrarily complex finite
state machines can be implemented in easily readable and maintainable
C++ code.</para></item>
          <item><para>TR1 Library: An implementation of the C++
Technical Report on Standard Library Extensions. This library does not
itself implement the TR1 components, rather it's a thin wrapper that
will include your standard library's TR1 implementation (if it has
one), otherwise it will include the Boost Library equivalents, and
import them into namespace std::tr1. Highlights include: Reference
Wrappers, Smart Pointers, result_of, Function Object Binders,
Polymorphic function wrappers, Type Traits, Random Number Generators
and Distributions, Tuples, Fixed Size Array, Hash Function Objects,
Regular Expressions, and Complex Number Additional
Algorithms.</para></item>
          <item><para>Typeof Library: Typeof operator
emulation.</para></item>
          <item><para>Xpressive Library: Regular expressions that can
be written as strings or as expression templates, and that can refer
to each other and themselves recursively with the power of
context-free grammars.</para></item>
        </items>

        <items name="Updated Libraries">
          <item><para>Assign Library:</para>
          <unorderedlist>
            <item><para>Support for ptr_map&lt;key,T&gt; via the new
function ptr_map_insert()</para></item>
            <item><para>Support for initialization of Pointer
Containers when the containers hold pointers to an abstract base
class.</para></item>
          </unorderedlist></item>
          <item><para>Date_time library:</para>
          <unorderedlist>
            <item><para>Support for new US/Canada timezone rules and
other bug fixes. See Change History for details.</para></item>
          </unorderedlist></item>
          <item><para>Filesystem Library: Major upgrade in
preparation for submission to the C++ Standards Committee for TR2.
Changes include:</para>
          <unorderedlist>
            <item><para>Internationalization, provided by class
templates basic_path, basic_filesystem_error,
basic_directory_iterator, and basic_directory_entry.</para></item>
            <item><para>Simplification of the path interface by
eliminating special constructors to identify native
formats.</para></item>
            <item><para>Rationalization of predicate function
design, including the addition of several new functions.</para></item>
            <item><para>Clearer specification by reference to POSIX,
the ISO/IEEE Single Unix Standard, with provisions for Windows and
other operating systems.</para></item>
            <item><para>Preservation of existing user code whenever
possible.</para></item>
            <item><para>More efficient directory
iteration.</para></item>
            <item><para>Addition of a recursive directory
iterator.</para></item>
          </unorderedlist></item>
          <item><para>Function Library: Boost.Function now
implements a small buffer optimization, which can drastically improve
the performance when copying or constructing Boost.Function objects
storing small function objects. For instance, bind(&amp;X:foo, &amp;x,
_1, _2) requires no heap allocation when placed into a Boost.Function
object.</para></item>
          <item><para>Functional/Hash Library:</para>
          <unorderedlist>
            <item><para>Use declarations for standard classes, so
that the library doesn't need to include all of their
headers</para></item>
            <item><para>Deprecated the
&lt;boost/functionalhash*.hpp&gt; headers.</para></item>
            <item><para>Add support for the BOOST_HASH_NO_EXTENSIONS
macro, which disables the extensions to TR1</para></item>
            <item><para>Minor improvements to the hash functions for
floating point numbers.</para></item>
          </unorderedlist></item>
          <item><para>Graph Library:</para>
          <unorderedlist>
            <item><para>edmonds_maximum_cardinality_matching</para></item>
            <item><para>lengauer_tarjan_dominator_tree</para></item>
            <item><para>compressed_sparse_row_graph</para></item>
            <item><para>sorted_erdos_renyi_iterator</para></item>
            <item><para>biconnected_components now supports a
visitor and named parameters</para></item>
            <item><para>adjacency_matrix now models the
Bidirectional Graph concept.</para></item>
            <item><para>dijkstra_shortest_paths now calls
vis.initialize_vertex for each vertex during
initialization.</para></item>
            <item><para>Note: the name of the compiled library for
the GraphViz reader has changed to boost_graph (from bgl-viz) to match
Boost conventions.</para></item>
            <item><para>See the complete revision history for more
information.</para></item>
          </unorderedlist></item>
          <item><para>MultiArray Library: Boost.MultiArray now by
default provides range-checking for operator. Range checking can be
disabled by defining the macro BOOST_DISABLE_ASSERTS before including
multi_array.hpp. A bug in multi_array::resize() related to storage
orders was fixed.</para></item>
          <item><para>Multi-index Containers Library:</para>
          <unorderedlist>
            <item><para>New random access indices.</para></item>
            <item><para>Non key-based indices feature new rearrange
facilities.</para></item>
            <item><para>This version also includes a number of
optimizations and usage improvements. For a complete list of changes,
see the library release notes.</para></item>
          </unorderedlist></item>
          <item><para>Optional Library:</para>
          <unorderedlist>
            <item><para>boost::none_t and boost::none now added to
Optional's documentation</para></item>
            <item><para>Relational operators now directly support
arguments of type 'T' and 'none_t'</para></item>
            <item><para>operator-&gt;() now also works with
reference types.</para></item>
            <item><para>Helper functions make_optional(val),
make_optional(cond,val) and
get_optional_value_or(opt,alternative_value) added.</para></item>
            <item><para>Constructor taking a boolean condition (as
well as a value) added.</para></item>
            <item><para>Member function
get_value_or(alternative_value) added.</para></item>
            <item><para>Incompatbility bug with mpl::apply&lt;&gt;
fixed.</para></item>
            <item><para>Converting assignment bug with uninitialized
lvalues fixed.</para></item>
          </unorderedlist></item>
          <item><para>Parameter Library:</para>
          <unorderedlist>
            <item><para>Every ArgumentPack is now a valid MPL
Forward Sequence.</para></item>
            <item><para>Support for unnamed arguments (those whose
keyword is deduced from their types) is added.</para></item>
            <item><para>Support for named and unnamed template
arguments is added.</para></item>
            <item><para>New overload generation macros solve the
forwarding problem directly.</para></item>
            <item><para>See also the Python library changes,
below.</para></item>
          </unorderedlist></item>
          <item><para>Pointer Container Library:</para>
          <unorderedlist>
            <item><para>Support for serialization via
Boost.Serialization.</para></item>
            <item><para>Exceptions can be disabled by defining the
macro BOOST_PTR_CONTAINER_NO_EXCEPTIONS before including any header.
This macro is defined by default if BOOST_NO_EXCEPTIONS is
defined.</para></item>
            <item><para>Additional std::auto_ptr&lt;T&gt; overloads
added s.t. one can also pass std::auto_ptr&lt;T&gt; instead of only T*
arguments to member functions.</para></item>
            <item><para>transfer() now has weaker requirements s.t.
one can transfer objects from ptr_container&lt;Derived&gt; to
ptr_container&lt;Base&gt;.</para></item>
          </unorderedlist></item>
          <item><para>Python Library:</para>
          <unorderedlist>
            <item><para>Boost.Python now automatically appends C++
signatures to docstrings. The new docstring_options.hpp header is
available to control the content of docstrings.</para></item>
            <item><para>stl_input_iterator, for turning a Python
iterable object into an STL input iterator.</para></item>
            <item><para>Support for void* conversions is
added.</para></item>
            <item><para>Integrated support for wrapping C++
functions built with the parameter library; keyword names are
automatically known to docsstrings.</para></item>
            <item><para>Enhancements to the API for better embedding
support (boost::python::import(), boost::python::exec(), and
boost::python::exec_file()).</para></item>
          </unorderedlist></item>
          <item><para>Signals Library: More improvements to signal
invocation performance.</para></item>
          <item><para>Smart Pointers Library:</para>
          <unorderedlist>
            <item><para>Allocator support as proposed in N1851 (162 Kb
PDF).</para></item>
            <item><para>pointer_cast and pointer_to_other utilities to
allow pointer-independent code.</para></item>
          </unorderedlist></item>
          <item><para>String Algorithm Library:</para>
          <unorderedlist>
            <item><para>lexicographical_compare</para></item>
            <item><para>join</para></item>
            <item><para>New comparison predicates is_less,
is_not_greater.</para></item>
            <item><para>Negative indexes support (like Perl) in
various algorihtms (*_head/tail, *_nth).</para></item>
          </unorderedlist></item>
          <item><para>Wave Library:</para>
          <unorderedlist>
            <item><para>Wave now correctly recognizes pp-number
tokens as mandated by the C++ Standard, which are converted to C++
tokens right before they are returned from the library.</para></item>
            <item><para>Several new preprocessing hooks have been
added. For a complete description please refer to the related
documentation page: The Context Policy.</para></item>
            <item><para>Shared library (dll) support has been added
for the generated Wave libraries.</para></item>
            <item><para>The overall error handling has been
improved. It is now possible to recover and continue after an error or
a warning was issued.</para></item>
            <item><para>Support for optional comment and/or full
whitespace preservation in the generated output stream has been
added.</para></item>
            <item><para>The Wave library now performs automatic
include guard detection to avoid accessing header files more than
once, if appropriate.</para></item>
            <item><para>Full interactive mode has been added to the
Wave tool. Now the Wave tool can be used just like Python or Perl for
instance to interactively try out your BOOST_PP macros. Additionally
it is now possible to load and save the current state of an
interactive session (macro tables et.al.).</para></item>
            <item><para>The overall performance has been improved by
upto 40-60%, depending on the concrete files to process.</para></item>
            <item><para>Support for new pragmas has been added
allowing to control certain library features from inside the
preprocessed sources (partial output redirection, control of generated
whitespace and #line directives).</para></item>
            <item><para>Optional support for #pragma message "..."
has been added. * This version also includes a number of bug fixes and
usage improvements. For a complete list of changes, see the libraries
change log.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <note type="usage">
        <para>Versions of the library for the vendor C++ compiler and
GCC 4.4.6 are available in the following directories:</para>
        <screen>
${SB_INSTALL_PREFIX}/lib            # Vendor C++ compiler
${SB_INSTALL_PREFIX}/lib/gcc44      # GCC 4.4.6
        </screen>

        <para>Boost.Python module is available in the following
directory depending on the version of Python installed:</para>
        <screen>
${SB_INSTALL_PREFIX}/lib/python26    # Python 2.6.7
${SB_INSTALL_PREFIX}/lib/python27    # Python 2.7.2
        </screen>
      </note>

      <platform name="Solaris">
        <para>Boost has been compiled with the newer stlport4 library.
Because of this, <command>-library=stlport4</command> must be
specified when compiling and linking against Boost. The Boost stlport4
libraries are available in
<command>${SB_INSTALL_PREFIX}/lib/stlport4</command>.</para>
      </platform>
    </notes>

    <changelog>
      <change date="2012 March 21" revision="3"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Add 64bit and 64bit-gcc44 modules</para></item>
      </change>

      <change date="2012 March 13" revision="2"
      author="Albert Chin-A-Young" email="china@thewrittenword.com">
        <item><para>Add --disable-icu so system ICU isn't
used</para></item>
      </change>
    </changelog>
  </program>
</programs>
