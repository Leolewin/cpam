<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="hdf5" version="1.8.2" revision="3">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>lib${SB_PROG_NAME}18</install-name>

    <sources>
      <source checksum="af92ef65ef495dbd205131574ad4eee1"
        checksum-type="md5" size="7094386"
        path="src/hdf5-1.8.2.tar.gz"/>
      <patch checksum="54348ff2e9fb6aa97cf76f19c75ebeb7"
        checksum-type="md5" size="23273"
        path="src/hdf5-1.8.2.tww.patch"/>
      <patch checksum="ef38abab075eec4be7e77f21db2b3774"
        checksum-type="md5" size="3508819"
        path="src/hdf5-1.8.2.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="perl" add-path="prepend"
        type="build">v==5.12.2</depend>
    </dependencies>

    <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <test>
<![CDATA[
gmake check || :
]]>
    </test>

    <module name="default">
      <dependencies replace="0">
        <depend program="zlib" var="LIBZ"
          install-name="libz12">v&gt;=1.2.5</depend>
      </dependencies>

      <validate>
        <depend program="hdf5" module="gcc44">v==1.8.2</depend>
        <depend program="hdf5" module="64bit"
          systype="*-solaris*">v==1.8.2</depend>
        <depend program="hdf5" module="64bit-gcc44"
          systype="*-solaris*">v==1.8.2</depend>
      </validate>

      <script-header>
<![CDATA[
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
      </script-header>

      <configure>
<![CDATA[
# omitting these flags caused testsuite failures (core dumps) on
# i686-linux
_gcc_flags="-fomit-frame-pointer -finline-functions"

case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  CXX=xlC CXXFLAGS="-O2 -qro -qroconst -qnotempinc \
-qnotemplateregistry -qmaxmem=-1 -qarch=ppc"
  CC_LD_RT="-Wl,-blibpath:"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib" ;;
ia64*-hpux11.31)
  CC=cc CFLAGS="-z +O1 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch"
  CXX=aCC CXXFLAGS="-AA -z +O1 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch"
  CC_LD_RT="-Wl,+b," ;;
ia64*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+b," ;;
*-hpux10*|*-hpux11.[01]*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-hpux11*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CXX=aCC CXXFLAGS="-AA -z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*)
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1009,1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O2 -OPT:Olimit=0"
  CXX=CC CXXFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-ptused -FE:template_in_elf_section -O2 -OPT:Olimit=0"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-linuxe4)
  CFLAGS="-O ${_gcc_flags} -mtune=pentiumpro -march=pentiumpro"
  CXXFLAGS="-O ${_gcc_flags} -mtune=pentiumpro -march=pentiumpro"
  CC_LD_RT="-Wl,-rpath," ;;
# Hangs during tests at -O
i?86*-linuxe6)
  CFLAGS="-O0 ${_gcc_flags} -mtune=pentiumpro -march=pentiumpro"
  CXXFLAGS="-O0 ${_gcc_flags} -mtune=pentiumpro -march=pentiumpro"
  FFLAGS="-O0 ${_gcc_flags} -mtune=pentiumpro -march=pentiumpro"
  FC=gfortran
  CC_LD_RT="-Wl,-rpath,"
  ARGS="--enable-fortran" ;;
i?86*-linuxe5)
  CFLAGS="-O ${_gcc_flags} -mtune=pentiumpro -march=pentiumpro"
  CXXFLAGS="-O ${_gcc_flags} -mtune=pentiumpro -march=pentiumpro"
  FFLAGS="-O ${_gcc_flags} -mtune=pentiumpro -march=pentiumpro"
  FC=gfortran
  CC_LD_RT="-Wl,-rpath,"
  ARGS="--enable-fortran" ;;
i?86*-linux*)
  CFLAGS="-O ${_gcc_flags}" 
  CXXFLAGS="-O ${_gcc_flags}"
  CC_LD_RT="-Wl,-rpath," ;;
# Fails tests at -O
*-redhat-linuxe6)
  CFLAGS="-O0 ${_gcc_flags}"
  CXXFLAGS="-O0 ${_gcc_flags}"
  FFLAGS="-O0 ${_gcc_flags}"
  FC=gfortran
  CC_LD_RT="-Wl,-rpath,"
  ARGS="--enable-fortran" ;;
*-redhat-linuxe5)
  FC=gfortran
  CC_LD_RT="-Wl,-rpath,"
  ARGS="--enable-fortran" ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-osf*)
  CC=cc CFLAGS="-O2 -arch ev5 -msym -readonly_strings"
  CXX=cxx CXXFLAGS="-O2 -arch ev5 -model ansi -msym \
-readonly_strings -timplicit_local -D__USE_STD_IOSTREAM"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xO2 -xtarget=pentium4"
  CXX=CC CXXFLAGS="-xO2 -xtarget=pentium4"
  FC=f95 FFLAGS="-dalign -xO2 -xtarget=pentium4"
  CC_LD_RT="-R"
  ARGS="--enable-fortran" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CXX=CC CXXFLAGS="-xO2 -xtarget=ultra2 -xarch=v8plusa"
  FC=f95 FFLAGS="-xO1"
  CC_LD_RT="-R"
  ARGS="--enable-fortran" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis"
  CXX=CC CXXFLAGS="-xO2 -xtarget=ultra2 -m32 -xarch=sparcvis"
  FC=f95 FFLAGS="-xO1 -xtarget=ultra2 -m32 -xarch=sparcvis"
  CC_LD_RT="-R"
  ARGS="--enable-fortran" ;;
esac

MAKE=gmake ${SHELL} ./configure CC="${CC:-gcc}" \
CFLAGS="${CFLAGS:--O ${_gcc_flags}}" CXX="${CXX:-g++}" \
CXXFLAGS="${CXXFLAGS:--O ${_gcc_flags}}" FC="${FC:-}" \
FFLAGS="${FFLAGS:--O ${_gcc_flags}}" \
LDFLAGS="${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ_LIB}} \
${LDFLAGS+${LDFLAGS}}" ${SB_VAR_LIBZ+--with-zlib=${SB_VAR_LIBZ}} \
--docdir=${_docdir} --enable-cxx --disable-dependency-tracking \
${ARGS+${ARGS}} --libdir=${SB_INSTALL_PREFIX_LIB} \
--prefix=${SB_INSTALL_PREFIX}
]]>
      </configure>

      <test>
<![CDATA[
gmake check || :
]]>
      </test>

      <install>
<![CDATA[
gmake install-all
]]>
      </install>
    </module>

    <module name="64bit"
    systype="*-solaris*">
      <dependencies replace="0">
        <depend program="zlib" var="LIBZ" install-name="libz12"
          module="64bit">v&gt;=1.2.5</depend>
      </dependencies>

      <script-header>
<![CDATA[
case "${SB_SYSTYPE}" in
i?86-*solaris*)
  _libdir=lib/amd64 ;;
*-solaris*)
  _libdir=lib/sparcv9 ;;
esac
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=opteron -m64 \
-xarch=sse2"
  CXX=CC CXXFLAGS="-xO2 -xtarget=opteron -m64 -xarch=sse2"
  FC=f95 FCFLAGS="-xO2  -xtarget=opteron -m64 -xarch=sse2"
  CC_LD_RT="-R" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=generic -xarch=v9"
  CXX=CC CXXFLAGS="-xO2 -xtarget=generic -xarch=v9"
  FC=f95 FCFLAGS="-xO2 -xtarget=generic -xarch=v9"
  CC_LD_RT="-R" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=generic -m64 \
-xarch=sparc"
  CXX=CC CXXFLAGS="-xO2 -xtarget=generic -m64 -xarch=sparc"
  FC=f95 FCFLAGS="-xO2 -xtarget=generic -m64 -xarch=sparc"
  CC_LD_RT="-R" ;;
esac

MAKE=gmake ${SHELL} ./configure CC="${CC:-gcc}" \
CFLAGS="${CFLAGS:--O}" CXX="${CXX:-g++}" \
CXXFLAGS="${CXXFLAGS:--O}" \
FC="${FC:-}" FFLAGS="${FCFLAGS:--O}" \
LDFLAGS="${SB_VAR_LIBZ+${CC_LD_RT}${SB_VAR_LIBZ}/${_libdir}} \
${LDFLAGS+${LDFLAGS}}" \
${SB_VAR_LIBZ+--with-zlib=${SB_VAR_LIBZ_INC},${SB_VAR_LIBZ}/${_libdir}} \
--enable-fortran --enable-cxx --disable-dependency-tracking \
${ARGS+${ARGS}} --includedir="${SB_INSTALL_PREFIX}/include/64" \
--libdir="${SB_INSTALL_PREFIX}/${_libdir}" \
--prefix=${SB_INSTALL_PREFIX}
]]>
      </configure>

      <test>
<![CDATA[
gmake check || :
]]>
      </test>

      <install>
<![CDATA[
if [ ! -d ${SB_INSTALL_PREFIX}/lib/64 ]; then
  case "${SB_SYSTYPE}" in
  *-solaris*)
    ln -s ./$(basename ${_libdir}) ${SB_INSTALL_PREFIX}/lib/64 ;;
  esac
fi

gmake -C src install-includeHEADERS install-libLTLIBRARIES \
install-settingsDATA
gmake -C hl/src install-includeHEADERS install-libLTLIBRARIES
gmake -C c++/src install-includeHEADERS install-libLTLIBRARIES
gmake -C hl/c++/src install-includeHEADERS install-libLTLIBRARIES

case "${SB_SYSTYPE}" in
*-linuxe[56]*|*-solaris*)
  gmake -C fortran/src install-libLTLIBRARIES install-data-local \
install-settingsDATA
  gmake -C hl/fortran/src install-data-local install-libLTLIBRARIES ;;
esac
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${SB_INSTALL_PREFIX}/include/64 \
${SB_INSTALL_PREFIX}/${_libdir} ${SB_INSTALL_PREFIX}/lib/64
]]>
      </uninstall>
    </module>

    <module name="gcc44">
      <dependencies replace="0">
        <depend program="zlib" var="LIBZ"
          install-name="libz12">v&gt;=1.2.5</depend>
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
      </dependencies>

      <script-header>
<![CDATA[
_gcc="gcc44"
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CFLAGS="-O -mcpu=powerpc"
  CXXFLAGS="-O -mcpu=powerpc"
  CC_LD_RT="-Wl,-blibpath:"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib" ;;
ia64*-hpux*)
  CFLAGS="-O" CXXFLAGS="-O"
  CC_LD_RT="-Wl,+b," ;;
*-hpux*)
  CFLAGS="-O" CXXFLAGS="-O"
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*|*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-osf*)
  CFLAGS="-O -mcpu=ev5" CXXFLAGS="-O -mcpu=ev5"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-solaris*)
  CFLAGS="-O -mtune=pentium4 -march=pentium4"
  CXXFLAGS="-O -mtune=pentium4 -march=pentium4"
  CC_LD_RT="-R" ;;
*-solaris*)
  CFLAGS="-O -mcpu=ultrasparc -mvis"
  CXXFLAGS="-O -mcpu=ultrasparc -mvis"
  CC_LD_RT="-R" ;;
esac

case "${SB_SYSTYPE}" in
i?86*|x86_64*)
  CFLAGS="${CFLAGS+${CFLAGS}} -fomit-frame-pointer -finline-functions"
  CXXFLAGS="${CXXFLAGS+${CXXFLAGS}} -fomit-frame-pointer \
-finline-functions" ;;
esac

MAKE=gmake ${SHELL} ./configure CC="${CC:-gcc}" \
CFLAGS="${CFLAGS:--O}" CXX="${CXX:-g++}" \
CXXFLAGS="${CXXFLAGS:--O}" \
LDFLAGS="-L${SB_VAR_GCC_RT_LIB} ${CC_LD_RT}${SB_VAR_GCC_RT_LIB}:\
${SB_VAR_LIBZ_LIB} ${LDFLAGS+${LDFLAGS}}" --with-zlib=${SB_VAR_LIBZ} \
--enable-cxx --disable-fortran --disable-dependency-tracking \
${ARGS+${ARGS}} --includedir="${SB_INSTALL_PREFIX}/include/${_gcc}" \
--libdir="${SB_INSTALL_PREFIX}/lib/${_gcc}" \
--prefix=${SB_INSTALL_PREFIX}
]]>
      </configure>

      <test>
<![CDATA[
gmake check || :
]]>
      </test>

      <install>
<![CDATA[
gmake -C src install-includeHEADERS install-libLTLIBRARIES \
install-settingsDATA
gmake -C hl/src install-includeHEADERS install-libLTLIBRARIES
gmake -C c++/src install-includeHEADERS install-libLTLIBRARIES
gmake -C hl/c++/src install-includeHEADERS install-libLTLIBRARIES
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${SB_INSTALL_PREFIX}/include/${_gcc} \
${SB_INSTALL_PREFIX}/lib/${_gcc}
]]>
      </uninstall>
    </module>

    <module name="64bit-gcc44"
    systype="*-solaris*">
      <dependencies replace="0">
        <depend program="gcc" install-name="gcc44"
          add-path="prepend">v&gt;=4.4.6</depend>
        <depend var="GCC_RT" install-name="gcc44r"/>
        <depend program="zlib" var="LIBZ" install-name="libz12"
          module="64bit">v&gt;=1.2.5</depend>
      </dependencies>

      <script-header>
<![CDATA[
_gcc="gcc44"

case "${SB_SYSTYPE}" in
i?86-*solaris*)
  _gcc_arch="amd64"
  _dep_libdir="lib/amd64"
  _libdir="lib/${_gcc}/amd64" ;;
*-solaris*)
  _gcc_arch="sparcv9"
  _dep_libdir="lib/sparcv9"
  _libdir="lib/${_gcc}/sparcv9" ;;
esac
]]>
      </script-header>

      <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
i?86*-solaris*)
  CFLAGS="-O -m64"
  CXXFLAGS="-O -m64"
  CC_LD_RT="-R" ;;
*-solaris*)
  CFLAGS="-O -m64 -mcpu=v9"
  CXXFLAGS="-O -m64 -mcpu=v9"
  CC_LD_RT="-R" ;;
esac

MAKE=gmake ${SHELL} ./configure CC="${CC:-gcc}" \
CFLAGS="${CFLAGS:--O}" CXX="${CXX:-g++}" \
CXXFLAGS="${CXXFLAGS:--O}" \
LDFLAGS="-L${SB_VAR_GCC_RT_LIB}/${_gcc_arch} \
${CC_LD_RT}${SB_VAR_GCC_RT_LIB}/${_gcc_arch} \
${CC_LD_RT}${SB_VAR_LIBZ}/${_dep_libdir} ${LDFLAGS+${LDFLAGS}}" \
--with-zlib=${SB_VAR_LIBZ_INC},${SB_VAR_LIBZ}/${_dep_libdir} \
--enable-cxx --disable-dependency-tracking ${ARGS+${ARGS}} \
--includedir="${SB_INSTALL_PREFIX}/include/${_gcc}/64" \
--libdir="${SB_INSTALL_PREFIX}/${_libdir}" \
--prefix=${SB_INSTALL_PREFIX}
]]>
      </configure>

      <test>
<![CDATA[
gmake check || :
]]>
      </test>

      <install>
<![CDATA[
if [ ! -d ${SB_INSTALL_PREFIX}/lib/${_gcc}/64 ]; then
  case "${SB_SYSTYPE}" in
  *-solaris*)
    ln -s ./$(basename ${_libdir}) \
    ${SB_INSTALL_PREFIX}/lib/${_gcc}/64 ;;
  esac
fi

gmake -C src install-includeHEADERS install-libLTLIBRARIES \
install-settingsDATA
gmake -C hl/src install-includeHEADERS install-libLTLIBRARIES
gmake -C c++/src install-includeHEADERS install-libLTLIBRARIES
gmake -C hl/c++/src install-includeHEADERS install-libLTLIBRARIES
]]>
      </install>

      <uninstall>
<![CDATA[
rm -rf ${SB_INSTALL_PREFIX}/include/${_gcc}/64 \
${SB_INSTALL_PREFIX}/${_libdir} ${SB_INSTALL_PREFIX}/lib/${_gcc}/64
]]>
      </uninstall>
    </module>

    <notes>
      <change from="1.8.1" to="1.8.2">
        <items name="New Features">
          <item><para>Configuration</para>
          <unorderedlist>
            <item><para>Upgraded libtool to version
2.2.6a.</para></item>
          </unorderedlist></item>
          <item><para>Library</para>
          <unorderedlist>
            <item><para>Added two new public routines:
H5Pget_elink_fapl() and H5Pset_elink_fapl(). (see bug
#1247)</para></item>
            <item><para>Improved free space tracking in file to be
faster.</para></item>
            <item><para>Added 'mounted' field to H5G_info_t
struct.</para></item>
          </unorderedlist></item>
          <item><para>Tools</para>
          <unorderedlist>
            <item><para>h5repack: added new options -u and -b to add
a userblock to an HDF5 file during the repack.</para></item>
            <item><para>h5repack: added options -t and -a to call
H5Pset_alignment while creating a repacked file.</para></item>
            <item><para>h5ls: added capability to traverse through
external links when the -r (recursive) flag is given.</para></item>
            <item><para>h5ls: added -E option to enable traversal of
external links. h5ls will not traverse external links without this
flag being set.</para></item>
            <item><para>h5dump: when -b flag is used without a
keyword after it, binary output defaults to NATIVE. MEMORY keyword was
deprecated and replaced by NATIVE keyword.</para></item>
            <item><para>h5diff: returns 1 when file graphs differ by
any object. Error return code was changed to 2 from -1.</para></item>
            <item><para>h5import: TEXTFPE (scientific format) was
deprecated. Use TEXTFP instead</para></item>
          </unorderedlist></item>
          <item><para>F90 API</para>
          <unorderedlist>
            <item><para>Added optional parameter 'mounted' to
H5Gget_info_f, H5Gget_info_by_idx_f,
H5Gget_info_by_name_f</para></item>
            <item><para>Added H5Tget_native_type_f</para></item>
          </unorderedlist></item>
          <item><para>C++ API</para>
          <unorderedlist>
            <item><para>These member functions were added as wrapper
for H5Rdereference to replace the incorrect
IdComponent::dereference().</para>
            <screen>
void H5Object::dereference(H5Object&amp; obj, void* ref,
                           H5R_type_t ref_type=H5R_OBJECT)
void H5Object::dereference(H5File&amp; h5file, void* ref,
                           H5R_type_t ref_type=H5R_OBJECT)
void H5Object::dereference(Attribute&amp; obj, void* ref,
                           H5R_type_t ref_type=H5R_OBJECT)
            </screen>
            <para>In addition, these constructors were added to
create the associated objects by way of dereference:</para>
            <screen>
DataSet(H5Object&amp; obj, void* ref, H5R_type_t ref_type=H5R_OBJECT)
DataSet(H5File&amp; file, void* ref, H5R_type_t ref_type=H5R_OBJECT)
DataSet(Attribute&amp; attr, void* ref, H5R_type_t ref_type=H5R_OBJECT)
Group(H5Object&amp; obj, void* ref, H5R_type_t ref_type=H5R_OBJECT)
Group(H5File&amp; obj, void* ref, H5R_type_t ref_type=H5R_OBJECT)
Group(Attribute&amp; attr, void* ref, H5R_type_t ref_type=H5R_OBJECT)
DataType(H5Object&amp; obj, void* ref, H5R_type_t ref_type=H5R_OBJECT)
DataType(H5File&amp; file, void* ref, H5R_type_t ref_type=H5R_OBJECT)
DataType(Attribute&amp; attr, void* ref, H5R_type_t ref_type=H5R_OBJECT)
            </screen></item>
          </unorderedlist></item>
        </items>

        <item><para>Support for New Platforms, Languages, and
Compilers: Intel 10.1 is supported on Mac OS X 10.5.4. Note: When
Fortran is enabled, configure automatically disables the build of
shared libraries (i.e., only static C and C++ HDF5 libraries will be
built along with the static HDF5 Fortran library). Intel 10.1 C and
C++ compilers require "-no-multibyte-chars" compilation flag due to
the known bug in the compilers.</para></item>
        <items name="Bug Fixes since HDF5-1.8.1 ">
          <item><para>Configuration</para>
          <unorderedlist>
            <item><para>Fixed error with 'make check install'
failing due to h5dump needing other tools built first.</para></item>
            <item><para>When using shared szip, it is no longer
necessary to specify the path to the shared szip libraries in
LD_LIBRARY_PATH.</para></item>
            <item><para>The file libhdf5_fortran.settings is not
installed since its content is included in libhdf5.settings
now.</para></item>
            <item><para>"make DESTDIR=xxx install" failed to install
some tools and files (e.g., h5cc and fortran modules).
Fixed.</para></item>
          </unorderedlist></item>
          <item><para>Library</para>
          <unorderedlist>
            <item><para>H5Ovisit and H5Ovisit_by_name will now
properly terminate when the callback function returns a positive value
on the starting object.</para></item>
            <item><para>Fixed an error where a null message could be
created that was larger than could be written to the
file.</para></item>
            <item><para>Corrected error with family/split/multi VFD
not updating driver info when "latest" version of the file format
used.</para></item>
            <item><para>Corrected alignment+threshold errors to work
correctly when metadata aggregation is enabled.</para></item>
            <item><para>Changed H5Fget_obj_count and H5Fget_obj_ids
to ignore objects registered by the library for internal library
use.</para></item>
            <item><para>Fixed potential memory leak during compound
conversion.</para></item>
            <item><para>Changed the return value of H5Fget_obj_count
from INT to SSIZE_T. Also changed the return value of H5Fget_obj_ids
from HERR_T to SSIZE_T and the type of the parameter MAX_OBJS from INT
to SIZE_T.</para></item>
            <item><para>Fixed an issue that could cause data to be
improperly overwritten during compound type conversion.</para></item>
            <item><para>Fixed pointer alignment violations that
could occur during vlen conversion.</para></item>
            <item><para>Fixed problem where library could cause a
segmentation fault when an invalid location ID was given to
H5Giterate().</para></item>
            <item><para>Fixed improper shutdown when objects have
reference count &gt; 1.  The library now tracks reference count due to
the application separately from that due to internal library
routines.</para></item>
            <item><para>Fixed assertion failure caused by incorrect
array datatype version.</para></item>
            <item><para>Fixed an issue where mount point traversal
would fail when using multiple handles for the child.</para></item>
            <item><para>Fixed an issue where mount points were
inaccessible when using multiple file handles for the parent. The
mount table is now in the shared file structure (the parent pointer is
still in the top structure).</para></item>
            <item><para>Fixed assertion failure caused by incorrect
array datatype version.</para></item>
            <item><para>Fixed issue where a group could have a file
mounted on it twice.</para></item>
            <item><para>When an attribute was opened twice and data
was written with one of the handles, the file didn't have the data. It
happened because each handle had its own object structure, and the
empty one overwrote the data with fill value.  This is fixed by making
some attribute information like the data be shared in the attribute
structure.</para></item>
            <item><para>Fixed a Windows-specific issue in the ohdr
test which was causing users in some timezones to get false errors.
This a deficiency in the Windows mktime() function, and has been
handled properly.</para></item>
          </unorderedlist></item>
          <item><para>Tools</para>
          <unorderedlist>
            <item><para>h5dump now checks for uniqueness of
committed datatypes.</para></item>
            <item><para>Fixed unnecessary indentation of committed
datatypes in h5dump.</para></item>
            <item><para>Fixed bugs in h5stat: segmemtation fault
when printing groups and print warning message when traversal of
objects is unsuccessful. (see bug #1253)</para></item>
            <item><para>Fixed bug in h5ls that prevented relative
group listings (like "h5ls foo.h5/bar") from working
correctly</para></item>
            <item><para>h5dump: when doing binary output (-b), the
stdout printing of attributes was done incorrectly. Removed printing
of attributes when doing binary output.</para></item>
          </unorderedlist></item>
          <item><para>F90 API</para>
          <unorderedlist>
            <item><para>h5sselect_elements_f: Added additional
operators H5S_SELECT_APPEND and H5S_SELECT_PREPEND</para></item>
            <item><para>h5sget_select_elem_pointlist: Fixed list of
returned points by rearranging the point list correctly by accounting
for C conventions.</para></item>
            <item><para>h5sget_select_hyper_blocklist_f: Fixed error
in transposed dimension of arrays.</para></item>
            <item><para>h5sget_select_bounds_f: Swapped array bounds
to account for C and Fortran reversed array notation</para></item>
            <item><para>Changed to initializing string to a blank
character instead of a null type in tH5P.f90 to fix compiling error
using AIX 5.3.0</para></item>
            <item><para>Fixed missing commas in H5test_kind.f90
detected by NAG compiler</para></item>
            <item><para>Fixed passing and array to a scalar in
tH5A_1_8.f90 detected by NAG compiler</para></item>
            <item><para>Added the ability of the test programs to
use the status of HDF5_NOCLEANUP to determine if the *.h5 files should
be removed or not after the tests are completed</para></item>
            <item><para>In nh5tget_offset_c: If offset was equal to
0 it returned the error code of -1, this was changed to return an
error code of -1 when the offset value is &lt; 0.</para></item>
            <item><para>Uses intrinsic Fortran function SIZEOF if
available when detecting type of INTEGERs and REALs in
H5test_kind.f90</para></item>
            <item><para>Put the DOUBLE PRECISION interfaces in a
separate module and added a USE statement for the module. The
interfaces are included/excluded depending on the state of
FORTRAN_DEFAULT_REAL is DBLE_F which detects if the default REAL is
DOUBLE PRECISION. This allows the library to be compiled with -r8
Fortran flag without the user needing to edit the source
code.</para></item>
            <item><para>Enable building shared library for fortran
by adding the flag -fPIC to the compile flags for versions of Intel
Fortran compiler &gt;=9</para></item>
          </unorderedlist></item>
          <item><para>C++ API</para>
          <unorderedlist>
            <item><para>Fixed a design bug which allowed an
Attribute object to create/modify attributes (bugzilla #1068).  The
API class hierarchy was revised to address the problem.  Classes
AbstractDS and Attribute are moved out of H5Object.  Class Attribute
now multiply inherits from IdComponent and AbstractDs and class
DataSet from H5Object and AbstractDs.  In addition, the data member
IdComponent::id was moved into subclasses: Attribute, DataSet,
DataSpace, DataType, H5File, Group, and PropList.</para></item>
            <item><para>IdComponent::dereference was incorrect and
replaced as described in "New Features" section.</para></item>
          </unorderedlist></item>
        </items>
      </change>

      <change from="1.8.0" to="1.8.1">
        <item><para>HDF5 Release 1.8.1 is a minor release with several
bugfixes and optimizations and limited new features.</para></item>
        <item><para>The most significant new feature is an expanded
set of Fortran90 APIs, enabling essentially all new C library features
of Release 1.8.0.</para></item>
        <items name="New Functions and Tools">
          <item><para>C functions: There are no new C functions for
Release 1.8.1.</para></item>
          <item><para>Fortran subroutines: The following Fortran
subroutines are new for Release 1.8.1 and are documented in the HDF5
Reference Manual.</para>
          <screen>
H5A

h5acreate_f                    h5aget_info_by_name_f
h5acreate_by_name_f            h5aget_name_by_idx_f
h5adelete_by_idx_f             h5aget_storage_size_f
h5adelete_by_name_f           h5aopen_f
h5aexists_f                   h5aopen_by_idx_f
h5aexists_by_name_f           h5aopen_by_name_f
h5aget_create_plist_f         h5arename_f
h5aget_info_f                 h5arename_by_name_f
h5aget_info_by_idx_f

H5D

h5dcreate_anon_f              h5dopen_f
h5dcreate_f                   h5dset_extent_f

H5G

h5gcreate_anon_f              h5gget_info_by_idx_f
h5gcreate_f                   h5gget_info_by_name_f
h5gget_create_plist_f         h5gopen_f
h5gget_info_f

H5L

h5lcopy_f                     h5lexists_f
h5lcreate_external_f          h5lget_info_f
h5lcreate_hard_f              h5lget_info_by_idx_f
h5lcreate_soft_f              h5lget_name_by_idx_f
h5ldelete_f                   h5lmove_f
h5ldelete_by_idx_f

H5O

h5olink_f                     h5oopen_f

H5P

h5pget_attr_creation_order_f  h5pset_attr_creation_order_f
h5pget_attr_phase_change_f    h5pset_attr_phase_change_f
h5pget_char_encoding_f        h5pset_char_encoding_f
h5pget_copy_object_f          h5pset_copy_object_f
h5pget_create_inter_group_f   h5pset_create_inter_group_f
h5pget_data_transform_f       h5pset_data_transform_f
h5pget_elink_prefix_f         h5pset_elink_prefix_f
h5pget_est_link_info_f        h5pset_est_link_info_f
h5pget_fapl_direct_f          h5pset_fapl_direct_f
h5pget_link_creation_order_f  h5pset_libver_bounds_f
h5pget_link_phase_change_f    h5pset_link_creation_order_f
h5pget_local_heap_size_hint_f h5pset_link_phase_change_f
h5pget_nlinks_f               h5pset_local_heap_size_hint_f
h5pget_obj_track_times_f      h5pset_obj_track_times_f
h5pget_shared_mesg_index_f    h5pset_nbit_f
h5pget_shared_mesg_nindexes_f h5pset_nlinks_f
                              h5pset_scaleoffset_f

H5R

h5rget_name_f

H5S

h5sdecode_f                   h5sextent_equal_f
h5sencode_f

H5T

h5tcommit_anon_f              h5tdecode_f
h5tcommit_f                   h5tencode_f
h5tcommitted_f                h5tget_create_plist_f
h5tcompiler_conv_f            h5topen_f
          </screen></item>
          <item><para>C++ wrappers: There are no new C++ wrappers for
Release 1.8.1.</para></item>
        </items>

        <items name="Functions and Tools with Changed Syntax">
          <item><para>C functions with changed syntax: There are no C
functions with changed syntax in Release 1.8.1.</para></item>
          <item><para>Fortran subroutines with changed syntax: In the
following Fortran subroutines, spos is a new parameter indicating the
position of the sign bit:</para>
          <screen>
h5tset_fields_f(type_id, spos, epos, esize, mpos, msize, hdferr)
h5tget_fields_f(type_id, spos, epos, esize, mpos, msize, hdferr)
          </screen></item>
        </items>

        <items name="Changed C++ wrappers:">
          <item><para>The class AbstractDS was moved out of H5Object.
The class Attribute now multiply inherits from IdComponent and
AbstractDs; the class DataSet now multiply inherits from H5Object and
AbstractDs.</para>
          <para>In addition, data member IdComponent::id was
moved into subclasses: Attribute, DataSet, DataSpace, DataType,
H5File, Group, and PropList.</para></item>
          <item><para>IdComponent::dereference was incorrect; it was
changed from:</para>
          <screen>
void IdComponent::dereference(IdComponent&amp; obj, void* ref)
          </screen>
          <para>to:</para>
          <screen>
void H5Object::dereference(H5File&amp; h5file, void* ref)
void H5Object::dereference(H5Object&amp; obj, void* ref)
          </screen></item>
        </items>

        <items name="Tools with changed syntax:">
          <item><para>The command-line syntax of h5repack was changed
in Release 1.8.0 to the following: <command>h5repack [OPTIONS] in_file
out_file</command> Since this would be imcompatible with existing user
scripts, the original syntax has be re-enabled in this release:
<command>h5repack -i in_file -o out_file [OPTIONS]</command>. h5repack
now understands either syntax.</para></item>
          <item><para>An h5repack option to set the minimum number of
links in indexed format was introduced in Release 1.8.0 as <command>-d
min_indexed_links</command> or
<command>--indexed=min_indexed_links</command>. In Release 1.8.1, the
'-i' form has been changed to '-d' as follows: <command>-d
min_indexed_links</command> or
<command>--indexed=min_indexed_links</command></para></item>
          <item><para>The command-line syntax of h5diff was changed in
Release 1.8.0 to the following: <command>h5diff [OPTIONS] file1 file2
[object1 [object2 ] ]</command></para></item>
        </items>

        <items name="Tools with new options:">
          <item><para>h5dump -m T  or  --format T   Sets format of
floating point output</para></item>
        </items>

        <items name="Changed Behavior or Output">
          <item><para>Changed library behavior: A 4GB limit on the
size of dataset chunks is now properly enforced when a dataset is
created.</para></item>
          <item><para>The HDF5 Library now works more effectively with
external links. Some valid external links that previously failed will
now be properly recognized. See H5Lcreate_external.</para></item>
          <item><para>C functions with changed behavior: The behavior
of H5Lcreate_external has changed as described immediately
above.</para></item>
          <item><para>Tools with changed behavior and changed output:
The h5dump -p option now prints the compression ratio if a compression
filter is associated with a dataset. h5dump now supports external
links, displaying the target objects (datasets, groups, and named
datatypes).</para></item>
        </items>

        <items name="Changed Library Configuration">
          <item><para>The following configuration flag is new with
this release: --disable-sharedlib-rpath</para></item>
        </items>

        <items name="Removed Patch Requirement">
          <item><para>The patch that was required for Cygwin with HDF5
Release 1.8.0 has been rolled into this release and no longer needs to
be applied by the user.</para></item>
        </items>
      </change>

      <change from="1.6.x" to="1.8.0">
        <item><para>HDF5 Release 1.8.0 represents a major update to
the HDF5 Library, utilities, and file format.  The HDF5 development
team has attempted to provide new capabilities and improve performance
while retaining compatibility with previous releases.</para></item>
        <item><para>The new features are briefly described below, but
first a few words regarding the compatibility solutions.</para></item>
        <items name="Compatibility Issues and Solutions">
          <item><para>When new features and optimizations are
introduced, as is certainly the case in this release, there is always
the risk of creating compatibility problems. These problems can arise
either with an application that must be ported to the new release (or
cannot be ported, for any of a number of reasons), with applications
based on a prior release that must read files created by the new
release, or with files created by an older release that must work with
an application based on the new release. The HDF5 team has made a
concerted effort to provide a full range of compatibility solutions,
hopefully addressing all of the situations a user or application is
likely to encounter.</para></item>
          <item><para>Interface -- Backward and Forward API
Compatibility: This release contains many new features and related API
routines, but at the same time attempts to provide stability for
applications by continuing to make existing API routines available and
by operating in a backwardly compatible manner, whenever
possible.</para>
          <para>API Compatibility Macros in HDF5 discusses the
specifics of API compatibility and configuration options with respect
to new features.</para></item>
          <item><para>   Format -- Backward and Forward Format
Compatibility: The HDF5 Library Release 1.8.0 reads all existing HDF5
files, from this or any prior release.  Although this release contains
features that require additions and/or changes to the HDF5 file
format, by default this release will write out files that conform to a
"maximum compatibility" principle. That is, files are written with the
earliest version of the file format that describes the information,
rather than always using the latest version possible.  This provides
the best forward compatibility by allowing the maximum number of older
versions of the library to read files produced with this
release.</para>
          <para>If library features are used that require new
file format features, or if the application requests that the library
write out only the latest version of the file format, the files
produced with this version of the library may not be readable by older
versions of the HDF5 library.</para>
          <para>New Features in HDF5 Release 1.8.0 and
Backward/Forward Format Compatibility Issues discusses the new
features in the release from the point of view of their impact on
format comaptibility.</para></item>
        </items>

        <items name="New Features">
          <item><para>New features are briefly described in this
section. Further, instructional example codes for several of these
features are provided here: <ulink url="http://www.hdfgroup.uiuc.edu/UserSupport/Examples-HDF5-1.8.0/">http://www.hdfgroup.uiuc.edu/UserSupport/Examples-HDF5-1.8.0/</ulink></para></item>
          <item><para>While all new APIs are documented in the HDF5
Reference Manual, there has not been time yet to describe all of them
in the HDF5 User's Guide.</para></item>
          <unorderedlist>
            <item><para>Object Format Control:</para>
            <unorderedlist>
              <item><para>Select format limits by setting library
version bounds</para>
              <para>Tunable properties enable the creation of files
selectively compatible with older HDF5 applications and libraries.
This feature enables the library, and thus an application, to create
files that can be read by specific older HDF5 libraries and tools and
by applications that those same use libraries.</para>
              <para>This is accomplished with the function
H5Pset_libver_bounds, which sets the lower and upper bounds on
allowable formats. The lower bound is determined by specifying the
earliest library whose format may be used for an object; the upper
bound is determined by specifying the latest library whose format may
be used for an objects.</para>
              <para>The function H5Pget_libver_bounds can be used to
retrieve the current settings.</para></item>
            </unorderedlist></item>
            <item><para>Groups and Links:</para>
            <unorderedlist>
              <item><para>Configurable Compact-or-Indexed Link
Storage</para>
              <para>Compact small groups and more scalable large
groups</para>
              <para>For groups with only a few links, compact link
storage allows groups containing only a few links to take up much less
space in the file.</para>
              <para>On the other hand, an improved implementation
of indexed link storage provides a faster and more scalable method for
storing and working with large groups containing many links.</para>
              <para>The threshold for switching between the
compact and indexed storage formats is configurable according an
application's or a user community's expected use cases using the
function H5Pset_link_phase_change.</para>
              <para>The function H5Pget_link_phase_change can be
used to retrieve the current settings.</para></item>
              <item><para>External Links</para>
              <para>Links in a group that link to objects in a
different HDF5 file</para>
              <para>External links allow a group to include objects in
another HDF5 file and enable the library to access those objects as if
they are in the current file. In this manner, a group may appear to
directly contain datasets, named datatypes, and even groups that are
actually in a different file. This feature is implemented via a suite
of functions that create and manage the links, define and retrieve
paths to external objects, and interpret link names:</para>
              <screen>
H5Lcreate_external
H5Lget_info
H5Lget_val
H5Lunpack_elink_val
H5Pset_elink_prefix
H5Pget_elink_prefix
              </screen></item>
              <item><para>User-defined Links</para>
              <para>Customized link types</para>
              <para>The user-defined link feature enables the
definition of customized types of links that meet specific community
or application needs. This feature is implemented via a suite of
functions that define, create, register and unregister the link
types:</para>
              <screen>
H5Lcreate_ud
H5Lregister
H5Lunregister
              </screen></item>
              <item><para>Link Creation Order</para>
              <para>Tracking, indexing, and iterating over links
in groups by creation order</para>
              <para>Links in a group can now be explicitly tracked
and definitively indexed by the order in which they are created,
enabling systematic iteration and lookup of links by creation order.
This complements the already-existing alphanumeric-by-name
capability.</para>
              <screen>
H5Pset_link_creation_order
H5Pget_link_creation_order
H5Literate
H5Lvisit
              </screen></item>
              <item><para>Dedicated Link Interface</para>
              <para>A Link API (H5L) for directly managing
links</para>
              <para>New link APIs enables greater flexibility in
the creation and management of links in an HDF5 file. The H5L routines
allow links to be managed and manipulated more like objects in the
HDF5 data model and provide detailed control of linking
behavior.</para>
              <para>H5L: Link interface</para></item>
            </unorderedlist></item>
            <item><para>Attribute and Meta Data Enhancements:</para>
            <unorderedlist>
              <item><para>Enhanced Attribute Handling</para>
              <para>Faster access and more compact storage</para>
              <para>The Attribute interface (H5A) includes several new
functions for attribute management. When large numbers of attributes
are attached to a single object, new functionality enables faster
access and allows those attributes to be stored in much less space in
the file.</para>
              <para>For new attribute management functions:</para>
              <screen>
H5A API
              </screen>
              <para>To configure the attribute storage format:</para>
              <screen>
H5Pset_attr_phase_change
H5Pget_attr_phase_change
              </screen></item>
              <item><para>Creation Order in Attributes</para>
              <para>Attributes can now be tracked and indexed on the
order in which they are created, enabling iteration and lookup of
attributes by creation order as well as alphanumeric order by
name.</para>
              <screen>
H5Pset_attr_creation_order
H5Pget_attr_creation_order
              </screen></item>
              <item><para>Shared Object Header Messages (SOHM)</para>
              <para>To conserve space in an HDF5 file, large header
messages that are used repeatedly in the file can be designated as
shared.</para>
              <para>A shared object header message (SOHM) is
written only once in a file then a pointer is inserted instead of the
message itself on each object to which the header message would
otherwise be attached. This can be particularly valuable when, for
instance, an identical attribute is applied to tens of thousands of
objects. (Note that there is will be no advantage if the attribute
itself is smaller than the pointer would be.)</para>
              <para>This feature is implemented via a suite of
functions that set up SOHM tracking and indexing and manage the
thresholds for switching between shared and non-shared
messages:</para>
              <screen>
H5Pset_shared_mesg_nindexes
H5Pget_shared_mesg_nindexes
H5Pset_shared_mesg_index
H5Pget_shared_mesg_index
H5Pset_shared_mesg_phase_change
H5Pget_shared_mesg_phase_change
              </screen></item>
              <item><para>UTF-8 Unicode Encoding</para>
              <para>UTF-8 Unicode encoding is supported for
strings in datasets, the names of links, and the names of
attributes.</para>
              <para>UTF-8 encoding is managed with
H5Pset_char_encoding and H5Pget_char_encoding.</para>
              <para>See "UTF-8 Character Encoding in HDF5" and
"Character Encoding for Links in HDF5 Files" (PDF) for further
information.</para></item>
              <item><para>Meta Data Caching</para>
              <para>Meta data caching enhancements boost
performance with certain types of files and enable configurable meta
data cache management and monitoring.</para>
              <para>A suite of functions is provided to set and
review the meta data cache configurations, to review and reset hit
rate statistics, and to retrieve the current cache size:</para>
              <screen>
H5Fget_mdc_config
H5Fget_mdc_hit_rate
H5Fget_mdc_size
H5Freset_mdc_hit_rate_stats
H5Fset_mdc_config
H5Pset_mdc_config
H5Pget_mdc_config
              </screen>
              <para>See "Metadata Caching in HDF5" in the HDF5 User's
Guide for further information.</para></item>
            </unorderedlist></item>
            <item><para>Improved Object Handling:</para>
            <unorderedlist>
              <item><para>Create Intermediate Groups</para>
              <para>Rather than having to step through a hierarchy
creating groups one at a time, intermediate groups that do not yet
exist can now be created when creating or copying an object in a
file</para>
              <para>The creation of missing groups is managed with
H5Pset_create_intermediate_group and
H5Pget_create_intermediate_group</para>
              <para>See Creating Missing Groups (PDF) for further
information</para></item>
              <item><para>Object Copying</para>
              <para>Copying an HDF5 object to a new location
within a file or in a different file</para>
              <para>With this feature, an object in an HDF5 file
can easily be copied to a new location within the current file or to a
specified location in another HDF5 file. This is accomplised at a
low-level in the HDF5 file, allowing entire group hierarchies to be
copied quickly and compressed datasets to be copied without going
through a decompression/compression cycle.</para>
              <para>A suite of functions is provided to manage
copy properties and o perform the copying operation:</para>
              <screen>
H5Ocopy
H5Gcreate_anon
H5Pset_copy_object
H5Pset_create_intermediate_group
              </screen>
              <para>A command-line tool, h5copy, is also provided to
enable copying objects without having to create an application. (Note:
h5copy is not yet documented, but entering 'h5copy --help' on the
command line will provide basic information.)</para></item>
              <item><para>Improved Object Information Retrieval</para>
              <para>Three new functions have been added to enhance the
object information that can be retrieved.</para>
              <screen>
H5Lget_info retrieves information regarding a link
H5Oget_info retrieves information regarding an object
H5Gget_info retrieves information regarding a group
              </screen>
              <para>In each case, the function returns object
information in a customized struct. For example, H5Lget_info returns
the link type while H5Gget_info returns the number of links in the
group</para></item>
              <item><para>Anonymous Object Creation</para>
              <para>Anonymous object creation enables the creation
and management of objects in a file independently of the links that
integrate those objects into the file structure</para>
              <screen>
H5Dcreate_anon
H5Gcreate_anon
H5Tcommit_anon
              </screen>
              <para>The above routines are used in conjunction with
the Link and Object interfaces discussed elsewhere (H5L and H5O,
repectively)</para>
              <screen>
H5L: Link interface
H5O: Object interface
              </screen></item>
              <item><para>Dedicated Object Interface</para>
              <para>An Object API (H5O) for managing general
objects</para>
              <para>A new object API enables greater flexibility
in the creation and linking of objects in an HDF5 file.</para>
              <screen>
H5O: Object interface
              </screen></item>
            </unorderedlist></item>
            <item><para>Datatype Features:</para>
            <unorderedlist>
              <item><para>User-defined Datatype Conversion Callback
Functions</para>
              <para>User-defined Datatype Conversion Callback
Functions: Revised Datatype Conversion Exception Handling - It is now
possible for an application to have greater control over exceptional
circumstances (range errors, etc.) during datatype conversion.</para>
              <para>See "Revising Numeric Overflows in HDF5" and "Data
Conversion Of Arithmetic Data Types."</para></item>
              <item><para>Integer-to-Floating-point Conversion
Support</para>
              <para>Integer-to-Floating-point Conversion Support - It
is now possible for the HDF5 library to convert between integer and
floating-point datatypes</para>
              <para>See H5Tconvert in the HDF5 Reference
Manual.</para></item>
              <item><para>Datatype and Dataspace Serial
Conversion</para>
              <para>Datatype and Dataspace Serial Conversion -
Routines have been implemented to serialize/deserialize HDF5 datatypes
and dataspaces. These routines allow datatype and dataspace
information to be transmitted between processes or stored in non-HDF5
files.</para>
              <para>See "Encode and Decode HDF5 Objects," and the
function entries in the HDF5 Reference Manual for H5Tencode,
H5Tdecode, H5Sencode, and H5Sdecode</para></item>
              <item><para>Two-way Conversion Between Datatype and Text
Description of Datatype</para>
              <para>Two-way Conversion Between Datatype and Text
Description of Datatype - This feature enables the creation of a
datatype from a text definition of that datatype and the creation of a
formal text definition from a datatype.  The text definition is in DDL
format; DDL definitions of HDF5 datatypes can be found in the "DDL in
BNF for HDF5."</para>
              <para>H5LTtext_to_dtype creates an HDF5 data type
based on the text description and returns the data type identifier.
Given a datatype identifier, H5LTdtype_to_text creates a DDL
description of the datatype.</para>
              <para>Also see "Conversion Between Text and
Datatype."</para></item>
            </unorderedlist></item>
            <item><para>Enhancements in the I/O Pipeline</para>
            <unorderedlist>
              <item><para>New Compression Filters</para>
              <para>New Compression Filters - These new I/O
filters allow better compression of certain types of data:</para>
              <unorderedlist>
                <item><para>N-Bit Filter - This filter compresses data
which uses N-bit datatypes. See H5Pset_nbit in the HDF5 Reference
Manual and the section "Using Filters / N-bit" in the "Datasets"
chapter of the HDF5 User's Guide.</para></item>
                <item><para>Scale+Offset Filter - This filter
compresses scalar (integer and floating-point) datatypes which stay
within a range. See H5Pset_scaleoffset in the HDF5 Reference Manual
and the section "Using Filters / Scale-Offset" in the "Datasets"
chapter of the HDF5 User's Guide.</para></item>
              </unorderedlist></item>
              <item><para>Collective Chunk I/O in Parallel - The
library now attempts to use MPI collective mode when performing I/O on
chunked datasets when using the parallel I/O file
driver.</para></item>
              <item><para>Arithmetic Data Transform on I/O - This
feature allows arithmetic operations (add/subtract/multiply/divide) to
be performed on data elements as they are being written to/read from a
file. See H5Pset_data_transform in the HDF5 Reference
Manual.</para></item>
            </unorderedlist></item>
            <item><para>High-level Interfaces and Fortran and C++
Wrappers</para>
            <unorderedlist>
              <item><para>C++ API Wrapper Improvements - Several
improvements were made to the C++ build infrastructure, as well as
adding support for previously missing and new API
routines.</para></item>
              <item><para>FORTRAN API Wrapper Improvements - Several
improvements were made to the FORTRAN build infrastructure, as well as
adding support for previously missing and new API
routines.</para></item>
              <item><para>New Packet Table and Dimension Scale
High-Level APIs have been added to the high-level C interfaces. The
Packet Table API (H5PT) is designed to allow variable-length records
to be added to tables easily. The Dimension Scale API (H5DS) allows
dimension scales to be created in HDF5 and attached to HDF5 datasets.
Also see "HDF5 Dimension Scale Specification and Design Notes"
(PDF).</para></item>
              <item><para>High-Level Fortran APIs - Fortran APIs have
been added for the following High-Level HDF5 APIs:</para>
              <screen>
H5Lite (H5LT)
H5Image (H5IM)
H5Table (H5TB)
              </screen></item>
            </unorderedlist></item>
            <item><para>Tool Improvements - Three new tools have
been added, and existing tools were enhanced:</para>
            <unorderedlist>
              <item><para>h5mkgrp is a new command-line tool that
creates a new group in an HDF5 file.  It is described in the next
section, with other features that may change.</para></item>
              <item><para>h5stat (PDF) enables the analysis of an
HDF5 file in various ways to determine useful statistics regarding the
objects in the file, such as the numbers of objects per group, the
sizes of datasets, the amount of free space in the file,
etc.</para></item>
              <item><para>h5copy makes a complete copy of an
object in an HDF5 file as a new object in that HDF5 file or as a new
object in a different HDF5 file. (The h5copy tool is not yet
documented, but entering 'h5copy --help' on the command line provides
basic information.)</para></item>
              <item><para>Improved speed of h5dump - Performance
improvements have been made to h5dump to speed it up when dealing with
files that have large numbers of objects.</para></item>
            </unorderedlist></item>
            <item><para>Miscellaneous Features</para>
            <unorderedlist>
              <item><para>"NULL" Dataspace - A new type of dataspace,
which allows datasets and attributes without any elements to be
described. See H5Screate in the HDF5 Reference Manual.</para></item>
              <item><para>Extendible Identifier API - A new set of
identifier management routines has been added, which allow an
application to use the HDF5 identifier-to-object mapping routines. See
the H5I APIs in the HDF5 Reference Manual and "Allowing Users to
Access HDF5's ID System."</para></item>
              <item><para>Enhanced Error Handling - A new set of error
API routines has been added, which allow an application to integrate
its error reporting with the HDF5 library error stack. In the HDF5
Reference Manual, see the error stack APIs. Also see the supporting
document "Unified Error Reporting for HDF5 and Client
Libraries."</para></item>
              <item><para>Better UNIX/Linux Portability - This release
now uses the latest GNU "auto" tools (autoconf, automake, and libtool)
to provide much better portability between many machine and OS
configurations. Building the HDF5 distribution can now be performed in
parallel (with the gmake "-j" flag), speeding up the process of
building, testing and installing the HDF5 distribution.  Many other
improvements have gone into the build infrastructure as
well.</para></item>
            </unorderedlist></item>
          </unorderedlist>
        </items>
      </change>

      <note type="compilation">
        <para>Per the software license, changes were made to the
source for the following (changes made 2009-02-27):</para>
        <unorderedlist>
          <item><para>Use our compilation flags, do not include the
defaults</para></item>
          <item><para>Adhere to the directory format for our Open
Source Collection</para></item>
          <item><para>Use our version of libtool</para></item>
        </unorderedlist>
      </note>

      <note type="usage">
        <para>Versions of the library for the vendor compiler and GCC
4.2.4 are available in the following directories:</para>
        <screen>
${SB_INSTALL_PREFIX}/lib            # Vendor compiler
${SB_INSTALL_PREFIX}/lib/gcc44      # GCC 4.4.6
        </screen>

        <para>64-bit versions of the library on Solaris 7+ for the
vendor compiler and GCC 4.2.4 are available in the following
directories:</para>
        <screen>
${SB_INSTALL_PREFIX}/lib/64         # Vendor compiler
${SB_INSTALL_PREFIX}/lib/gcc44/64   # GCC 4.4.6
        </screen>
      </note>

      <platform name="HP-UX 11.00">
        <para>Patch <command>PHSS_22543</command> providing the
<command>libstd_v2</command> Standard C++ library is required as the
HP C++ compiler was used.</para>
      </platform>

      <platform name="Tru64 UNIX">
        <para>The latest C++ runtime library is required due to the
usage of the latest Compaq C++ compiler. It is available from the
following locations:</para>
        <unorderedlist>
          <item><para>package CXXREDIST651V37.tar in the support
directory of the CD</para></item>
          <item><para>online support directory <ulink url="ftp://support.thewrittenword.com/dists">ftp://support.thewrittenword.com/dists</ulink></para></item>
          <item><para>directly from Compaq at <ulink url="ftp://ftp.compaq.com/pub/products/C-CXX/Tru64/cxx/cxxredist.htm">ftp://ftp.compaq.com/pub/products/C-CXX/Tru64/cxx/cxxredist.htm</ulink></para></item>
        </unorderedlist>
      </platform>
    </notes>

    <changelog>
      <change date="2012 January 11" revision="3"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Update perl dependency from 5.8.8 to
5.12.2</para></item>
        <item><para>Update gcc dependency from 4.2.4 to
4.4.6</para></item>
        <item><para>Update zlib dependency from 1.2.3 to
1.2.5</para></item>
        <item><para>Remove support for Solaris 6 and 7, RHEL 3,
SLES</para></item>
        <item><para>Add support for AIX 7.1</para></item>
      </change>

      <change date="2010 November 1" revision="2"
      author="Peter O'Gorman" email="pogma@thewrittenword.com">
        <item><para>Add support for RHEL 6</para></item>
      </change>
    </changelog>
  </program>
</programs>
