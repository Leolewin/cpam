<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="automake" version="1.12.2" revision="2">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}112</install-name>

    <sources>
      <source checksum="56c3ab38a5ed8f2b825341b4e007372a"
        checksum-type="md5" size="1367980"
        path="src/automake-1.12.2.tar.xz"/>
      <patch checksum="0b2e7230e20be1d95579ff558d71bbc8"
        checksum-type="md5" size="1680"
        path="src/automake-1.12.2.tww.patch"/>
      <patch checksum="6188653681c70cbacb9c401bafdb1a0e"
        checksum-type="md5" size="569"
        path="src/automake-1.12.2.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="autoconf" install-name="autoconf26"
        add-path="prepend">v&gt;=2.66</depend>
      <depend program="help2man" var="HELP2MAN"
        install-name="help2man138"
        add-path="prepend">v&gt;=1.38.2</depend>
      <depend program="perl" add-path="prepend">v==5.12.2</depend>
    </dependencies>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <configure>
<![CDATA[
${SHELL} ./configure --infodir="${SB_INSTALL_PREFIX}/info" \
--datarootdir=${_datadir} --datadir=${_datadir} \
--disable-silent-rules --mandir="${SB_INSTALL_PREFIX}/man" \
--prefix=${SB_INSTALL_PREFIX}

# recreate info docs
(rm doc/automake.info*) 2>/dev/null || :
]]>
    </configure>

    <build>
<![CDATA[
gmake m4datadir=${_datadir} pkgdatadir=${_datadir} \
pkgvdatadir=${_datadir} automake_acdir="${_datadir}/aclocal" \
MAKEINFOFLAGS="--no-split"
]]>
    </build>

    <test>
      <dependencies replace="0">
        <depend program="libtool" install-name="libtool15"
          add-path="prepend">v&gt;=1.5</depend>
      </dependencies>
<![CDATA[
MAKE=gmake gmake check

:
]]>
    </test>

    <install>
<![CDATA[
gmake install m4datadir=${_datadir} pkgdatadir=${_datadir} \
pkgvdatadir=${_datadir} automake_acdir="${_datadir}/aclocal"

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/texinfo
${SB_PATH_INSTALL} -m 644 -o root -g 0 doc/automake.texi \
doc/fdl.texi doc/version.texi ${_docdir}/texinfo
]]>
    </install>

    <licenses>
      <license path="gpl-2.license"/>

      <license module="documentation" path="gfdl-1.3.license"/>
    </licenses>

    <notes>
      <change from="1.12.1" to="1.12.2">
        <items name="WARNING: Future backward-incompatibilities!">
          <item><para>Future versions of Automake will likely drop
support for the long-deprecated 'configure.in' name for the Autoconf
input file. You are advised to use the recommended name 'configure.ac'
instead.</para></item>
          <item><para>The long-obsolete (since automake 1.10)
AM_PROG_MKDIR m4 macro will be removed in Automake 1.13.  The $(mkdir_p)
make variable and the @mkdir_p@ substitution will still remain available
(as aliases of $(MKDIR_P)) for the moment, for better backward
compatibility.</para></item>
          <item><para>Autoconf 2.65 or later will be required by the
next major Automake version (1.13).  Until now, Automake has required
Autoconf version 2.62 or later.</para></item>
          <item><para>Starting from the next major Automake version
(1.13), the rules to build pdf, ps and dvi output from Texinfo input
will use the '--build-dir' option by default.  Since such an option was
only introduced in Texinfo 4.9, this means that Makefiles generated by
future Automake versions will require at least that version of
Texinfo.</para></item>
          <item><para>Starting from the next major Automake version
(1.13), the parallel testsuite harness (previously only enabled by the
'parallel-tests' option) will become the default one; the older serial
testsuite harness will still be available through the use of the
'serial-tests' option.</para></item>
          <item><para>The following long-obsolete m4 macros will be
removed in the next major Automake version (1.13):</para>
          <screen>
AM_PROG_CC_STDC:    superseded by AC_PROG_CC since October 2002
fp_PROG_CC_STDC:    broken alias for AM_PROG_CC_STDC
fp_WITH_DMALLOC:    old alias for AM_WITH_DMALLOC
AM_CONFIG_HEADER:   superseded by AC_CONFIG_HEADERS since July 2002
ud_PATH_LISPDIR:    old alias for AM_PATH_LISPDIR
jm_MAINTAINER_MODE: old alias for AM_MAINTAINER_MODE
ud_GNU_GETTEXT:     old alias for AM_GNU_GETTEXT
gm_PROG_LIBTOOL:    old alias for AC_PROG_LIBTOOL
fp_C_PROTOTYPES:    old alias for AM_C_PROTOTYPES (which was part
                    of the now-removed automatic de-ANSI-fication
                    support of Automake)
          </screen></item>
          <item><para>All the "old alias" macros in 'm4/obsolete.m4'
will be removed in the next major Automake version (1.13).</para></item>
          <item><para>Support for the two- and three-arguments
invocation forms of the AM_INIT_AUTOMAKE macro is deprecated, and will
be removed in the next major Automake version (1.13).</para></item>
          <item><para>The '--acdir' option of aclocal is deprecated, and
will probably be removed in the next major Automake release (1.13).  You
should use the options '--automake-acdir' and '--system-acdir' instead
(which have been introduced in Automake 1.11.2).</para></item>
          <item><para>The exact order in which the directories in the
aclocal macro search path are looked up is probably going to be changed
in the next Automake release (1.13).</para></item>
          <item><para>The 'missing' script will not try anymore to
update the timestamp of out-of-date files that require a
maintainer-specific tool to be remade, in case the user lacks such a
tool (or has a too-old version of it).  In fact, starting from Automake
1.13, all it'll do will be giving more useful warnings than a bare
"command not found" from a make recipe would.</para></item>
        </items>

        <items name="Warnings and deprecations">
          <item><para>Automake now issues a warning (in the
'portability' category) if 'configure.in' is used instead of
'configure.ac' as the Autoconf input file.  Such a warning will also be
present in the next Autoconf version (2.70).</para></item>
        </items>

        <items name="Cleaning rules">
          <item><para>Recursive cleaning rules descends into the
$(SUBDIRS) in the natural order (as done by the other recursive rules),
rather than in the inverse order.  They used to do that in order to work
a round a limitation in an older implementation of the automatic
dependency tracking support, but that limitation had been lifted years
ago already, when the automatic dependency tracking based on
side-effects of compilation had been introduced.</para></item>
          <item><para>Cleaning rules for compiled objects (both "plain"
and libtool) work better when subdir objects are involved, not
triggering a distinct 'rm' invocation for each such object.  They do so
by removing *any* compiled object file that is in the same directory of
a subdir object.  See automake bug#10697.</para></item>
        </items>

        <items name="Silent rules support">
          <item><para>A new predefined $(AM_V_P) make variable is
provided; it expands to a shell conditional that can be used in recipes
to know whether make is being run in silent or verbose
mode.</para></item>
        </items>

        <items name="SECURITY VULNERABILITIES!">
          <item><para>The recipe of the 'distcheck' no longer grants
anymore temporary world-wide write permissions on the extracted distdir.
Even if such rights were only granted for a vanishingly small time
window, the implied race condition proved to be enough to allow a local
attacker to run arbitrary code with the privileges of the user running
"make distcheck".  This is CVE-2012-3386.</para></item>
        </items>

        <items name="Long-standing bugs">
          <item><para>The "recheck" targets behaves better in the face
of build failures related to previously failed tests.  For example, if a
test is a compiled program that must be rerun by "make recheck", and its
compilation fails, it will still be rerun by further "make recheck"
invocations.  See automake bug#11791.</para></item>
        </items>

        <items name="Bugs introduced by 1.12.1">
          <item><para>Automake provides once again the '$(mkdir_p)' make
variable and the '@mkdir_p@' substitution (both as simple aliases for
'$(MKDIR_P)'), for better backward-compatibility.</para></item>
        </items>
      </change>

      <change from="1.12" to="1.12.1">
        <items name="New supported languages">
          <item><para>Support for Objective C++ has been added; it
should work similarly to the support for Objective C.</para></item>
        </items>

        <items name="Deprecated obsolescent features">
          <item><para>Use of the long-deprecated two- and
three-arguments invocation forms of the AM_INIT_AUTOMAKE macro now
elicits a warning in the 'obsolete' category.  Starting from the next
major Automake release (1.13), such usages won't be allowed
anymore.</para></item>
          <item><para>Support for the "Cygnus-style" trees (enabled by
the 'cygnus' option) is now deprecated (its use triggers a warning in
the 'obsolete' category). It will be removed in the next major Automake
release (1.13).</para></item>
          <item><para>The long-obsolete (since 1.10) automake-provided
$(mkdir_p) make variable, @mkdir_p@ configure-time substitution and
AM_PROG_MKDIR m4 macro are deprecated, eliciting a warning in the
'obsolete' category.</para></item>
        </items>

        <items name="Miscellaneous changes">
          <item><para>The Automake test cases now require a proper
POSIX-conforming shell. Older non-POSIX Bourne shells (like Solaris 10
/bin/sh) won't be accepted anymore.  In most cases, the user shouldn't
have to specify such POSIX shell explicitly, since it will be looked up
at configure time.  Still, when this lookup fails, or when the user
wants to override its conclusion, the variable 'AM_TEST_RUNNER_SHELL'
can be used (pointing to the shell that will be used to run the Automake
test cases).</para></item>
        </items>

        <items name="Bugs introduced by 1.12">
          <item><para>Several weaknesses in Automake's own build system
and test suite have been fixed.</para></item>
        </items>

        <items name="Bugs introduced by 1.11.3">
          <item><para>When given non-option arguments, aclocal rejects
them, instead of silently ignoring them.</para></item>
        </items>

        <items name="Long-standing bugs">
          <item><para>When the 'color-tests' option is in use, forcing
of colored testsuite output through "AM_COLOR_TESTS=always" works even
if the terminal is a non-ANSI one, i.e., if the TERM environment
variable has a value of "dumb".</para></item>
          <item><para>Several inefficiencies and poor performances in
the implementation of the parallel-tests 'check' and 'recheck' targets
have been fixed.</para></item>
          <item><para>The post-processing of output "#line" directives
done the ylwrap script is more faithful w.r.t. files in a subdirectory;
for example, if the processed file is "src/grammar.y", ylwrap will
correctly produce directives like:</para>
          <screen>
#line 7 "src/grammar.y"
          </screen>
          <para>rather than like</para>
          <screen>
#line 7 "grammar.y"
          </screen>
          <para>as it did before.</para></item>
        </items>
      </change>

      <change from="1.11.6" to="1.12">
        <items name="Obsolete features removed">
          <item><para>The never documented nor truly used script
'acinstall' has been removed.</para></item>
          <item><para>Support for automatic de-ANSI-fication has been
removed.</para></item>
          <item><para>The support for the "obscure" multilib feature has
been removed from Automake core (but remains available in the 'contrib/'
directory of the Automake distribution).</para></item>
          <item><para>Support for ".log -&gt; .html" conversion and the
check-html and recheck-html targets has been removed from Automake core
(but remains available in the 'contrib/' directory of the Automake
distribution).</para></item>
          <item><para>The deprecated 'lzma' compression format for
distribution archives has been removed, in favor of 'xz' and
'lzip'.</para></item>
          <item><para>The obsolete AM_WITH_REGEX macro has been
removed.</para></item>
          <item><para>The long-deprecated options '--output-dir',
'--Werror' and '--Wno-error' have been removed.</para></item>
          <item><para>The chapter on the history of Automake has been
moved out of the reference manual, into a new dedicated Texinfo
file.</para></item>
        </items>

        <items name="New targets">
          <item><para>New 'cscope' target to build a cscope database for
the source tree.</para></item>
        </items>

        <items name="Changes to Automake-generated testsuite harnesses">
          <item><para>The new automake option 'serial-tests' has been
introduced.  It can be used to explicitly instruct automake to use the
older serial testsuite harness.  This is still the default at the
moment, but it might change in future versions.</para></item>
          <item><para>The 'recheck' target (provided by the parallel
testsuite harness) now depends on the 'all' target.  This allows for a
better user-experience in test-driven development.  See automake
bug#11252.</para></item>
          <item><para>Test scripts that exit with status 99 to signal an
"hard error" (e.g., and unexpected or internal error, or a failure to
set up the test case scenario) have their outcome reported as an 'ERROR'
now.  Previous versions of automake reported such an outcome as a 'FAIL'
(the only difference with normal failures being that hard errors were
counted as failures even when the test originating them was listed in
XFAIL_TESTS).</para></item>
          <item><para>The testsuite summary displayed by the
parallel-test harness has a completely new format, that always list the
numbers of passed, failed, xfailed, xpassed, skipped and errored tests,
even when these numbers are zero (but using smart coloring when the
color-tests option is in effect).</para></item>
          <item><para>The default testsuite driver offered by the
'parallel-tests' option is now implemented (partly at least) with the
help of automake-provided auxiliary scripts (e.g., 'test-driver'),
instead of relying entirely on code in the generated Makefile.in. This
has two noteworthy implications. The first one is that projects using
the 'parallel-tests' option should now either run automake with the
'--add-missing' option, or manually copy the 'test-driver' script into
their tree.  The second, and more important, implication is that now,
when the 'parallel-tests' option is in use, TESTS_ENVIRONMENT can not be
used anymore to define a test runner, and the command specified in
LOG_COMPILER (and &lt;ext&gt;_LOG_COMPILER) must be a *real* executable
program or script.  For example, this is still a valid usage (albeit a
little contorted):</para>
          <screen>
TESTS_ENVIRONMENT = \
  if test -n '$(STRICT_TESTS)'; then \
    maybe_errexit='-e'; \
  else \
    maybe_errexit=''; \
  fi;
LOG_COMPILER = $(SHELL) $$maybe_errexit
          </screen>
          <para>while this is not anymore:</para>
          <screen>
TESTS_ENVIRONMENT = \
  $(SHELL) `test -n '$(STRICT_TESTS_CHECKING)' &amp;&amp; echo ' -e'`
          </screen>
          <para>neither is this:</para>
          <screen>
TESTS_ENVIRONMENT = \
  run_with_perl_or_shell () \
  { \
    if grep -q '^#!.*perl' $$1; then
      $(PERL) $$1; \
    else \
      $(SHELL) $$1; \
    fi; \
  }
LOG_COMPILER = run_with_perl_or_shell
          </screen></item>
          <item><para>The package authors can now use customary
testsuite drivers within the framework provided by the 'parallel-tests'
testsuite harness. Consistently with the existing syntax, this can be
done by defining special makefile variables 'LOG_DRIVER' and
'&lt;ext&gt;_LOG_DRIVER'.</para></item>
          <item><para>A new developer-reserved variable
'AM_TESTS_FD_REDIRECT' can be used to redirect/define file descriptors
used by the test scripts.</para></item>
          <item><para>The parallel-tests harness generates now, in
addition the '.log' files holding the output produced by the test
scripts, a new set of '.trs' files, holding "metadata" derived by the
execution of the test scripts; among such metadata are the outcomes of
the test cases run by a script.</para></item>
          <item><para>Initial and still experimental support for the TAP
test protocol is now provided.</para></item>
        </items>

        <items name="Changes to Yacc and Lex support">
          <item><para>C source and header files derived from
non-distributed Yacc and/or Lex sources are now removed by a simple
"make clean" (while they were previously removed only by "make
maintainer-clean").</para></item>
          <item><para>Slightly backward-incompatible change, relevant
only for use of Yacc with C++: the extensions of the header files
produced by the Yacc rules are now modelled after the extension of the
corresponding sources.  For example, yacc files named "foo.y++" and
"bar.yy" will produce header files named "foo.h++" and "bar.hh"
respectively, where they would have previously produced header files
named simply "foo.h" and "bar.h".  This change offers better
compatibility with 'bison -o'.</para></item>
        </items>

        <items name="Miscellaneous changes">
          <item><para>The AM_PROG_VALAC macro now causes configure to
exit with status 77, rather than 1, if the vala compiler found is too
old.</para></item>
          <item><para>The build system of Automake itself now avoids the
use of make recursion as much as possible.</para></item>
          <item><para>Automake now prefers to quote 'like this' or "like
this", rather than `like this', in diagnostic message and generated
Makefiles, to accommodate the new GNU Coding Standards
recommendations.</para></item>
          <item><para>Automake has a new option '--print-libdir' that
prints the path of the directory containing the Automake-provided
scripts and data files.</para></item>
          <item><para>The 'dist' and 'dist-all' targets now can run
compressors in parallel.</para></item>
          <item><para>The rules to create pdf, dvi and ps output from
Texinfo files now works better with modern 'texi2dvi' script, by
explicitly passing it the '--clean' option to ensure stray auxiliary
files are not left to clutter the build directory.</para></item>
          <item><para>Automake can now generate silenced rules for
texinfo outputs.</para></item>
          <item><para>Some auxiliary files that are automatically
distributed by Automake (e.g., 'install-sh', or the 'depcomp' script for
packages compiling C sources) might now be listed in the DIST_COMMON
variable in many Makefile.in files, rather than in the top-level
one.</para></item>
          <item><para>Messages of types warning or error from 'automake'
and 'aclocal' are now prefixed with the respective type, and presence of
-Werror is noted.</para></item>
          <item><para>Automake's early configure-time sanity check now
tries to avoid sleeping for a second, which slowed down cached configure
runs noticeably.  In that case, it will check back at the end of the
configure script to ensure that at least one second has passed, to avoid
time stamp issues with makefile rules rerunning autotools
programs.</para></item>
          <item><para>The warnings in the category 'extra-portability'
are now enabled by '-Wall'.  In previous versions, one has to use
'-Wextra-portability' to enable them.</para></item>
        </items>

        <items name="Bugs fixed in 1.12">
          <item><para>Various minor bugfixes for recent or long-standing
bugs.</para></item>
        </items>

        <items name="Bugs introduced by 1.11">
          <item><para>The AM_COND_IF macro also works if the shell
expression for the conditional is no longer valid for the
condition.</para></item>
          <item><para>The automake-provided parallel testsuite harness
does not fail anymore with BSD make used in parallel mode when there are
test scripts in a subdirectory, like in:</para>
          <screen>
TESTS = sub/foo.test sub/bar.test
          </screen></item>
        </items>

        <items name="Long-standing bugs">
          <item><para>Automake's own build system finally have a real
"installcheck" target.</para></item>
          <item><para>Vala-related cleanup rules are now more complete,
and work better in a VPATH setup.</para></item>
          <item><para>Files listed with the AC_REQUIRE_AUX_FILE macro in
configure.ac are now automatically distributed also if the directory of
the auxiliary files coincides with the top-level
directory.</para></item>
          <item><para>Automake now detects the presence of the '-d' flag
in the various '*YFLAGS' variables even when their definitions involve
indirections through other variables, such as in:</para>
          <screen>
foo_opts = -d
AM_YFLAGS = $(foo_opts)
          </screen></item>
          <item><para>Automake now complains if a '*YFLAGS' variable has
any conditional content, not only a conditional
definition.</para></item>
          <item><para>Explicit enabling and/or disabling of Automake
warning categories through the '-W...' options now always takes
precedence over the implicit warning level implied by Automake
strictness (foreign, gnu or gnits), regardless of the order in which
such strictness and warning flags appear.  For example, a setting
like:</para>
          <screen>
AUTOMAKE_OPTIONS = -Wall --foreign
          </screen>
          <para>will cause the warnings in category 'portability' to be
enabled, even if those warnings are by default disabled in 'foreign'
strictness.</para></item>
        </items>
      </change>
    </notes>

    <changelog>
      <change date="2012 July 28" revision="2"
      author="Gary V. Vaughan" email="gary@thewrittenword.com">
        <item><para>Fix to correctly find data files</para></item>
      </change>
    </changelog>
  </program>
</programs>
