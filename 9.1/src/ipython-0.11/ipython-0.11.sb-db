<?xml version="1.0"?>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
<programs>
  <program name="ipython" version="0.11" revision="1"
  systype="*-linux*|*-solaris*">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}011</install-name>

    <sources>
      <source checksum="efc899e752a4a4a67a99575cea1719ef"
        checksum-type="md5" size="7958871"
        path="src/ipython-0.11.tar.gz"/>
      <patch checksum="2d7abea579213d6c48be17ec69d95409"
        checksum-type="md5" size="10318"
        path="src/ipython-0.11.tww.patch"/>
    </sources>

    <dependencies>
      <depend program="python" var="PYTHON" install-name="python26"
        add-path="prepend">v&gt;=2.6.7</depend>
      <depend program="nose" var="NOSE" install-name="nose11"
        module="2.6.7">v==1.1.2</depend>
      <depend program="pygments" var="PYGMENTS"
        install-name="pygments14" module="2.6.7">v&gt;=1.4</depend>
      <depend program="qt" var="LIBQT" install-name="libqt47"
        module="PyQt-2.6.7">v&gt;=4.7.4</depend>
      <depend program="sphinx" var="SPHINX" install-name="sphinx10"
        module="2.6.7">v&gt;=1.0.8</depend>
      <depend program="zeromq" var="PYZMQ" install-name="libzeromq21"
        module="pyzmq-2.6.7">v&gt;=2.1.9</depend>
    </dependencies>

    <script-header>
<![CDATA[
_docdir_base="doc"
_pysubdir="python26"

export PYTHONPATH="${SB_VAR_NOSE}/lib/${_pysubdir}:\
${SB_VAR_PYGMENTS}/lib/${_pysubdir}:\
${SB_VAR_PYZMQ}/lib/${_pysubdir}:\
${SB_VAR_SPHINX}/lib/${_pysubdir}"
]]>
    </script-header>

    <configure>
<![CDATA[
${SB_PATH_SED} -i -e "\
s!@libdir@!${SB_INSTALL_PREFIX}/lib!;\
s!@nosedir@!${SB_VAR_NOSE}/lib/${_pysubdir}!;\
s!@pygmentsdir@!${SB_VAR_PYGMENTS}/lib/${_pysubdir}!;\
s!@pyqtdir@!${SB_VAR_LIBQT}/lib/${_pysubdir}!;\
s!@pyzmqdir@!${SB_VAR_PYZMQ}/lib/${_pysubdir}!;\
s!@sphinxdir@!${SB_VAR_SPHINX}/lib/${_pysubdir}!;" \
IPython/parallel/scripts/ipcluster \
IPython/parallel/scripts/ipcontroller \
IPython/parallel/scripts/ipengine \
IPython/parallel/scripts/iplogger \
IPython/scripts/iptest \
IPython/scripts/ipython \
IPython/scripts/irunner \
IPython/scripts/pycolor \
IPython/testing/iptest.py \
IPython/zmq/entry_point.py

${SB_PATH_SED} -i -e "\
s!^\( *\)docdirbase *=.*!\1docdirbase = '${_docdir_base}'!; \
s!^\( *\)manpagebase *=.*!\1manpagebase = 'man/man1'!;" setupbase.py
]]>
    </configure>

    <build>
<![CDATA[
${SB_VAR_PYTHON}/bin/python setup.py build
]]>
    </build>

    <install>
<![CDATA[
${SB_VAR_PYTHON}/bin/python setup.py install -O1 --skip-build \
--install-lib="${SB_INSTALL_PREFIX}/lib" \
--prefix=${SB_INSTALL_PREFIX}

(cd ${SB_INSTALL_PREFIX}/man
  for _man in *[0-9]/*.gz; do
    gzip -d $_man
  done)
]]>
    </install>

    <licenses>
      <license>
        <para>IPython copyright and licensing notes</para>
        <para>Unless indicated otherwise, files in this project are
covered by a BSD-type license, included below.</para>
        <para>Individual authors are the holders of the copyright for
their code and are listed in each file.</para>
        <para>Some files (DPyGetOpt.py, for example) may be licensed
under different conditions. Ultimately each file indicates clearly the
conditions under which its author/authors have decided to publish the
code.</para>
        <para>IPython license</para>
        <para>IPython is released under a BSD-type license.</para>
        <para>Copyright (c) 2001, 2002, 2003, 2004 Fernando Perez
&lt;fperez@colorado.edu&gt;.</para>
        <para>Copyright (c) 2001 Janko Hauser
&lt;jhauser@zscout.de&gt; and Nathaniel Gray
&lt;n8gray@caltech.edu&gt;.</para>
        <para>All rights reserved.</para>
        <para>Redistribution and use in source and binary forms, with
or without modification, are permitted provided that the following
conditions are met:</para>
        <orderedlist type="lower-alpha">
          <item><para>Redistributions of source code must retain the
above copyright notice, this list of conditions and the following
disclaimer.</para></item>
          <item><para>Redistributions in binary form must reproduce
the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with
the distribution.</para></item>
          <item><para>Neither the name of the copyright holders nor
the names of any contributors to this software may be used to endorse
or promote products derived from this software without specific prior
written permission.</para></item>
        </orderedlist>

        <para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.</para>
      </license>
    </licenses>

    <notes>
      <change from="0.10" to="0.11">
        <para>IPython 0.11 is a major overhaul of IPython, two years
in the making. Most of the code base has been rewritten or at least
reorganized, breaking backward compatibility with several APIs in
previous versions. It is the first major release in two years, and
probably the most significant change to IPython since its inception.
We plan to have a relatively quick succession of releases, as people
discover new bugs and regressions. Once we iron out any significant
bugs in this process and settle down the new APIs, this series will
become IPython 1.0. We encourage feedback now on the core APIs, which
we hope to maintain stable during the 1.0 series.</para>
        <para>Since the internal APIs have changed so much, projects
using IPython as a library (as opposed to end-users of the
application) are the most likely to encounter regressions or changes
that break their existing use patterns.</para>
        <para>Major changes:</para>
        <unorderedlist>
          <item><para>Standalone Qt console: a new rich console has
been added to IPython, started with "ipython qtconsole". In this
application we have tried to retain the feel of a terminal for fast
and efficient workflows, while adding many features that a
line-oriented terminal simply can not support, such as inline figures,
full multiline editing with syntax highlighting, graphical tooltips
for function calls and much more.</para></item>
          <item><para>High-level parallel computing with ZeroMQ: Using
the same architecture that our Qt console is based on, we have
completely rewritten our high-level parallel computing machinery that
in prior versions used the Twisted networking framework. While this
change will require users to update their codes, the improvements in
performance, memory control and internal consistency across our
codebase convinced us it was a price worth paying. We have tried to
explain how to best proceed with this update, and will be happy to
answer questions that may arise.</para></item>
          <item><para>New model for GUI/plotting support in the
terminal: Now instead of the various "-Xthread" flags we had before,
GUI support is provided without the use of any threads, by directly
integrating GUI event loops with Python's "PyOS_InputHook" API. A new
command-line flag "--gui" controls GUI support, and it can also be
enabled after IPython startup via the new "%gui" magic. This requires
some changes if you want to execute GUI-using scripts inside
IPython.</para></item>
          <item><para>A two-process architecture: The Qt console is
the first use of a new model that splits IPython between a kernel
process where code is executed and a client that handles user
interaction. We plan on also providing terminal and web-browser based
clients using this infrastructure in future releases. This model
allows multiple clients to interact with an IPython process through a
well-documented messaging protocol using the ZeroMQ networking
library.</para></item>
          <item><para>Refactoring: The entire codebase has been
refactored in order to make it more modular and easier to contribute
to. IPython has traditionally been a hard project to participate
because the old codebase was very monolithic. We hope this (ongoing)
restructuring will make it easier for new developers to join
us.</para></item>
          <item><para>Vim integration: Vim can be configured to
seamlessly control an IPython kernel.</para></item>
          <item><para>Integration into Microsoft Visual Studio: This
version of IPython has been integrated into Microsoft Visual Studio's
Python tools open source plug-in.</para></item>
          <item><para>Improved unicode support: We closed many bugs
related to unicode input.</para></item>
          <item><para>Python 3: IPython now runs on Python
3.x.</para></item>
          <item><para>New profile model: Profiles are now directories
that contain all relevant infromation for that session, and thus
better isolate IPython use-cases.</para></item>
          <item><para>SQLite storage for history: All history is now
stored in a SQLite database, providing support for multiple
simultaneous sessions that won't clobber each other as well as the
ability to perform queries on all stored data.</para></item>
          <item><para>New configuration system: All parts of IPython
are now configured via a mechanism inspired by the Enthought Traits
library. Any configurable element can have its attributes set either
via files that now use real Python syntax or from the
command-line.</para></item>
          <item><para>Pasting of code with prompts: IPython now
intelligently strips out input prompts , be they plain Python ones
("&gt;&gt;&gt;" and "...") or IPython ones ("In [N]:" and "
...:").</para></item>
        </unorderedlist>
      </change>
    </notes>
  </program>
</programs>
