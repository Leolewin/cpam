<?xml version="1.0"?>
<programs>
<!DOCTYPE programs SYSTEM "sb-db.dtd">
  <program name="bash" version="4.2" revision="1">
    <build-name>${SB_PROG_NAME}-${SB_PROG_VER}</build-name>

    <install-name>${SB_PROG_NAME}42</install-name>

    <sources>
      <source checksum="3fb927c7c33022f1c327f14a81c0d4b0"
        checksum-type="md5" size="7009201"
        path="src/bash-4.2.tar.gz"/>
      <patch checksum="3ef84acfc5f59d5d73f38f6315b0570f"
        checksum-type="md5" size="2943"
        path="src/bash-4.2.001.patch"/>
      <patch checksum="30e7948079921d3261efcc6a40722135"
        checksum-type="md5" size="1780"
        path="src/bash-4.2.002.patch"/>
      <patch checksum="9ea06decec43a198f3d7cf29acc602f8"
        checksum-type="md5" size="6896"
        path="src/bash-4.2.003.patch"/>
      <patch checksum="c9db198b350daece3f473d811b89cfdb"
        checksum-type="md5" size="1538"
        path="src/bash-4.2.004.patch"/>
      <patch checksum="e4a8e3065abfe5736dd3da7e202320f7"
        checksum-type="md5" size="3570"
        path="src/bash-4.2.005.patch"/>
      <patch checksum="f9b9b6c5064e23ace499baf0e2046e72"
        checksum-type="md5" size="1227"
        path="src/bash-4.2.006.patch"/>
      <patch checksum="55ddb7abd6b3abf24fd660710f14f227"
        checksum-type="md5" size="1452"
        path="src/bash-4.2.007.patch"/>
      <patch checksum="1bc53bae360fbd8a777aa739a85a30ec"
        checksum-type="md5" size="2136"
        path="src/bash-4.2.008.patch"/>
      <patch checksum="6550e3309bca36649953aac3ee9456cc"
        checksum-type="md5" size="2230"
        path="src/bash-4.2.009.patch"/>
      <patch checksum="3a2a12151fe35cb92d2fe294606c0bdf"
        checksum-type="md5" size="1892"
        path="src/bash-4.2.010.patch"/>
      <patch checksum="64f3ceb698a933ad6b775097c1a42091"
        checksum-type="md5" size="1563"
        path="src/bash-4.2.tww.patch"/>
      <patch checksum="cb2709552f5a3fc3a81d7d2ae9c6cd34"
        checksum-type="md5" size="1054672"
        path="src/bash-4.2.auto.patch"/>
    </sources>

    <dependencies>
      <depend program="bison" install-name="bison24"
        add-path="prepend" type="build">v&gt;=2.4.3</depend>
      <depend program="gettext" var="GETTEXT"
        install-name="gettext018"
        add-path="prepend">v&gt;=0.18.1.1</depend>
      <depend program="libiconv" var="LIBICONV"
        install-name="libiconv113"
        add-path="prepend">v&gt;=1.13.1</depend>
      <depend program="ncurses" var="NCURSES"
        install-name="ncurses57">v&gt;=5.7</depend>
      <depend program="readline" var="READLINE"
        install-name="libreadline62">v&gt;=6.2</depend>
    </dependencies>

    <script-header>
<![CDATA[
_datadir="${SB_INSTALL_PREFIX}/share"
_docdir="${SB_INSTALL_PREFIX}/doc"
]]>
    </script-header>

    <configure>
<![CDATA[
case "${SB_SYSTYPE}" in
*-aix*)
  CC=xlc CFLAGS="-O2 -qro -qroconst -qmaxmem=-1 -qarch=ppc"
  LDFLAGS="-Wl,-brtl -Wl,-blibpath:/usr/lib"
  CC_LD_RT="-Wl,-blibpath:" ;;
ia64*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  LDFLAGS="-Wl,+nodefaultrpath"
  CC_LD_RT="-Wl,+b," ;;
*-hpux11.[01]*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +DAportable \
+Oentrysched +Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b,"

  # getaddrinfo is broken
  export ac_cv_func_getaddrinfo=no ;;
*-hpux*)
  CC=cc CFLAGS="-z +O2 +Ofltacc +Olit=all +Oentrysched \
+Odataprefetch +Onolimit"
  CC_LD_RT="-Wl,+s,+b," ;;
*-irix*)
  # Use -O1 rather than -O2 to work around compiler bug
  CC=cc CFLAGS="-Wl,-woff,84 -Wl,-woff,85 -woff 1429 \
-use_readonly_const -G0 -rdata_shared -DEBUG:optimize_space=ON \
-O1 -OPT:Olimit=0"
  CC_LD_RT="-Wl,-rpath,"

  # strtoimax not available before IRIX 6.5.19m
  export ac_cv_func_strtoimax=no

  # getaddrinfo requires newer version of IRIX
  export ac_cv_func_getaddrinfo=no ;;
i?86*-linux*)
  CFLAGS="-O2 -mtune=pentiumpro -march=pentiumpro"
  CC_LD_RT="-Wl,-rpath," ;;
*-linux*)
  CC_LD_RT="-Wl,-rpath," ;;
*-osf*)
  CC=cc CFLAGS="-O2 -arch ev5 -msym -readonly_strings -D_OSF_SOURCE"
  CC_LD_RT="-Wl,-rpath," ;;
i?86*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=pentium4"
  CC_LD_RT="-R" ;;
*-solaris2.8)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-xarch=v8plusa"
  CC_LD_RT="-R" ;;
*-solaris*)
  CC=cc CFLAGS="-mr -Qn -xstrconst -xO2 -xtarget=ultra2 \
-m32 -xarch=sparcvis"
  CC_LD_RT="-R" ;;
esac

${SHELL} ./configure CC="${CC:-gcc}" CFLAGS="${CFLAGS:--O2}" \
CFLAGS_FOR_BUILD="${CFLAGS:--O2}" \
CPPFLAGS="${SB_VAR_READLINE+-I${SB_VAR_READLINE_INC}} \
${SB_VAR_NCURSES+-I${SB_VAR_NCURSES_INC}} \
${SB_VAR_NCURSES+-I${SB_VAR_NCURSES_INC}/ncurses}" \
LDFLAGS="${SB_VAR_READLINE+-L${SB_VAR_READLINE_LIB}} \
${SB_VAR_NCURSES+-L${SB_VAR_NCURSES_LIB}} \
${SB_VAR_READLINE+${CC_LD_RT}${SB_VAR_READLINE_LIB}} \
${SB_VAR_NCURSES+${CC_LD_RT}${SB_VAR_NCURSES_LIB}} \
${LDFLAGS+${LDFLAGS}}" \
${SB_VAR_GETTEXT+--with-libintl-prefix=${SB_VAR_GETTEXT}} \
${SB_VAR_LIBICONV+--with-libiconv-prefix=${SB_VAR_LIBICONV}} \
EMACS=no --enable-alias --enable-array-variables \
--enable-bang-history --enable-brace-expansion \
--enable-command-timing --enable-cond-command --enable-debugger \
--enable-directory-stack --enable-dparen-arithmetic \
--enable-extended-glob --enable-help-builtin --enable-history \
--enable-job-control --enable-process-substitution \
--enable-progcomp --enable-prompt-string-decoding --enable-readline \
--enable-restricted --with-bash-malloc=no --with-curses \
--with-installed-readline --datadir=${_datadir} ${ARGS+${ARGS}} \
--mandir=${SB_INSTALL_PREFIX}/man \
--infodir=${SB_INSTALL_PREFIX}/info --prefix=${SB_INSTALL_PREFIX}
]]>
    </configure>

    <test auto-include="0">
<![CDATA[
gmake check
]]>
    </test>

    <install>
<![CDATA[
gmake install

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/html
${SB_PATH_INSTALL} -m 644 -o root -g 0 doc/*.html ${_docdir}/html

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/pdf
${SB_PATH_INSTALL} -m 644 -o root -g 0 doc/*.pdf ${_docdir}/pdf

${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/ps
${SB_PATH_INSTALL} -m 644 -o root -g 0 doc/*.ps ${_docdir}/ps

# install texinfo source files
${SB_PATH_INSTALL} -m 755 -o root -g 0 -d ${_docdir}/texinfo
${SB_PATH_INSTALL} -m 644 -o root -g 0 doc/bashref.texi \
doc/fdl.texi doc/version.texi ${_docdir}/texinfo
${SB_PATH_INSTALL} -m 644 -o root -g 0 lib/readline/doc/rluser.texi \
lib/readline/doc/hsuser.texi ${_docdir}/texinfo
]]>
    </install>

    <licenses>
      <license path="gpl-3.license"/>
    </licenses>

    <notes>
      <change from="4.1" to="4.2">
        <items name="New Features in Bash">
          <item><para>`exec -a foo' now sets $0 to `foo' in an
executable shell script without a leading #!.</para></item>
          <item><para>Subshells begun to execute command substitutions
or run shell functions or builtins in subshells do not reset trap
strings until a new trap is specified.  This allows $(trap) to display
the caller's traps and the trap strings to persist until a new trap is
set.</para></item>
          <item><para>`trap -p' will now show signals ignored at shell
startup, though their disposition still cannot be
modified.</para></item>
          <item><para>$'...', echo, and printf understand \uXXXX and
\UXXXXXXXX escape sequences.</para></item>
          <item><para>declare/typeset has a new `-g' option, which
creates variables in the global scope even when run in a shell
function.</para></item>
          <item><para>test/[/[[ have a new -v variable unary operator,
which returns success if `variable' has been set.</para></item>
          <item><para>Posix parsing changes to allow `! time command'
and multiple consecutive instances of `!' (which toggle) and `time'
(which have no cumulative effect).</para></item>
          <item><para>Posix change to allow `time' as a command by
itself to print the elapsed user, system, and real times for the shell
and its children.</para></item>
          <item><para>$((...)) is always parsed as an arithmetic
expansion first, instead of as a potential nested command
substitution, as Posix requires.</para></item>
          <item><para>A new FUNCNEST variable to allow the user to
control the maximum shell function nesting (recursive execution)
level.</para></item>
          <item><para>The mapfile builtin now supplies a third
argument to the callback command: the line about to be assigned to the
supplied array index.</para></item>
          <item><para>The printf builtin has a new %(fmt)T specifier,
which allows time values to use strftime-like
formatting.</para></item>
          <item><para>There is a new `compat41' shell
option.</para></item>
          <item><para>The cd builtin has a new Posix-mandated `-e'
option.</para></item>
          <item><para>Negative subscripts to indexed arrays,
previously errors, now are treated as offsets from the maximum
assigned index + 1.</para></item>
          <item><para>Negative length specifications in the
${var:offset:length} expansion, previously errors, are now treated as
offsets from the end of the variable.</para></item>
          <item><para>Parsing change to allow `time -p
--'.</para></item>
          <item><para>Posix-mode parsing change to not recognize
`time' as a keyword if the following token begins with a `-'.  This
means no more Posix-mode `time -p'.  Posix interpretation
267.</para></item>
          <item><para>There is a new `lastpipe' shell option that runs
the last command of a pipeline in the current shell context.  The
lastpipe option has no effect if job control is enabled.</para></item>
          <item><para>History expansion no longer expands the `$!'
variable expansion.</para></item>
          <item><para>Posix mode shells no longer exit if a variable
assignment error occurs with an assignment preceding a command that is
not a special builtin.</para></item>
          <item><para>Non-interactive mode shells exit if -u is
enabled and an attempt is made to use an unset variable with the % or
# expansions, the `//', `^', or `,' expansions, or the parameter
length expansion.</para></item>
          <item><para>Posix-mode shells use the argument passed to `.'
as-is if a $PATH search fails, effectively searching the current
directory.  Posix-2008 change.</para></item>
        </items>

        <items name="New Features in Readline">
          <item><para> The history library does not try to write the
history filename in the current directory if $HOME is unset.  This
closes a potential security problem if the application does not
specify a history filename.</para></item>
          <item><para> New bindable variable
`completion-display-width' to set the number of columns used when
displaying completions.</para></item>
          <item><para> New bindable variable `completion-case-map' to
cause case-insensitive completion to treat `-' and `_' as
identical.</para></item>
          <item><para> There are new bindable vi-mode command names to
avoid readline's case- insensitive matching not allowing them to be
bound separately.</para></item>
          <item><para> New bindable variable
`menu-complete-display-prefix' causes the menu completion code to
display the common prefix of the possible completions before cycling
through the list, instead of after.</para></item>
        </items>
      </change>

      <change from="4.0" to="4.1">
        <items name="New Features in Bash">
          <item><para>Here-documents within $(...) command
substitutions may once more be delimited by the closing right paren,
instead of requiring a newline.</para></item>
          <item><para>Bash's file status checks (executable, readable,
etc.) now take file system ACLs into account on file systems that
support them.</para></item>
          <item><para>Bash now passes environment variables with names
that are not valid shell variable names through into the environment
passed to child processes.</para></item>
          <item><para>The `execute-unix-command' readline function now
attempts to clear and reuse the current line rather than move to a new
one after the command executes.</para></item>
          <item><para>`printf -v' can now assign values to array
indices.</para></item>
          <item><para>New `complete -E' and `compopt -E' options that
work on the "empty" completion: completion attempted on an empty
command line.</para></item>
          <item><para>New complete/compgen/compopt -D option to define
a `default' completion: a completion to be invoked on command for
which no completion has been defined.  If this function returns 124,
programmable completion is attempted again, allowing a user to
dynamically build a set of completions as completion is attempted by
having the default completion function install individual completion
functions each time it is invoked.</para></item>
          <item><para>When displaying associative arrays, subscripts
are now quoted.</para></item>
          <item><para>Changes to dabbrev-expand to make it more
`emacs-like': no space appended after matches, completions are not
sorted, and most recent history entries are presented
first.</para></item>
          <item><para>The [[ and (( commands are now subject to the
setting of `set -e' and the ERR trap.</para></item>
          <item><para>The source/. builtin now removes NUL bytes from
the file before attempting to parse commands.</para></item>
          <item><para>There is a new configuration option (in
config-top.h) that forces bash to forward all history entries to
syslog.</para></item>
          <item><para>A new variable $BASHOPTS to export shell options
settable using `shopt' to child processes.</para></item>
          <item><para>There is a new confgure option that forces the
extglob option to be enabled by default.</para></item>
          <item><para>New variable $BASH_XTRACEFD; when set to an
integer bash will write xtrace output to that file
descriptor.</para></item>
          <item><para>If the optional left-hand-side of a redirection
is of the form {var}, the shell assigns the file descriptor used to
$var or uses $var as the file descriptor to move or close, depending
on the redirection operator.</para></item>
          <item><para>The &lt; and &gt; operators to the [[
conditional command now do string comparison according to the current
locale if the compatibility level is greater than 40.</para></item>
          <item><para>Programmable completion now uses the completion
for `b' instead of `a' when completion is attempted on a line like: a
$(b c.</para></item>
          <item><para>Force extglob on temporarily when parsing the
pattern argument to the == and != operators to the [[ command, for
compatibility.</para></item>
          <item><para>Changed the behavior of interrupting the wait
builtin when a SIGCHLD is received and a trap on SIGCHLD is set to be
Posix-mode only.</para></item>
          <item><para>The read builtin has a new `-N nchars' option,
which reads exactly NCHARS characters, ignoring delimiters like
newline.</para></item>
          <item><para>The mapfile/readarray builtin no longer stores
the commands it invokes via callbacks in the history
list.</para></item>
          <item><para>There is a new `compat40' shopt
option.</para></item>
        </items>

        <items name="New Features in Readline">
          <item><para>New bindable function:
menu-complete-backward.</para></item>
          <item><para>In the vi insertion keymap, C-n is now bound to
menu-complete by default, and C-p to
menu-complete-backward.</para></item>
          <item><para>When in vi command mode, repeatedly hitting ESC
now does nothing, even when ESC introduces a bound key sequence.  This
is closer to how historical vi behaves.</para></item>
          <item><para>New bindable function: skip-csi-sequence.  Can
be used as a default to consume key sequences generated by keys like
Home and End without having to bind all keys.</para></item>
          <item><para>New application-settable function:
rl_filename_rewrite_hook.  Can be used to rewite or modify filenames
read from the file system before they are compared to the word to be
completed.</para></item>
          <item><para>New bindable variable: skip-completed-text,
active when completing in the middle of a word.  If enabled, it means
that characters in the completion that match characters in the
remainder of the word are "skipped" rather than inserted into the
line.</para></item>
          <item><para>The pre-readline-6.0 version of menu completion
is available as "old-menu-complete" for users who do not like the
readline-6.0 version.</para></item>
          <item><para>New bindable variable: echo-control-characters.
If enabled, and the tty ECHOCTL bit is set, controls the echoing of
characters corresponding to keyboard-generated signals.</para></item>
          <item><para>New bindable variable: enable-meta-key.
Controls whether or not readline sends the smm/rmm sequences if the
terminal indicates it has a meta key that enables eight-bit
characters.</para></item>
        </items>
      </change>

      <change from="3.2" to="4.0">
        <items name="New Features in Bash">
          <item><para>When using substring expansion on the positional
parameters, a starting index of 0 now causes $0 to be prefixed to the
list.</para></item>
          <item><para>The `help' builtin now prints its columns with
entries sorted vertically rather than horizontally.</para></item>
          <item><para>There is a new variable, $BASHPID, which always
returns the process id of the current shell.</para></item>
          <item><para>There is a new `autocd' option that, when
enabled, causes bash to attempt to `cd' to a directory name that is
supplied as the first word of a simple command.</para></item>
          <item><para>There is a new `checkjobs' option that causes
the shell to check for and report any running or stopped jobs at
exit.</para></item>
          <item><para>The programmable completion code exports a new
COMP_TYPE variable, set to a character describing the type of
completion being attempted.</para></item>
          <item><para>The programmable completion code exports a new
COMP_KEY variable, set to the character that caused the completion to
be invoked (e.g., TAB).</para></item>
          <item><para>If creation of a child process fails due to
insufficient resources, bash will try again several times before
reporting failure.</para></item>
          <item><para>The programmable completion code now uses the
same set of characters as readline when breaking the command line into
a list of words.</para></item>
          <item><para>The block multiplier for the ulimit -c and -f
options is now 512 when in Posix mode, as Posix
specifies.</para></item>
          <item><para>Changed the behavior of the read builtin to save
any partial input received in the specified variable when the read
builtin times out.  This also results in variables specified as
arguments to read to be set to the empty string when there is no input
available.  When the read builtin times out, it returns an exit status
greater than 128.</para></item>
          <item><para>The shell now has the notion of a `compatibility
level', controlled by new variables settable by `shopt'.  Setting this
variable currently restores the bash-3.1 behavior when processing
quoted strings on the rhs of the `=~' operator to the `[['
command.</para></item>
          <item><para>The `ulimit' builtin now has new -b (socket
buffer size) and -T (number of threads) options.</para></item>
          <item><para>The -p option to `declare' now displays all
variable values and attributes (or function values and attributes if
used with -f).</para></item>
          <item><para>There is a new `compopt' builtin that allows
completion functions to modify completion options for existing
completions or the completion currently being executed.</para></item>
          <item><para>The `read' builtin has a new -i option which
inserts text into the reply buffer when using readline.</para></item>
          <item><para>A new `-E' option to the complete builtin allows
control of the default behavior for completion on an empty
line.</para></item>
          <item><para>There is now limited support for completing
command name words containing globbing characters.</para></item>
          <item><para>Changed format of internal help documentation
for all builtins to roughly follow man page format.</para></item>
          <item><para>The `help' builtin now has a new -d option, to
display a short description, and a -m option, to print help
information in a man page-like format.</para></item>
          <item><para>There is a new `mapfile' builtin to populate an
array with lines from a given file.  The name `readarray' is a
synonym.</para></item>
          <item><para>If a command is not found, the shell attempts to
execute a shell function named `command_not_found_handle', supplying
the command words as the function arguments.</para></item>
          <item><para>There is a new shell option: `globstar'.  When
enabled, the globbing code treats `**' specially -- it matches all
directories (and files within them, when appropriate)
recursively.</para></item>
          <item><para>There is a new shell option: `dirspell'.  When
enabled, the filename completion code performs spelling correction on
directory names during completion.</para></item>
          <item><para>The `-t' option to the `read' builtin now
supports fractional timeout values.</para></item>
          <item><para>Brace expansion now allows zero-padding of
expanded numeric values and will add the proper number of zeroes to
make sure all values contain the same number of digits.</para></item>
          <item><para>There is a new bash-specific bindable readline
function: `dabbrev-expand'. It uses menu completion on a set of words
taken from the history list.</para></item>
          <item><para>The command assigned to a key sequence with
`bind -x' now sets two new variables in the environment of the
executed command:  READLINE_LINE_BUFFER and READLINE_POINT.  The
command can change the current readline line and cursor position by
modifying READLINE_LINE_BUFFER and READLINE_POINT,
respectively.</para></item>
          <item><para>There is a new &amp;&gt;&gt; redirection
operator, which appends the standard output and standard error to the
named file.</para></item>
          <item><para>The parser now understands `|&amp;' as a synonym
for `2&gt;&amp;1 |', which redirects the standard error for a command
through a pipe.</para></item>
          <item><para>The new `;&amp;' case statement action list
terminator causes execution to continue with the action associated
with the next pattern in the statement rather than terminating the
command.</para></item>
          <item><para>The new `;;&amp;' case statement action list
terminator causes the shell to test the next set of patterns after
completing execution of the current action, rather than terminating
the command.</para></item>
          <item><para>The shell understands a new variable:
PROMPT_DIRTRIM.  When set to an integer value greater than zero,
prompt expansion of \w and \W  will retain only that number of
trailing pathname components and replace the intervening characters
with `...'.</para></item>
          <item><para>There are new case-modifying word expansions:
uppercase (^[^]) and lowercase (,[,]).  They can work on either the
first character or array element, or globally.  They accept an
optional shell pattern that determines which characters to modify.
There is an optionally- configured feature to include capitalization
operators.</para></item>
          <item><para>The shell provides associative array variables,
with the appropriate support to create, delete, assign values to, and
expand them.</para></item>
          <item><para>The `declare' builtin now has new -l (convert
value to lowercase upon assignment) and -u (convert value to uppercase
upon assignment) options. There is an optionally-configurable -c
option to capitalize a value at assignment.</para></item>
          <item><para>There is a new `coproc' reserved word that
specifies a coprocess: an asynchronous command run with two pipes
connected to the creating shell. Coprocs can be named.  The input and
output file descriptors and the PID of the coprocess are available to
the calling shell in variables with coproc-specific
names.</para></item>
          <item><para>A value of 0 for the -t option to `read' now
returns success if there is input available to be read from the
specified file descriptor.</para></item>
          <item><para>CDPATH and GLOBIGNORE are ignored when the shell
is running in privileged mode.</para></item>
          <item><para>New bindable readline functions
shell-forward-word and shell-backward-word, which move forward and
backward words delimited by shell metacharacters and honor shell
quoting.</para></item>
          <item><para> New bindable readline functions
shell-backward-kill-word and shell-kill-word which kill words backward
and forward, but use the same word boundaries as shell-forward-word
and shell-backward-word.</para></item>
        </items>

        <items name="New Features in Readline">
          <item><para>A new variable, rl_sort_completion_matches;
allows applications to inhibit match list sorting (but beware: some
things don't work right if applications do this).</para></item>
          <item><para>A new variable, rl_completion_invoking_key;
allows applications to discover the key that invoked rl_complete or
rl_menu_complete.</para></item>
          <item><para>The functions rl_block_sigint and
rl_release_sigint are now public and available to calling applications
who want to protect critical sections (like redisplay).</para></item>
          <item><para>The functions rl_save_state and rl_restore_state
are now public and available to calling applications; documented rest
of readline's state flag values.</para></item>
          <item><para>A new user-settable variable, `history-size',
allows setting the maximum number of entries in the history
list.</para></item>
          <item><para>There is a new implementation of menu
completion, with several improvements over the old; the most notable
improvement is a better `completions browsing' mode.</para></item>
          <item><para>The menu completion code now uses the
rl_menu_completion_entry_function variable, allowing applications to
provide their own menu completion generators.</para></item>
          <item><para>There is support for replacing a prefix  of a
pathname with a `...' when displaying possible completions.  This is
controllable by setting the `completion-prefix-display-length'
variable.  Matches with a common prefix longer than this value have
the common prefix replaced with `...'.</para></item>
          <item><para>There is a new `revert-all-at-newline' variable.
If enabled, readline will undo all outstanding changes to all history
lines when `accept-line' is executed.</para></item>
          <item><para>If the kernel supports it, readline displays
special characters corresponding to a keyboard-generated signal when
the signal is received.</para></item>
        </items>
      </change>
    </notes>
  </program>
</programs>
